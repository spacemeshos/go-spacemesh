// Code generated by MockGen. DO NOT EDIT.
// Source: ./blocks.go
//
// Generated by this command:
//
//	mockgen -typed -package=blockssync -destination=./mocks.go -source=./blocks.go
//
// Package blockssync is a generated GoMock package.
package blockssync

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockblockFetcher is a mock of blockFetcher interface.
type MockblockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockblockFetcherMockRecorder
}

// MockblockFetcherMockRecorder is the mock recorder for MockblockFetcher.
type MockblockFetcherMockRecorder struct {
	mock *MockblockFetcher
}

// NewMockblockFetcher creates a new mock instance.
func NewMockblockFetcher(ctrl *gomock.Controller) *MockblockFetcher {
	mock := &MockblockFetcher{ctrl: ctrl}
	mock.recorder = &MockblockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblockFetcher) EXPECT() *MockblockFetcherMockRecorder {
	return m.recorder
}

// GetBlocks mocks base method.
func (m *MockblockFetcher) GetBlocks(arg0 context.Context, arg1 []types.BlockID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBlocks indicates an expected call of GetBlocks.
func (mr *MockblockFetcherMockRecorder) GetBlocks(arg0, arg1 any) *blockFetcherGetBlocksCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockblockFetcher)(nil).GetBlocks), arg0, arg1)
	return &blockFetcherGetBlocksCall{Call: call}
}

// blockFetcherGetBlocksCall wrap *gomock.Call
type blockFetcherGetBlocksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *blockFetcherGetBlocksCall) Return(arg0 error) *blockFetcherGetBlocksCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *blockFetcherGetBlocksCall) Do(f func(context.Context, []types.BlockID) error) *blockFetcherGetBlocksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *blockFetcherGetBlocksCall) DoAndReturn(f func(context.Context, []types.BlockID) error) *blockFetcherGetBlocksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
