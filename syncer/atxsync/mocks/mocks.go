// Code generated by MockGen. DO NOT EDIT.
// Source: ./atxsync.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/mocks.go -source=./atxsync.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockatxFetcher is a mock of atxFetcher interface.
type MockatxFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockatxFetcherMockRecorder
}

// MockatxFetcherMockRecorder is the mock recorder for MockatxFetcher.
type MockatxFetcherMockRecorder struct {
	mock *MockatxFetcher
}

// NewMockatxFetcher creates a new mock instance.
func NewMockatxFetcher(ctrl *gomock.Controller) *MockatxFetcher {
	mock := &MockatxFetcher{ctrl: ctrl}
	mock.recorder = &MockatxFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockatxFetcher) EXPECT() *MockatxFetcherMockRecorder {
	return m.recorder
}

// GetAtxs mocks base method.
func (m *MockatxFetcher) GetAtxs(arg0 context.Context, arg1 []types.ATXID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtxs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAtxs indicates an expected call of GetAtxs.
func (mr *MockatxFetcherMockRecorder) GetAtxs(arg0, arg1 any) *atxFetcherGetAtxsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtxs", reflect.TypeOf((*MockatxFetcher)(nil).GetAtxs), arg0, arg1)
	return &atxFetcherGetAtxsCall{Call: call}
}

// atxFetcherGetAtxsCall wrap *gomock.Call
type atxFetcherGetAtxsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *atxFetcherGetAtxsCall) Return(arg0 error) *atxFetcherGetAtxsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *atxFetcherGetAtxsCall) Do(f func(context.Context, []types.ATXID) error) *atxFetcherGetAtxsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *atxFetcherGetAtxsCall) DoAndReturn(f func(context.Context, []types.ATXID) error) *atxFetcherGetAtxsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
