// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package fetch

import (
	"github.com/spacemeshos/go-scale"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

func (t *LayerData) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStructSlice(enc, t.Ballots)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Blocks)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *LayerData) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStructSlice[types.BallotID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Ballots = field
	}
	{
		field, n, err := scale.DecodeStructSlice[types.BlockID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Blocks = field
	}
	return total, nil
}

func (t *LayerOpinion) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.EpochWeight))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.AggregatedHash[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Verified.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Valid)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Invalid)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.Cert)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *LayerOpinion) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.EpochWeight = uint64(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.AggregatedHash[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Verified.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeStructSlice[types.BlockID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Valid = field
	}
	{
		field, n, err := scale.DecodeStructSlice[types.BlockID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Invalid = field
	}
	{
		field, n, err := scale.DecodeOption[types.Certificate](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Cert = field
	}
	return total, nil
}
