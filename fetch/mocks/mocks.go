// Code generated by MockGen. DO NOT EDIT.
// Source: ./fetch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	datastore "github.com/spacemeshos/go-spacemesh/datastore"
	fetch "github.com/spacemeshos/go-spacemesh/fetch"
	p2p "github.com/spacemeshos/go-spacemesh/p2p"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// AddPeersFromHash mocks base method.
func (m *MockFetcher) AddPeersFromHash(fromHash types.Hash32, toHashes []types.Hash32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddPeersFromHash", fromHash, toHashes)
}

// AddPeersFromHash indicates an expected call of AddPeersFromHash.
func (mr *MockFetcherMockRecorder) AddPeersFromHash(fromHash, toHashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeersFromHash", reflect.TypeOf((*MockFetcher)(nil).AddPeersFromHash), fromHash, toHashes)
}

// GetHash mocks base method.
func (m *MockFetcher) GetHash(hash types.Hash32, h datastore.Hint, validateHash bool) chan fetch.HashDataPromiseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", hash, h, validateHash)
	ret0, _ := ret[0].(chan fetch.HashDataPromiseResult)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockFetcherMockRecorder) GetHash(hash, h, validateHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockFetcher)(nil).GetHash), hash, h, validateHash)
}

// GetHashes mocks base method.
func (m *MockFetcher) GetHashes(hash []types.Hash32, hint datastore.Hint, validateHash bool) map[types.Hash32]chan fetch.HashDataPromiseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashes", hash, hint, validateHash)
	ret0, _ := ret[0].(map[types.Hash32]chan fetch.HashDataPromiseResult)
	return ret0
}

// GetHashes indicates an expected call of GetHashes.
func (mr *MockFetcherMockRecorder) GetHashes(hash, hint, validateHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashes", reflect.TypeOf((*MockFetcher)(nil).GetHashes), hash, hint, validateHash)
}

// RegisterPeerHashes mocks base method.
func (m *MockFetcher) RegisterPeerHashes(peer p2p.Peer, hashes []types.Hash32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterPeerHashes", peer, hashes)
}

// RegisterPeerHashes indicates an expected call of RegisterPeerHashes.
func (mr *MockFetcherMockRecorder) RegisterPeerHashes(peer, hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPeerHashes", reflect.TypeOf((*MockFetcher)(nil).RegisterPeerHashes), peer, hashes)
}

// Start mocks base method.
func (m *MockFetcher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockFetcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFetcher)(nil).Start))
}

// Stop mocks base method.
func (m *MockFetcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockFetcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFetcher)(nil).Stop))
}

// MocknetworkInterface is a mock of networkInterface interface.
type MocknetworkInterface struct {
	ctrl     *gomock.Controller
	recorder *MocknetworkInterfaceMockRecorder
}

// MocknetworkInterfaceMockRecorder is the mock recorder for MocknetworkInterface.
type MocknetworkInterfaceMockRecorder struct {
	mock *MocknetworkInterface
}

// NewMocknetworkInterface creates a new mock instance.
func NewMocknetworkInterface(ctrl *gomock.Controller) *MocknetworkInterface {
	mock := &MocknetworkInterface{ctrl: ctrl}
	mock.recorder = &MocknetworkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknetworkInterface) EXPECT() *MocknetworkInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MocknetworkInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MocknetworkInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MocknetworkInterface)(nil).Close))
}

// GetPeers mocks base method.
func (m *MocknetworkInterface) GetPeers() []p2p.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]p2p.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MocknetworkInterfaceMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MocknetworkInterface)(nil).GetPeers))
}

// PeerCount mocks base method.
func (m *MocknetworkInterface) PeerCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MocknetworkInterfaceMockRecorder) PeerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*MocknetworkInterface)(nil).PeerCount))
}

// Request mocks base method.
func (m *MocknetworkInterface) Request(arg0 context.Context, arg1 p2p.Peer, arg2 []byte, arg3 func([]byte), arg4 func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MocknetworkInterfaceMockRecorder) Request(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MocknetworkInterface)(nil).Request), arg0, arg1, arg2, arg3, arg4)
}
