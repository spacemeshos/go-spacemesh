// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	p2p "github.com/spacemeshos/go-spacemesh/p2p"
)

// Mockrequester is a mock of requester interface.
type Mockrequester struct {
	ctrl     *gomock.Controller
	recorder *MockrequesterMockRecorder
}

// MockrequesterMockRecorder is the mock recorder for Mockrequester.
type MockrequesterMockRecorder struct {
	mock *Mockrequester
}

// NewMockrequester creates a new mock instance.
func NewMockrequester(ctrl *gomock.Controller) *Mockrequester {
	mock := &Mockrequester{ctrl: ctrl}
	mock.recorder = &MockrequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrequester) EXPECT() *MockrequesterMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *Mockrequester) Request(arg0 context.Context, arg1 p2p.Peer, arg2 []byte, arg3 func([]byte), arg4 func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockrequesterMockRecorder) Request(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*Mockrequester)(nil).Request), arg0, arg1, arg2, arg3, arg4)
}

// MockMalfeasanceValidator is a mock of MalfeasanceValidator interface.
type MockMalfeasanceValidator struct {
	ctrl     *gomock.Controller
	recorder *MockMalfeasanceValidatorMockRecorder
}

// MockMalfeasanceValidatorMockRecorder is the mock recorder for MockMalfeasanceValidator.
type MockMalfeasanceValidatorMockRecorder struct {
	mock *MockMalfeasanceValidator
}

// NewMockMalfeasanceValidator creates a new mock instance.
func NewMockMalfeasanceValidator(ctrl *gomock.Controller) *MockMalfeasanceValidator {
	mock := &MockMalfeasanceValidator{ctrl: ctrl}
	mock.recorder = &MockMalfeasanceValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMalfeasanceValidator) EXPECT() *MockMalfeasanceValidatorMockRecorder {
	return m.recorder
}

// HandleSyncedMalfeasanceProof mocks base method.
func (m *MockMalfeasanceValidator) HandleSyncedMalfeasanceProof(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncedMalfeasanceProof", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncedMalfeasanceProof indicates an expected call of HandleSyncedMalfeasanceProof.
func (mr *MockMalfeasanceValidatorMockRecorder) HandleSyncedMalfeasanceProof(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncedMalfeasanceProof", reflect.TypeOf((*MockMalfeasanceValidator)(nil).HandleSyncedMalfeasanceProof), arg0, arg1, arg2)
}

// MockAtxValidator is a mock of AtxValidator interface.
type MockAtxValidator struct {
	ctrl     *gomock.Controller
	recorder *MockAtxValidatorMockRecorder
}

// MockAtxValidatorMockRecorder is the mock recorder for MockAtxValidator.
type MockAtxValidatorMockRecorder struct {
	mock *MockAtxValidator
}

// NewMockAtxValidator creates a new mock instance.
func NewMockAtxValidator(ctrl *gomock.Controller) *MockAtxValidator {
	mock := &MockAtxValidator{ctrl: ctrl}
	mock.recorder = &MockAtxValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtxValidator) EXPECT() *MockAtxValidatorMockRecorder {
	return m.recorder
}

// HandleAtxData mocks base method.
func (m *MockAtxValidator) HandleAtxData(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAtxData", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAtxData indicates an expected call of HandleAtxData.
func (mr *MockAtxValidatorMockRecorder) HandleAtxData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAtxData", reflect.TypeOf((*MockAtxValidator)(nil).HandleAtxData), arg0, arg1, arg2)
}

// MockBlockValidator is a mock of BlockValidator interface.
type MockBlockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockBlockValidatorMockRecorder
}

// MockBlockValidatorMockRecorder is the mock recorder for MockBlockValidator.
type MockBlockValidatorMockRecorder struct {
	mock *MockBlockValidator
}

// NewMockBlockValidator creates a new mock instance.
func NewMockBlockValidator(ctrl *gomock.Controller) *MockBlockValidator {
	mock := &MockBlockValidator{ctrl: ctrl}
	mock.recorder = &MockBlockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockValidator) EXPECT() *MockBlockValidatorMockRecorder {
	return m.recorder
}

// HandleSyncedBlock mocks base method.
func (m *MockBlockValidator) HandleSyncedBlock(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncedBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncedBlock indicates an expected call of HandleSyncedBlock.
func (mr *MockBlockValidatorMockRecorder) HandleSyncedBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncedBlock", reflect.TypeOf((*MockBlockValidator)(nil).HandleSyncedBlock), arg0, arg1, arg2)
}

// MockBallotValidator is a mock of BallotValidator interface.
type MockBallotValidator struct {
	ctrl     *gomock.Controller
	recorder *MockBallotValidatorMockRecorder
}

// MockBallotValidatorMockRecorder is the mock recorder for MockBallotValidator.
type MockBallotValidatorMockRecorder struct {
	mock *MockBallotValidator
}

// NewMockBallotValidator creates a new mock instance.
func NewMockBallotValidator(ctrl *gomock.Controller) *MockBallotValidator {
	mock := &MockBallotValidator{ctrl: ctrl}
	mock.recorder = &MockBallotValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBallotValidator) EXPECT() *MockBallotValidatorMockRecorder {
	return m.recorder
}

// HandleSyncedBallot mocks base method.
func (m *MockBallotValidator) HandleSyncedBallot(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncedBallot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncedBallot indicates an expected call of HandleSyncedBallot.
func (mr *MockBallotValidatorMockRecorder) HandleSyncedBallot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncedBallot", reflect.TypeOf((*MockBallotValidator)(nil).HandleSyncedBallot), arg0, arg1, arg2)
}

// MockProposalValidator is a mock of ProposalValidator interface.
type MockProposalValidator struct {
	ctrl     *gomock.Controller
	recorder *MockProposalValidatorMockRecorder
}

// MockProposalValidatorMockRecorder is the mock recorder for MockProposalValidator.
type MockProposalValidatorMockRecorder struct {
	mock *MockProposalValidator
}

// NewMockProposalValidator creates a new mock instance.
func NewMockProposalValidator(ctrl *gomock.Controller) *MockProposalValidator {
	mock := &MockProposalValidator{ctrl: ctrl}
	mock.recorder = &MockProposalValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProposalValidator) EXPECT() *MockProposalValidatorMockRecorder {
	return m.recorder
}

// HandleSyncedProposal mocks base method.
func (m *MockProposalValidator) HandleSyncedProposal(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSyncedProposal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSyncedProposal indicates an expected call of HandleSyncedProposal.
func (mr *MockProposalValidatorMockRecorder) HandleSyncedProposal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSyncedProposal", reflect.TypeOf((*MockProposalValidator)(nil).HandleSyncedProposal), arg0, arg1, arg2)
}

// MockTxValidator is a mock of TxValidator interface.
type MockTxValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTxValidatorMockRecorder
}

// MockTxValidatorMockRecorder is the mock recorder for MockTxValidator.
type MockTxValidatorMockRecorder struct {
	mock *MockTxValidator
}

// NewMockTxValidator creates a new mock instance.
func NewMockTxValidator(ctrl *gomock.Controller) *MockTxValidator {
	mock := &MockTxValidator{ctrl: ctrl}
	mock.recorder = &MockTxValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxValidator) EXPECT() *MockTxValidatorMockRecorder {
	return m.recorder
}

// HandleBlockTransaction mocks base method.
func (m *MockTxValidator) HandleBlockTransaction(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBlockTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBlockTransaction indicates an expected call of HandleBlockTransaction.
func (mr *MockTxValidatorMockRecorder) HandleBlockTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockTransaction", reflect.TypeOf((*MockTxValidator)(nil).HandleBlockTransaction), arg0, arg1, arg2)
}

// HandleProposalTransaction mocks base method.
func (m *MockTxValidator) HandleProposalTransaction(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleProposalTransaction", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleProposalTransaction indicates an expected call of HandleProposalTransaction.
func (mr *MockTxValidatorMockRecorder) HandleProposalTransaction(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleProposalTransaction", reflect.TypeOf((*MockTxValidator)(nil).HandleProposalTransaction), arg0, arg1, arg2)
}

// MockPoetValidator is a mock of PoetValidator interface.
type MockPoetValidator struct {
	ctrl     *gomock.Controller
	recorder *MockPoetValidatorMockRecorder
}

// MockPoetValidatorMockRecorder is the mock recorder for MockPoetValidator.
type MockPoetValidatorMockRecorder struct {
	mock *MockPoetValidator
}

// NewMockPoetValidator creates a new mock instance.
func NewMockPoetValidator(ctrl *gomock.Controller) *MockPoetValidator {
	mock := &MockPoetValidator{ctrl: ctrl}
	mock.recorder = &MockPoetValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoetValidator) EXPECT() *MockPoetValidatorMockRecorder {
	return m.recorder
}

// ValidateAndStoreMsg mocks base method.
func (m *MockPoetValidator) ValidateAndStoreMsg(arg0 context.Context, arg1 p2p.Peer, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndStoreMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndStoreMsg indicates an expected call of ValidateAndStoreMsg.
func (mr *MockPoetValidatorMockRecorder) ValidateAndStoreMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndStoreMsg", reflect.TypeOf((*MockPoetValidator)(nil).ValidateAndStoreMsg), arg0, arg1, arg2)
}

// MockmeshProvider is a mock of meshProvider interface.
type MockmeshProvider struct {
	ctrl     *gomock.Controller
	recorder *MockmeshProviderMockRecorder
}

// MockmeshProviderMockRecorder is the mock recorder for MockmeshProvider.
type MockmeshProviderMockRecorder struct {
	mock *MockmeshProvider
}

// NewMockmeshProvider creates a new mock instance.
func NewMockmeshProvider(ctrl *gomock.Controller) *MockmeshProvider {
	mock := &MockmeshProvider{ctrl: ctrl}
	mock.recorder = &MockmeshProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmeshProvider) EXPECT() *MockmeshProviderMockRecorder {
	return m.recorder
}

// LastVerified mocks base method.
func (m *MockmeshProvider) LastVerified() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastVerified")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// LastVerified indicates an expected call of LastVerified.
func (mr *MockmeshProviderMockRecorder) LastVerified() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastVerified", reflect.TypeOf((*MockmeshProvider)(nil).LastVerified))
}

// Mockhost is a mock of host interface.
type Mockhost struct {
	ctrl     *gomock.Controller
	recorder *MockhostMockRecorder
}

// MockhostMockRecorder is the mock recorder for Mockhost.
type MockhostMockRecorder struct {
	mock *Mockhost
}

// NewMockhost creates a new mock instance.
func NewMockhost(ctrl *gomock.Controller) *Mockhost {
	mock := &Mockhost{ctrl: ctrl}
	mock.recorder = &MockhostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockhost) EXPECT() *MockhostMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockhost) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockhostMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockhost)(nil).Close))
}

// GetPeers mocks base method.
func (m *Mockhost) GetPeers() []p2p.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]p2p.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockhostMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*Mockhost)(nil).GetPeers))
}
