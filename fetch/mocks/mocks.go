// Code generated by MockGen. DO NOT EDIT.
// Source: ./fetch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	database "github.com/spacemeshos/go-spacemesh/database"
	fetch "github.com/spacemeshos/go-spacemesh/fetch"
	p2pcrypto "github.com/spacemeshos/go-spacemesh/p2p/p2pcrypto"
	peers "github.com/spacemeshos/go-spacemesh/p2p/peers"
	server "github.com/spacemeshos/go-spacemesh/p2p/server"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// AddDB mocks base method.
func (m *MockFetcher) AddDB(hint fetch.Hint, db database.Getter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDB", hint, db)
}

// AddDB indicates an expected call of AddDB.
func (mr *MockFetcherMockRecorder) AddDB(hint, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDB", reflect.TypeOf((*MockFetcher)(nil).AddDB), hint, db)
}

// GetHash mocks base method.
func (m *MockFetcher) GetHash(hash types.Hash32, h fetch.Hint, validateHash bool) chan fetch.HashDataPromiseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", hash, h, validateHash)
	ret0, _ := ret[0].(chan fetch.HashDataPromiseResult)
	return ret0
}

// GetHash indicates an expected call of GetHash.
func (mr *MockFetcherMockRecorder) GetHash(hash, h, validateHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockFetcher)(nil).GetHash), hash, h, validateHash)
}

// GetHashes mocks base method.
func (m *MockFetcher) GetHashes(hash []types.Hash32, hint fetch.Hint, validateHash bool) map[types.Hash32]chan fetch.HashDataPromiseResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashes", hash, hint, validateHash)
	ret0, _ := ret[0].(map[types.Hash32]chan fetch.HashDataPromiseResult)
	return ret0
}

// GetHashes indicates an expected call of GetHashes.
func (mr *MockFetcherMockRecorder) GetHashes(hash, hint, validateHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashes", reflect.TypeOf((*MockFetcher)(nil).GetHashes), hash, hint, validateHash)
}

// Start mocks base method.
func (m *MockFetcher) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockFetcherMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockFetcher)(nil).Start))
}

// Stop mocks base method.
func (m *MockFetcher) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockFetcherMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockFetcher)(nil).Stop))
}

// MockpeersProvider is a mock of peersProvider interface.
type MockpeersProvider struct {
	ctrl     *gomock.Controller
	recorder *MockpeersProviderMockRecorder
}

// MockpeersProviderMockRecorder is the mock recorder for MockpeersProvider.
type MockpeersProviderMockRecorder struct {
	mock *MockpeersProvider
}

// NewMockpeersProvider creates a new mock instance.
func NewMockpeersProvider(ctrl *gomock.Controller) *MockpeersProvider {
	mock := &MockpeersProvider{ctrl: ctrl}
	mock.recorder = &MockpeersProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpeersProvider) EXPECT() *MockpeersProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockpeersProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockpeersProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockpeersProvider)(nil).Close))
}

// GetPeers mocks base method.
func (m *MockpeersProvider) GetPeers() []peers.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]peers.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockpeersProviderMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockpeersProvider)(nil).GetPeers))
}

// PeerCount mocks base method.
func (m *MockpeersProvider) PeerCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MockpeersProviderMockRecorder) PeerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*MockpeersProvider)(nil).PeerCount))
}

// Mocknetwork is a mock of network interface.
type Mocknetwork struct {
	ctrl     *gomock.Controller
	recorder *MocknetworkMockRecorder
}

// MocknetworkMockRecorder is the mock recorder for Mocknetwork.
type MocknetworkMockRecorder struct {
	mock *Mocknetwork
}

// NewMocknetwork creates a new mock instance.
func NewMocknetwork(ctrl *gomock.Controller) *Mocknetwork {
	mock := &Mocknetwork{ctrl: ctrl}
	mock.recorder = &MocknetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknetwork) EXPECT() *MocknetworkMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mocknetwork) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MocknetworkMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mocknetwork)(nil).Close))
}

// GetPeers mocks base method.
func (m *Mocknetwork) GetPeers() []peers.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]peers.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MocknetworkMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*Mocknetwork)(nil).GetPeers))
}

// PeerCount mocks base method.
func (m *Mocknetwork) PeerCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MocknetworkMockRecorder) PeerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*Mocknetwork)(nil).PeerCount))
}

// RegisterBytesMsgHandler mocks base method.
func (m *Mocknetwork) RegisterBytesMsgHandler(msgType server.MessageType, reqHandler func(context.Context, []byte) ([]byte, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterBytesMsgHandler", msgType, reqHandler)
}

// RegisterBytesMsgHandler indicates an expected call of RegisterBytesMsgHandler.
func (mr *MocknetworkMockRecorder) RegisterBytesMsgHandler(msgType, reqHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBytesMsgHandler", reflect.TypeOf((*Mocknetwork)(nil).RegisterBytesMsgHandler), msgType, reqHandler)
}

// SendRequest mocks base method.
func (m *Mocknetwork) SendRequest(ctx context.Context, msgType server.MessageType, payload []byte, address p2pcrypto.PublicKey, resHandler func([]byte), failHandler func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, msgType, payload, address, resHandler, failHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MocknetworkMockRecorder) SendRequest(ctx, msgType, payload, address, resHandler, failHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*Mocknetwork)(nil).SendRequest), ctx, msgType, payload, address, resHandler, failHandler)
}
