// Code generated by MockGen. DO NOT EDIT.
// Source: ./layers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	p2pcrypto "github.com/spacemeshos/go-spacemesh/p2p/p2pcrypto"
	peers "github.com/spacemeshos/go-spacemesh/p2p/peers"
	server "github.com/spacemeshos/go-spacemesh/p2p/server"
	service "github.com/spacemeshos/go-spacemesh/p2p/service"
)

// MockatxHandler is a mock of atxHandler interface.
type MockatxHandler struct {
	ctrl     *gomock.Controller
	recorder *MockatxHandlerMockRecorder
}

// MockatxHandlerMockRecorder is the mock recorder for MockatxHandler.
type MockatxHandlerMockRecorder struct {
	mock *MockatxHandler
}

// NewMockatxHandler creates a new mock instance.
func NewMockatxHandler(ctrl *gomock.Controller) *MockatxHandler {
	mock := &MockatxHandler{ctrl: ctrl}
	mock.recorder = &MockatxHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockatxHandler) EXPECT() *MockatxHandlerMockRecorder {
	return m.recorder
}

// HandleAtxData mocks base method.
func (m *MockatxHandler) HandleAtxData(ctx context.Context, data []byte, syncer service.Fetcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAtxData", ctx, data, syncer)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleAtxData indicates an expected call of HandleAtxData.
func (mr *MockatxHandlerMockRecorder) HandleAtxData(ctx, data, syncer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAtxData", reflect.TypeOf((*MockatxHandler)(nil).HandleAtxData), ctx, data, syncer)
}

// MockblockHandler is a mock of blockHandler interface.
type MockblockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockblockHandlerMockRecorder
}

// MockblockHandlerMockRecorder is the mock recorder for MockblockHandler.
type MockblockHandlerMockRecorder struct {
	mock *MockblockHandler
}

// NewMockblockHandler creates a new mock instance.
func NewMockblockHandler(ctrl *gomock.Controller) *MockblockHandler {
	mock := &MockblockHandler{ctrl: ctrl}
	mock.recorder = &MockblockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblockHandler) EXPECT() *MockblockHandlerMockRecorder {
	return m.recorder
}

// HandleBlockData mocks base method.
func (m *MockblockHandler) HandleBlockData(ctx context.Context, date []byte, fetcher service.Fetcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleBlockData", ctx, date, fetcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleBlockData indicates an expected call of HandleBlockData.
func (mr *MockblockHandlerMockRecorder) HandleBlockData(ctx, date, fetcher interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleBlockData", reflect.TypeOf((*MockblockHandler)(nil).HandleBlockData), ctx, date, fetcher)
}

// MockTxProcessor is a mock of TxProcessor interface.
type MockTxProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockTxProcessorMockRecorder
}

// MockTxProcessorMockRecorder is the mock recorder for MockTxProcessor.
type MockTxProcessorMockRecorder struct {
	mock *MockTxProcessor
}

// NewMockTxProcessor creates a new mock instance.
func NewMockTxProcessor(ctrl *gomock.Controller) *MockTxProcessor {
	mock := &MockTxProcessor{ctrl: ctrl}
	mock.recorder = &MockTxProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxProcessor) EXPECT() *MockTxProcessorMockRecorder {
	return m.recorder
}

// HandleTxSyncData mocks base method.
func (m *MockTxProcessor) HandleTxSyncData(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTxSyncData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTxSyncData indicates an expected call of HandleTxSyncData.
func (mr *MockTxProcessorMockRecorder) HandleTxSyncData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTxSyncData", reflect.TypeOf((*MockTxProcessor)(nil).HandleTxSyncData), data)
}

// MocklayerDB is a mock of layerDB interface.
type MocklayerDB struct {
	ctrl     *gomock.Controller
	recorder *MocklayerDBMockRecorder
}

// MocklayerDBMockRecorder is the mock recorder for MocklayerDB.
type MocklayerDBMockRecorder struct {
	mock *MocklayerDB
}

// NewMocklayerDB creates a new mock instance.
func NewMocklayerDB(ctrl *gomock.Controller) *MocklayerDB {
	mock := &MocklayerDB{ctrl: ctrl}
	mock.recorder = &MocklayerDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklayerDB) EXPECT() *MocklayerDBMockRecorder {
	return m.recorder
}

// GetAggregatedLayerHash mocks base method.
func (m *MocklayerDB) GetAggregatedLayerHash(arg0 types.LayerID) types.Hash32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAggregatedLayerHash", arg0)
	ret0, _ := ret[0].(types.Hash32)
	return ret0
}

// GetAggregatedLayerHash indicates an expected call of GetAggregatedLayerHash.
func (mr *MocklayerDBMockRecorder) GetAggregatedLayerHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAggregatedLayerHash", reflect.TypeOf((*MocklayerDB)(nil).GetAggregatedLayerHash), arg0)
}

// GetLayerHash mocks base method.
func (m *MocklayerDB) GetLayerHash(arg0 types.LayerID) types.Hash32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerHash", arg0)
	ret0, _ := ret[0].(types.Hash32)
	return ret0
}

// GetLayerHash indicates an expected call of GetLayerHash.
func (mr *MocklayerDBMockRecorder) GetLayerHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerHash", reflect.TypeOf((*MocklayerDB)(nil).GetLayerHash), arg0)
}

// GetLayerInputVectorByID mocks base method.
func (m *MocklayerDB) GetLayerInputVectorByID(arg0 types.LayerID) ([]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerInputVectorByID", arg0)
	ret0, _ := ret[0].([]types.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerInputVectorByID indicates an expected call of GetLayerInputVectorByID.
func (mr *MocklayerDBMockRecorder) GetLayerInputVectorByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerInputVectorByID", reflect.TypeOf((*MocklayerDB)(nil).GetLayerInputVectorByID), arg0)
}

// LayerBlockIds mocks base method.
func (m *MocklayerDB) LayerBlockIds(arg0 types.LayerID) ([]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerBlockIds", arg0)
	ret0, _ := ret[0].([]types.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerBlockIds indicates an expected call of LayerBlockIds.
func (mr *MocklayerDBMockRecorder) LayerBlockIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerBlockIds", reflect.TypeOf((*MocklayerDB)(nil).LayerBlockIds), arg0)
}

// ProcessedLayer mocks base method.
func (m *MocklayerDB) ProcessedLayer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedLayer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// ProcessedLayer indicates an expected call of ProcessedLayer.
func (mr *MocklayerDBMockRecorder) ProcessedLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedLayer", reflect.TypeOf((*MocklayerDB)(nil).ProcessedLayer))
}

// SaveLayerInputVectorByID mocks base method.
func (m *MocklayerDB) SaveLayerInputVectorByID(arg0 context.Context, arg1 types.LayerID, arg2 []types.BlockID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLayerInputVectorByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLayerInputVectorByID indicates an expected call of SaveLayerInputVectorByID.
func (mr *MocklayerDBMockRecorder) SaveLayerInputVectorByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLayerInputVectorByID", reflect.TypeOf((*MocklayerDB)(nil).SaveLayerInputVectorByID), arg0, arg1, arg2)
}

// SetZeroBlockLayer mocks base method.
func (m *MocklayerDB) SetZeroBlockLayer(arg0 types.LayerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetZeroBlockLayer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetZeroBlockLayer indicates an expected call of SetZeroBlockLayer.
func (mr *MocklayerDBMockRecorder) SetZeroBlockLayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetZeroBlockLayer", reflect.TypeOf((*MocklayerDB)(nil).SetZeroBlockLayer), arg0)
}

// MockatxIDsDB is a mock of atxIDsDB interface.
type MockatxIDsDB struct {
	ctrl     *gomock.Controller
	recorder *MockatxIDsDBMockRecorder
}

// MockatxIDsDBMockRecorder is the mock recorder for MockatxIDsDB.
type MockatxIDsDBMockRecorder struct {
	mock *MockatxIDsDB
}

// NewMockatxIDsDB creates a new mock instance.
func NewMockatxIDsDB(ctrl *gomock.Controller) *MockatxIDsDB {
	mock := &MockatxIDsDB{ctrl: ctrl}
	mock.recorder = &MockatxIDsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockatxIDsDB) EXPECT() *MockatxIDsDBMockRecorder {
	return m.recorder
}

// GetEpochAtxs mocks base method.
func (m *MockatxIDsDB) GetEpochAtxs(epochID types.EpochID) ([]types.ATXID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpochAtxs", epochID)
	ret0, _ := ret[0].([]types.ATXID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEpochAtxs indicates an expected call of GetEpochAtxs.
func (mr *MockatxIDsDBMockRecorder) GetEpochAtxs(epochID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpochAtxs", reflect.TypeOf((*MockatxIDsDB)(nil).GetEpochAtxs), epochID)
}

// MockpoetDB is a mock of poetDB interface.
type MockpoetDB struct {
	ctrl     *gomock.Controller
	recorder *MockpoetDBMockRecorder
}

// MockpoetDBMockRecorder is the mock recorder for MockpoetDB.
type MockpoetDBMockRecorder struct {
	mock *MockpoetDB
}

// NewMockpoetDB creates a new mock instance.
func NewMockpoetDB(ctrl *gomock.Controller) *MockpoetDB {
	mock := &MockpoetDB{ctrl: ctrl}
	mock.recorder = &MockpoetDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpoetDB) EXPECT() *MockpoetDBMockRecorder {
	return m.recorder
}

// HasProof mocks base method.
func (m *MockpoetDB) HasProof(proofRef []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProof", proofRef)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasProof indicates an expected call of HasProof.
func (mr *MockpoetDBMockRecorder) HasProof(proofRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProof", reflect.TypeOf((*MockpoetDB)(nil).HasProof), proofRef)
}

// ValidateAndStore mocks base method.
func (m *MockpoetDB) ValidateAndStore(proofMessage *types.PoetProofMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndStore", proofMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndStore indicates an expected call of ValidateAndStore.
func (mr *MockpoetDBMockRecorder) ValidateAndStore(proofMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndStore", reflect.TypeOf((*MockpoetDB)(nil).ValidateAndStore), proofMessage)
}

// ValidateAndStoreMsg mocks base method.
func (m *MockpoetDB) ValidateAndStoreMsg(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndStoreMsg", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateAndStoreMsg indicates an expected call of ValidateAndStoreMsg.
func (mr *MockpoetDBMockRecorder) ValidateAndStoreMsg(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndStoreMsg", reflect.TypeOf((*MockpoetDB)(nil).ValidateAndStoreMsg), data)
}

// Mocknetwork is a mock of network interface.
type Mocknetwork struct {
	ctrl     *gomock.Controller
	recorder *MocknetworkMockRecorder
}

// MocknetworkMockRecorder is the mock recorder for Mocknetwork.
type MocknetworkMockRecorder struct {
	mock *Mocknetwork
}

// NewMocknetwork creates a new mock instance.
func NewMocknetwork(ctrl *gomock.Controller) *Mocknetwork {
	mock := &Mocknetwork{ctrl: ctrl}
	mock.recorder = &MocknetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknetwork) EXPECT() *MocknetworkMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mocknetwork) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MocknetworkMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mocknetwork)(nil).Close))
}

// GetPeers mocks base method.
func (m *Mocknetwork) GetPeers() []peers.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]peers.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MocknetworkMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*Mocknetwork)(nil).GetPeers))
}

// PeerCount mocks base method.
func (m *Mocknetwork) PeerCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MocknetworkMockRecorder) PeerCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*Mocknetwork)(nil).PeerCount))
}

// SendRequest mocks base method.
func (m *Mocknetwork) SendRequest(ctx context.Context, msgType server.MessageType, payload []byte, address p2pcrypto.PublicKey, resHandler func([]byte), errorHandler func(error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequest", ctx, msgType, payload, address, resHandler, errorHandler)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendRequest indicates an expected call of SendRequest.
func (mr *MocknetworkMockRecorder) SendRequest(ctx, msgType, payload, address, resHandler, errorHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequest", reflect.TypeOf((*Mocknetwork)(nil).SendRequest), ctx, msgType, payload, address, resHandler, errorHandler)
}
