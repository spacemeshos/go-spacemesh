// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -typed -package=migrations -destination=./mocks.go -source=interfaces.go
//

// Package migrations is a generated GoMock package.
package migrations

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	wire "github.com/spacemeshos/go-spacemesh/malfeasance/wire"
	gomock "go.uber.org/mock/gomock"
)

// MockmalfeasanceValidator is a mock of malfeasanceValidator interface.
type MockmalfeasanceValidator struct {
	ctrl     *gomock.Controller
	recorder *MockmalfeasanceValidatorMockRecorder
}

// MockmalfeasanceValidatorMockRecorder is the mock recorder for MockmalfeasanceValidator.
type MockmalfeasanceValidatorMockRecorder struct {
	mock *MockmalfeasanceValidator
}

// NewMockmalfeasanceValidator creates a new mock instance.
func NewMockmalfeasanceValidator(ctrl *gomock.Controller) *MockmalfeasanceValidator {
	mock := &MockmalfeasanceValidator{ctrl: ctrl}
	mock.recorder = &MockmalfeasanceValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmalfeasanceValidator) EXPECT() *MockmalfeasanceValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockmalfeasanceValidator) Validate(ctx context.Context, proof *wire.MalfeasanceProof) (types.NodeID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, proof)
	ret0, _ := ret[0].(types.NodeID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockmalfeasanceValidatorMockRecorder) Validate(ctx, proof any) *MockmalfeasanceValidatorValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockmalfeasanceValidator)(nil).Validate), ctx, proof)
	return &MockmalfeasanceValidatorValidateCall{Call: call}
}

// MockmalfeasanceValidatorValidateCall wrap *gomock.Call
type MockmalfeasanceValidatorValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockmalfeasanceValidatorValidateCall) Return(arg0 types.NodeID, arg1 error) *MockmalfeasanceValidatorValidateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockmalfeasanceValidatorValidateCall) Do(f func(context.Context, *wire.MalfeasanceProof) (types.NodeID, error)) *MockmalfeasanceValidatorValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockmalfeasanceValidatorValidateCall) DoAndReturn(f func(context.Context, *wire.MalfeasanceProof) (types.NodeID, error)) *MockmalfeasanceValidatorValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
