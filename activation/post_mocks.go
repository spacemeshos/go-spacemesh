// Code generated by MockGen. DO NOT EDIT.
// Source: ./post.go

// Package activation is a generated GoMock package.
package activation

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/activation/types"
	types0 "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockPostSetupProvider is a mock of PostSetupProvider interface.
type MockPostSetupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPostSetupProviderMockRecorder
}

// MockPostSetupProviderMockRecorder is the mock recorder for MockPostSetupProvider.
type MockPostSetupProviderMockRecorder struct {
	mock *MockPostSetupProvider
}

// NewMockPostSetupProvider creates a new mock instance.
func NewMockPostSetupProvider(ctrl *gomock.Controller) *MockPostSetupProvider {
	mock := &MockPostSetupProvider{ctrl: ctrl}
	mock.recorder = &MockPostSetupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostSetupProvider) EXPECT() *MockPostSetupProviderMockRecorder {
	return m.recorder
}

// Benchmark mocks base method.
func (m *MockPostSetupProvider) Benchmark(p types.PostSetupComputeProvider) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Benchmark", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Benchmark indicates an expected call of Benchmark.
func (mr *MockPostSetupProviderMockRecorder) Benchmark(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Benchmark", reflect.TypeOf((*MockPostSetupProvider)(nil).Benchmark), p)
}

// ComputeProviders mocks base method.
func (m *MockPostSetupProvider) ComputeProviders() []types.PostSetupComputeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeProviders")
	ret0, _ := ret[0].([]types.PostSetupComputeProvider)
	return ret0
}

// ComputeProviders indicates an expected call of ComputeProviders.
func (mr *MockPostSetupProviderMockRecorder) ComputeProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeProviders", reflect.TypeOf((*MockPostSetupProvider)(nil).ComputeProviders))
}

// Config mocks base method.
func (m *MockPostSetupProvider) Config() types.PostConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(types.PostConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockPostSetupProviderMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPostSetupProvider)(nil).Config))
}

// GenerateProof mocks base method.
func (m *MockPostSetupProvider) GenerateProof(challenge []byte, commitmentAtx types0.ATXID) (*types0.Post, *types0.PostMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateProof", challenge, commitmentAtx)
	ret0, _ := ret[0].(*types0.Post)
	ret1, _ := ret[1].(*types0.PostMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateProof indicates an expected call of GenerateProof.
func (mr *MockPostSetupProviderMockRecorder) GenerateProof(challenge, commitmentAtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateProof", reflect.TypeOf((*MockPostSetupProvider)(nil).GenerateProof), challenge, commitmentAtx)
}

// LastError mocks base method.
func (m *MockPostSetupProvider) LastError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastError")
	ret0, _ := ret[0].(error)
	return ret0
}

// LastError indicates an expected call of LastError.
func (mr *MockPostSetupProviderMockRecorder) LastError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastError", reflect.TypeOf((*MockPostSetupProvider)(nil).LastError))
}

// LastOpts mocks base method.
func (m *MockPostSetupProvider) LastOpts() *types.PostSetupOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastOpts")
	ret0, _ := ret[0].(*types.PostSetupOpts)
	return ret0
}

// LastOpts indicates an expected call of LastOpts.
func (mr *MockPostSetupProviderMockRecorder) LastOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastOpts", reflect.TypeOf((*MockPostSetupProvider)(nil).LastOpts))
}

// StartSession mocks base method.
func (m *MockPostSetupProvider) StartSession(opts types.PostSetupOpts, commitmentAtx types0.ATXID) (chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", opts, commitmentAtx)
	ret0, _ := ret[0].(chan struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession.
func (mr *MockPostSetupProviderMockRecorder) StartSession(opts, commitmentAtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockPostSetupProvider)(nil).StartSession), opts, commitmentAtx)
}

// Status mocks base method.
func (m *MockPostSetupProvider) Status() *types.PostSetupStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*types.PostSetupStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockPostSetupProviderMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPostSetupProvider)(nil).Status))
}

// StopSession mocks base method.
func (m *MockPostSetupProvider) StopSession(deleteFiles bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSession", deleteFiles)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSession indicates an expected call of StopSession.
func (mr *MockPostSetupProviderMockRecorder) StopSession(deleteFiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSession", reflect.TypeOf((*MockPostSetupProvider)(nil).StopSession), deleteFiles)
}
