// Code generated by MockGen. DO NOT EDIT.
// Source: post_verifier.go
//
// Generated by this command:
//
//	mockgen -typed -source=post_verifier.go -destination=mocks/subscription.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockpostStatesGetter is a mock of postStatesGetter interface.
type MockpostStatesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockpostStatesGetterMockRecorder
}

// MockpostStatesGetterMockRecorder is the mock recorder for MockpostStatesGetter.
type MockpostStatesGetterMockRecorder struct {
	mock *MockpostStatesGetter
}

// NewMockpostStatesGetter creates a new mock instance.
func NewMockpostStatesGetter(ctrl *gomock.Controller) *MockpostStatesGetter {
	mock := &MockpostStatesGetter{ctrl: ctrl}
	mock.recorder = &MockpostStatesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostStatesGetter) EXPECT() *MockpostStatesGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockpostStatesGetter) Get() map[types.NodeID]types.PostState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(map[types.NodeID]types.PostState)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockpostStatesGetterMockRecorder) Get() *MockpostStatesGetterGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockpostStatesGetter)(nil).Get))
	return &MockpostStatesGetterGetCall{Call: call}
}

// MockpostStatesGetterGetCall wrap *gomock.Call
type MockpostStatesGetterGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockpostStatesGetterGetCall) Return(arg0 map[types.NodeID]types.PostState) *MockpostStatesGetterGetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockpostStatesGetterGetCall) Do(f func() map[types.NodeID]types.PostState) *MockpostStatesGetterGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockpostStatesGetterGetCall) DoAndReturn(f func() map[types.NodeID]types.PostState) *MockpostStatesGetterGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mocksubscription is a mock of subscription interface.
type Mocksubscription[T any] struct {
	ctrl     *gomock.Controller
	recorder *MocksubscriptionMockRecorder[T]
}

// MocksubscriptionMockRecorder is the mock recorder for Mocksubscription.
type MocksubscriptionMockRecorder[T any] struct {
	mock *Mocksubscription[T]
}

// NewMocksubscription creates a new mock instance.
func NewMocksubscription[T any](ctrl *gomock.Controller) *Mocksubscription[T] {
	mock := &Mocksubscription[T]{ctrl: ctrl}
	mock.recorder = &MocksubscriptionMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksubscription[T]) EXPECT() *MocksubscriptionMockRecorder[T] {
	return m.recorder
}

// Close mocks base method.
func (m *Mocksubscription[T]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MocksubscriptionMockRecorder[T]) Close() *MocksubscriptionCloseCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mocksubscription[T])(nil).Close))
	return &MocksubscriptionCloseCall[T]{Call: call}
}

// MocksubscriptionCloseCall wrap *gomock.Call
type MocksubscriptionCloseCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksubscriptionCloseCall[T]) Return() *MocksubscriptionCloseCall[T] {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksubscriptionCloseCall[T]) Do(f func()) *MocksubscriptionCloseCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksubscriptionCloseCall[T]) DoAndReturn(f func()) *MocksubscriptionCloseCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Full mocks base method.
func (m *Mocksubscription[T]) Full() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Full indicates an expected call of Full.
func (mr *MocksubscriptionMockRecorder[T]) Full() *MocksubscriptionFullCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*Mocksubscription[T])(nil).Full))
	return &MocksubscriptionFullCall[T]{Call: call}
}

// MocksubscriptionFullCall wrap *gomock.Call
type MocksubscriptionFullCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksubscriptionFullCall[T]) Return(arg0 <-chan struct{}) *MocksubscriptionFullCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksubscriptionFullCall[T]) Do(f func() <-chan struct{}) *MocksubscriptionFullCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksubscriptionFullCall[T]) DoAndReturn(f func() <-chan struct{}) *MocksubscriptionFullCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Out mocks base method.
func (m *Mocksubscription[T]) Out() <-chan T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Out")
	ret0, _ := ret[0].(<-chan T)
	return ret0
}

// Out indicates an expected call of Out.
func (mr *MocksubscriptionMockRecorder[T]) Out() *MocksubscriptionOutCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Out", reflect.TypeOf((*Mocksubscription[T])(nil).Out))
	return &MocksubscriptionOutCall[T]{Call: call}
}

// MocksubscriptionOutCall wrap *gomock.Call
type MocksubscriptionOutCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksubscriptionOutCall[T]) Return(arg0 <-chan T) *MocksubscriptionOutCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksubscriptionOutCall[T]) Do(f func() <-chan T) *MocksubscriptionOutCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksubscriptionOutCall[T]) DoAndReturn(f func() <-chan T) *MocksubscriptionOutCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
