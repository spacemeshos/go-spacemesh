// Code generated by MockGen. DO NOT EDIT.
// Source: ./nipost.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockPoetProvingServiceClient is a mock of PoetProvingServiceClient interface.
type MockPoetProvingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoetProvingServiceClientMockRecorder
}

// MockPoetProvingServiceClientMockRecorder is the mock recorder for MockPoetProvingServiceClient.
type MockPoetProvingServiceClientMockRecorder struct {
	mock *MockPoetProvingServiceClient
}

// NewMockPoetProvingServiceClient creates a new mock instance.
func NewMockPoetProvingServiceClient(ctrl *gomock.Controller) *MockPoetProvingServiceClient {
	mock := &MockPoetProvingServiceClient{ctrl: ctrl}
	mock.recorder = &MockPoetProvingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoetProvingServiceClient) EXPECT() *MockPoetProvingServiceClientMockRecorder {
	return m.recorder
}

// PoetServiceID mocks base method.
func (m *MockPoetProvingServiceClient) PoetServiceID(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PoetServiceID", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PoetServiceID indicates an expected call of PoetServiceID.
func (mr *MockPoetProvingServiceClientMockRecorder) PoetServiceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PoetServiceID", reflect.TypeOf((*MockPoetProvingServiceClient)(nil).PoetServiceID), arg0)
}

// Submit mocks base method.
func (m *MockPoetProvingServiceClient) Submit(ctx context.Context, challenge, signature []byte) (*types.PoetRound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, challenge, signature)
	ret0, _ := ret[0].(*types.PoetRound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockPoetProvingServiceClientMockRecorder) Submit(ctx, challenge, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockPoetProvingServiceClient)(nil).Submit), ctx, challenge, signature)
}

// MockpoetDbAPI is a mock of poetDbAPI interface.
type MockpoetDbAPI struct {
	ctrl     *gomock.Controller
	recorder *MockpoetDbAPIMockRecorder
}

// MockpoetDbAPIMockRecorder is the mock recorder for MockpoetDbAPI.
type MockpoetDbAPIMockRecorder struct {
	mock *MockpoetDbAPI
}

// NewMockpoetDbAPI creates a new mock instance.
func NewMockpoetDbAPI(ctrl *gomock.Controller) *MockpoetDbAPI {
	mock := &MockpoetDbAPI{ctrl: ctrl}
	mock.recorder = &MockpoetDbAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpoetDbAPI) EXPECT() *MockpoetDbAPIMockRecorder {
	return m.recorder
}

// GetMembershipMap mocks base method.
func (m *MockpoetDbAPI) GetMembershipMap(proofRef types.PoetProofRef) (map[types.Hash32]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembershipMap", proofRef)
	ret0, _ := ret[0].(map[types.Hash32]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembershipMap indicates an expected call of GetMembershipMap.
func (mr *MockpoetDbAPIMockRecorder) GetMembershipMap(proofRef interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembershipMap", reflect.TypeOf((*MockpoetDbAPI)(nil).GetMembershipMap), proofRef)
}

// GetProof mocks base method.
func (m *MockpoetDbAPI) GetProof(arg0 types.PoetProofRef) (*types.PoetProof, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProof", arg0)
	ret0, _ := ret[0].(*types.PoetProof)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProof indicates an expected call of GetProof.
func (mr *MockpoetDbAPIMockRecorder) GetProof(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProof", reflect.TypeOf((*MockpoetDbAPI)(nil).GetProof), arg0)
}

// GetProofRef mocks base method.
func (m *MockpoetDbAPI) GetProofRef(poetID []byte, roundID string) (types.PoetProofRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofRef", poetID, roundID)
	ret0, _ := ret[0].(types.PoetProofRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofRef indicates an expected call of GetProofRef.
func (mr *MockpoetDbAPIMockRecorder) GetProofRef(poetID, roundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofRef", reflect.TypeOf((*MockpoetDbAPI)(nil).GetProofRef), poetID, roundID)
}
