// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockpoetValidatorPersistor is a mock of poetValidatorPersistor interface.
type MockpoetValidatorPersistor struct {
	ctrl     *gomock.Controller
	recorder *MockpoetValidatorPersistorMockRecorder
}

// MockpoetValidatorPersistorMockRecorder is the mock recorder for MockpoetValidatorPersistor.
type MockpoetValidatorPersistorMockRecorder struct {
	mock *MockpoetValidatorPersistor
}

// NewMockpoetValidatorPersistor creates a new mock instance.
func NewMockpoetValidatorPersistor(ctrl *gomock.Controller) *MockpoetValidatorPersistor {
	mock := &MockpoetValidatorPersistor{ctrl: ctrl}
	mock.recorder = &MockpoetValidatorPersistorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpoetValidatorPersistor) EXPECT() *MockpoetValidatorPersistorMockRecorder {
	return m.recorder
}

// StoreProof mocks base method.
func (m *MockpoetValidatorPersistor) StoreProof(proofMessage *types.PoetProofMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreProof", proofMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreProof indicates an expected call of StoreProof.
func (mr *MockpoetValidatorPersistorMockRecorder) StoreProof(proofMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreProof", reflect.TypeOf((*MockpoetValidatorPersistor)(nil).StoreProof), proofMessage)
}

// Validate mocks base method.
func (m *MockpoetValidatorPersistor) Validate(proof types.PoetProof, poetID []byte, roundID string, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", proof, poetID, roundID, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockpoetValidatorPersistorMockRecorder) Validate(proof, poetID, roundID, signature interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockpoetValidatorPersistor)(nil).Validate), proof, poetID, roundID, signature)
}
