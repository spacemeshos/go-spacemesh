// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package wire

import (
	"github.com/spacemeshos/go-scale"
	"github.com/spacemeshos/go-spacemesh/common/types"
)

func (t *ActivationTxV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.InnerActivationTxV1.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.SmesherID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Signature[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ActivationTxV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.InnerActivationTxV1.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.SmesherID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Signature[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *InnerActivationTxV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.NIPostChallengeV1.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Coinbase[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.NumUnits))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.NIPost)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.NodeID)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64Ptr(enc, t.VRFNonce)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *InnerActivationTxV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.NIPostChallengeV1.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Coinbase[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumUnits = uint32(field)
	}
	{
		field, n, err := scale.DecodeOption[NIPostV1](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NIPost = field
	}
	{
		field, n, err := scale.DecodeOption[types.NodeID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NodeID = field
	}
	{
		field, n, err := scale.DecodeCompact64Ptr(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.VRFNonce = field
	}
	return total, nil
}

func (t *PostV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.Nonce))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Indices, 800)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Pow))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PostV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Nonce = uint32(field)
	}
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 800)
		if err != nil {
			return total, err
		}
		total += n
		t.Indices = field
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Pow = uint64(field)
	}
	return total, nil
}

func (t *MerkleProofV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.Nodes, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.LeafIndex))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *MerkleProofV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStructSliceWithLimit[types.Hash32](dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Nodes = field
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.LeafIndex = uint64(field)
	}
	return total, nil
}

func (t *NIPostV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.Membership.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.Post)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.PostMetadata)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *NIPostV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.Membership.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeOption[PostV1](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Post = field
	}
	{
		field, n, err := scale.DecodeOption[PostMetadataV1](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.PostMetadata = field
	}
	return total, nil
}

func (t *PostMetadataV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.Challenge, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.LabelsPerUnit))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PostMetadataV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.Challenge = field
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.LabelsPerUnit = uint64(field)
	}
	return total, nil
}

func (t *ATXMetadataV1) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.Publish))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.MsgHash[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ATXMetadataV1) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Publish = types.EpochID(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.MsgHash[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}
