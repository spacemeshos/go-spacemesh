package activation_test

import (
	"context"
	"fmt"
	"testing"

	"github.com/spacemeshos/go-spacemesh/activation"
	"github.com/spacemeshos/go-spacemesh/common/types"
	"github.com/spacemeshos/go-spacemesh/log/logtest"
	"github.com/spacemeshos/go-spacemesh/sql"
	"go.uber.org/zap/zaptest"

	"github.com/stretchr/testify/require"
)

func TestValidator_Validate(t *testing.T) {
	r := require.New(t)

	challenge := types.NIPostChallenge{
		PublishEpoch: postGenesisEpoch + 2,
	}
	challengeHash := challenge.Hash()
	poetDb := activation.NewPoetDb(sql.InMemory(), logtest.New(t).WithName("poetDb"))

	log := zaptest.NewLogger(t)
	postProvider := newTestPostManager(t)
	verifier, err := activation.NewPostVerifier(postProvider.cfg, log.Named("verifier"))
	r.NoError(err)
	defer verifier.Close()

	v := activation.NewValidator(poetDb, postProvider.cfg, postProvider.opts.Scrypt, verifier)

	nipost := buildNIPost(t, postProvider, challenge, poetDb, v)

	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, nipost, challengeHash, postProvider.opts.NumUnits)
	r.NoError(err)

	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, nipost, types.BytesToHash([]byte("lerner")), postProvider.opts.NumUnits)
	r.Contains(err.Error(), "invalid membership proof")

	newNIPost := *nipost
	newNIPost.Post = &types.Post{}
	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, &newNIPost, challengeHash, postProvider.opts.NumUnits)
	r.Contains(err.Error(), "invalid Post")

	newPostCfg := postProvider.cfg
	newPostCfg.MinNumUnits = postProvider.opts.NumUnits + 1
	v = activation.NewValidator(poetDb, newPostCfg, postProvider.opts.Scrypt, nil)
	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, nipost, challengeHash, postProvider.opts.NumUnits)
	r.EqualError(err, fmt.Sprintf("invalid `numUnits`; expected: >=%d, given: %d", newPostCfg.MinNumUnits, postProvider.opts.NumUnits))

	newPostCfg = postProvider.cfg
	newPostCfg.MaxNumUnits = postProvider.opts.NumUnits - 1
	v = activation.NewValidator(poetDb, newPostCfg, postProvider.opts.Scrypt, nil)
	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, nipost, challengeHash, postProvider.opts.NumUnits)
	r.EqualError(err, fmt.Sprintf("invalid `numUnits`; expected: <=%d, given: %d", newPostCfg.MaxNumUnits, postProvider.opts.NumUnits))

	newPostCfg = postProvider.cfg
	newPostCfg.LabelsPerUnit = nipost.PostMetadata.LabelsPerUnit + 1
	v = activation.NewValidator(poetDb, newPostCfg, postProvider.opts.Scrypt, nil)
	_, err = v.NIPost(context.Background(), postProvider.id, postProvider.commitmentAtxId, nipost, challengeHash, postProvider.opts.NumUnits)
	r.EqualError(err, fmt.Sprintf("invalid `LabelsPerUnit`; expected: >=%d, given: %d", newPostCfg.LabelsPerUnit, nipost.PostMetadata.LabelsPerUnit))
}
