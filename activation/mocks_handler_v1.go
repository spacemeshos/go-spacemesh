// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler_v1.go
//
// Generated by this command:
//
//	mockgen -typed -source=./handler_v1.go -destination=mocks_handler_v1.go -package=activation
//

// Package activation is a generated GoMock package.
package activation

import (
	context "context"
	reflect "reflect"

	wire "github.com/spacemeshos/go-spacemesh/activation/wire"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MocknipostValidatorV1 is a mock of nipostValidatorV1 interface.
type MocknipostValidatorV1 struct {
	ctrl     *gomock.Controller
	recorder *MocknipostValidatorV1MockRecorder
}

// MocknipostValidatorV1MockRecorder is the mock recorder for MocknipostValidatorV1.
type MocknipostValidatorV1MockRecorder struct {
	mock *MocknipostValidatorV1
}

// NewMocknipostValidatorV1 creates a new mock instance.
func NewMocknipostValidatorV1(ctrl *gomock.Controller) *MocknipostValidatorV1 {
	mock := &MocknipostValidatorV1{ctrl: ctrl}
	mock.recorder = &MocknipostValidatorV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknipostValidatorV1) EXPECT() *MocknipostValidatorV1MockRecorder {
	return m.recorder
}

// InitialNIPostChallengeV1 mocks base method.
func (m *MocknipostValidatorV1) InitialNIPostChallengeV1(challenge *wire.NIPostChallengeV1, atxs atxProvider, goldenATXID types.ATXID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialNIPostChallengeV1", challenge, atxs, goldenATXID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitialNIPostChallengeV1 indicates an expected call of InitialNIPostChallengeV1.
func (mr *MocknipostValidatorV1MockRecorder) InitialNIPostChallengeV1(challenge, atxs, goldenATXID any) *MocknipostValidatorV1InitialNIPostChallengeV1Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialNIPostChallengeV1", reflect.TypeOf((*MocknipostValidatorV1)(nil).InitialNIPostChallengeV1), challenge, atxs, goldenATXID)
	return &MocknipostValidatorV1InitialNIPostChallengeV1Call{Call: call}
}

// MocknipostValidatorV1InitialNIPostChallengeV1Call wrap *gomock.Call
type MocknipostValidatorV1InitialNIPostChallengeV1Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1InitialNIPostChallengeV1Call) Return(arg0 error) *MocknipostValidatorV1InitialNIPostChallengeV1Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1InitialNIPostChallengeV1Call) Do(f func(*wire.NIPostChallengeV1, atxProvider, types.ATXID) error) *MocknipostValidatorV1InitialNIPostChallengeV1Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1InitialNIPostChallengeV1Call) DoAndReturn(f func(*wire.NIPostChallengeV1, atxProvider, types.ATXID) error) *MocknipostValidatorV1InitialNIPostChallengeV1Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsVerifyingFullPost mocks base method.
func (m *MocknipostValidatorV1) IsVerifyingFullPost() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVerifyingFullPost")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsVerifyingFullPost indicates an expected call of IsVerifyingFullPost.
func (mr *MocknipostValidatorV1MockRecorder) IsVerifyingFullPost() *MocknipostValidatorV1IsVerifyingFullPostCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVerifyingFullPost", reflect.TypeOf((*MocknipostValidatorV1)(nil).IsVerifyingFullPost))
	return &MocknipostValidatorV1IsVerifyingFullPostCall{Call: call}
}

// MocknipostValidatorV1IsVerifyingFullPostCall wrap *gomock.Call
type MocknipostValidatorV1IsVerifyingFullPostCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1IsVerifyingFullPostCall) Return(arg0 bool) *MocknipostValidatorV1IsVerifyingFullPostCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1IsVerifyingFullPostCall) Do(f func() bool) *MocknipostValidatorV1IsVerifyingFullPostCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1IsVerifyingFullPostCall) DoAndReturn(f func() bool) *MocknipostValidatorV1IsVerifyingFullPostCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NIPost mocks base method.
func (m *MocknipostValidatorV1) NIPost(ctx context.Context, nodeId types.NodeID, commitmentAtxId types.ATXID, NIPost *types.NIPost, expectedChallenge types.Hash32, numUnits uint32, opts ...validatorOption) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, nodeId, commitmentAtxId, NIPost, expectedChallenge, numUnits}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NIPost", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NIPost indicates an expected call of NIPost.
func (mr *MocknipostValidatorV1MockRecorder) NIPost(ctx, nodeId, commitmentAtxId, NIPost, expectedChallenge, numUnits any, opts ...any) *MocknipostValidatorV1NIPostCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, nodeId, commitmentAtxId, NIPost, expectedChallenge, numUnits}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NIPost", reflect.TypeOf((*MocknipostValidatorV1)(nil).NIPost), varargs...)
	return &MocknipostValidatorV1NIPostCall{Call: call}
}

// MocknipostValidatorV1NIPostCall wrap *gomock.Call
type MocknipostValidatorV1NIPostCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1NIPostCall) Return(arg0 uint64, arg1 error) *MocknipostValidatorV1NIPostCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1NIPostCall) Do(f func(context.Context, types.NodeID, types.ATXID, *types.NIPost, types.Hash32, uint32, ...validatorOption) (uint64, error)) *MocknipostValidatorV1NIPostCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1NIPostCall) DoAndReturn(f func(context.Context, types.NodeID, types.ATXID, *types.NIPost, types.Hash32, uint32, ...validatorOption) (uint64, error)) *MocknipostValidatorV1NIPostCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NIPostChallengeV1 mocks base method.
func (m *MocknipostValidatorV1) NIPostChallengeV1(challenge *wire.NIPostChallengeV1, previous *types.ActivationTx, nodeID types.NodeID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NIPostChallengeV1", challenge, previous, nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NIPostChallengeV1 indicates an expected call of NIPostChallengeV1.
func (mr *MocknipostValidatorV1MockRecorder) NIPostChallengeV1(challenge, previous, nodeID any) *MocknipostValidatorV1NIPostChallengeV1Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NIPostChallengeV1", reflect.TypeOf((*MocknipostValidatorV1)(nil).NIPostChallengeV1), challenge, previous, nodeID)
	return &MocknipostValidatorV1NIPostChallengeV1Call{Call: call}
}

// MocknipostValidatorV1NIPostChallengeV1Call wrap *gomock.Call
type MocknipostValidatorV1NIPostChallengeV1Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1NIPostChallengeV1Call) Return(arg0 error) *MocknipostValidatorV1NIPostChallengeV1Call {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1NIPostChallengeV1Call) Do(f func(*wire.NIPostChallengeV1, *types.ActivationTx, types.NodeID) error) *MocknipostValidatorV1NIPostChallengeV1Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1NIPostChallengeV1Call) DoAndReturn(f func(*wire.NIPostChallengeV1, *types.ActivationTx, types.NodeID) error) *MocknipostValidatorV1NIPostChallengeV1Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NumUnits mocks base method.
func (m *MocknipostValidatorV1) NumUnits(cfg *PostConfig, numUnits uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumUnits", cfg, numUnits)
	ret0, _ := ret[0].(error)
	return ret0
}

// NumUnits indicates an expected call of NumUnits.
func (mr *MocknipostValidatorV1MockRecorder) NumUnits(cfg, numUnits any) *MocknipostValidatorV1NumUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumUnits", reflect.TypeOf((*MocknipostValidatorV1)(nil).NumUnits), cfg, numUnits)
	return &MocknipostValidatorV1NumUnitsCall{Call: call}
}

// MocknipostValidatorV1NumUnitsCall wrap *gomock.Call
type MocknipostValidatorV1NumUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1NumUnitsCall) Return(arg0 error) *MocknipostValidatorV1NumUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1NumUnitsCall) Do(f func(*PostConfig, uint32) error) *MocknipostValidatorV1NumUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1NumUnitsCall) DoAndReturn(f func(*PostConfig, uint32) error) *MocknipostValidatorV1NumUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PositioningAtx mocks base method.
func (m *MocknipostValidatorV1) PositioningAtx(id types.ATXID, atxs atxProvider, goldenATXID types.ATXID, pubepoch types.EpochID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositioningAtx", id, atxs, goldenATXID, pubepoch)
	ret0, _ := ret[0].(error)
	return ret0
}

// PositioningAtx indicates an expected call of PositioningAtx.
func (mr *MocknipostValidatorV1MockRecorder) PositioningAtx(id, atxs, goldenATXID, pubepoch any) *MocknipostValidatorV1PositioningAtxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositioningAtx", reflect.TypeOf((*MocknipostValidatorV1)(nil).PositioningAtx), id, atxs, goldenATXID, pubepoch)
	return &MocknipostValidatorV1PositioningAtxCall{Call: call}
}

// MocknipostValidatorV1PositioningAtxCall wrap *gomock.Call
type MocknipostValidatorV1PositioningAtxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1PositioningAtxCall) Return(arg0 error) *MocknipostValidatorV1PositioningAtxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1PositioningAtxCall) Do(f func(types.ATXID, atxProvider, types.ATXID, types.EpochID) error) *MocknipostValidatorV1PositioningAtxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1PositioningAtxCall) DoAndReturn(f func(types.ATXID, atxProvider, types.ATXID, types.EpochID) error) *MocknipostValidatorV1PositioningAtxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Post mocks base method.
func (m *MocknipostValidatorV1) Post(ctx context.Context, nodeId types.NodeID, commitmentAtxId types.ATXID, post *types.Post, metadata *types.PostMetadata, numUnits uint32, opts ...validatorOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, nodeId, commitmentAtxId, post, metadata, numUnits}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Post", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MocknipostValidatorV1MockRecorder) Post(ctx, nodeId, commitmentAtxId, post, metadata, numUnits any, opts ...any) *MocknipostValidatorV1PostCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, nodeId, commitmentAtxId, post, metadata, numUnits}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MocknipostValidatorV1)(nil).Post), varargs...)
	return &MocknipostValidatorV1PostCall{Call: call}
}

// MocknipostValidatorV1PostCall wrap *gomock.Call
type MocknipostValidatorV1PostCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1PostCall) Return(arg0 error) *MocknipostValidatorV1PostCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1PostCall) Do(f func(context.Context, types.NodeID, types.ATXID, *types.Post, *types.PostMetadata, uint32, ...validatorOption) error) *MocknipostValidatorV1PostCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1PostCall) DoAndReturn(f func(context.Context, types.NodeID, types.ATXID, *types.Post, *types.PostMetadata, uint32, ...validatorOption) error) *MocknipostValidatorV1PostCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VRFNonce mocks base method.
func (m *MocknipostValidatorV1) VRFNonce(nodeId types.NodeID, commitmentAtxId types.ATXID, vrfNonce, labelsPerUnit uint64, numUnits uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRFNonce", nodeId, commitmentAtxId, vrfNonce, labelsPerUnit, numUnits)
	ret0, _ := ret[0].(error)
	return ret0
}

// VRFNonce indicates an expected call of VRFNonce.
func (mr *MocknipostValidatorV1MockRecorder) VRFNonce(nodeId, commitmentAtxId, vrfNonce, labelsPerUnit, numUnits any) *MocknipostValidatorV1VRFNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRFNonce", reflect.TypeOf((*MocknipostValidatorV1)(nil).VRFNonce), nodeId, commitmentAtxId, vrfNonce, labelsPerUnit, numUnits)
	return &MocknipostValidatorV1VRFNonceCall{Call: call}
}

// MocknipostValidatorV1VRFNonceCall wrap *gomock.Call
type MocknipostValidatorV1VRFNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknipostValidatorV1VRFNonceCall) Return(arg0 error) *MocknipostValidatorV1VRFNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknipostValidatorV1VRFNonceCall) Do(f func(types.NodeID, types.ATXID, uint64, uint64, uint32) error) *MocknipostValidatorV1VRFNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknipostValidatorV1VRFNonceCall) DoAndReturn(f func(types.NodeID, types.ATXID, uint64, uint64, uint32) error) *MocknipostValidatorV1VRFNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
