// Code generated by MockGen. DO NOT EDIT.
// Source: ./poet.go
//
// Generated by this command:
//
//	mockgen -typed -package=activation -destination=poet_mocks.go -source=./poet.go
//

// Package activation is a generated GoMock package.
package activation

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockPoetClient is a mock of PoetClient interface.
type MockPoetClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoetClientMockRecorder
}

// MockPoetClientMockRecorder is the mock recorder for MockPoetClient.
type MockPoetClientMockRecorder struct {
	mock *MockPoetClient
}

// NewMockPoetClient creates a new mock instance.
func NewMockPoetClient(ctrl *gomock.Controller) *MockPoetClient {
	mock := &MockPoetClient{ctrl: ctrl}
	mock.recorder = &MockPoetClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoetClient) EXPECT() *MockPoetClientMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockPoetClient) Address() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(string)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockPoetClientMockRecorder) Address() *MockPoetClientAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockPoetClient)(nil).Address))
	return &MockPoetClientAddressCall{Call: call}
}

// MockPoetClientAddressCall wrap *gomock.Call
type MockPoetClientAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientAddressCall) Return(arg0 string) *MockPoetClientAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientAddressCall) Do(f func() string) *MockPoetClientAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientAddressCall) DoAndReturn(f func() string) *MockPoetClientAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CertifierInfo mocks base method.
func (m *MockPoetClient) CertifierInfo(ctx context.Context) (*types.CertifierInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifierInfo", ctx)
	ret0, _ := ret[0].(*types.CertifierInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CertifierInfo indicates an expected call of CertifierInfo.
func (mr *MockPoetClientMockRecorder) CertifierInfo(ctx any) *MockPoetClientCertifierInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifierInfo", reflect.TypeOf((*MockPoetClient)(nil).CertifierInfo), ctx)
	return &MockPoetClientCertifierInfoCall{Call: call}
}

// MockPoetClientCertifierInfoCall wrap *gomock.Call
type MockPoetClientCertifierInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientCertifierInfoCall) Return(arg0 *types.CertifierInfo, arg1 error) *MockPoetClientCertifierInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientCertifierInfoCall) Do(f func(context.Context) (*types.CertifierInfo, error)) *MockPoetClientCertifierInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientCertifierInfoCall) DoAndReturn(f func(context.Context) (*types.CertifierInfo, error)) *MockPoetClientCertifierInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Id mocks base method.
func (m *MockPoetClient) Id() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockPoetClientMockRecorder) Id() *MockPoetClientIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockPoetClient)(nil).Id))
	return &MockPoetClientIdCall{Call: call}
}

// MockPoetClientIdCall wrap *gomock.Call
type MockPoetClientIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientIdCall) Return(arg0 []byte) *MockPoetClientIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientIdCall) Do(f func() []byte) *MockPoetClientIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientIdCall) DoAndReturn(f func() []byte) *MockPoetClientIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockPoetClient) Info(ctx context.Context) (*types.PoetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(*types.PoetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockPoetClientMockRecorder) Info(ctx any) *MockPoetClientInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPoetClient)(nil).Info), ctx)
	return &MockPoetClientInfoCall{Call: call}
}

// MockPoetClientInfoCall wrap *gomock.Call
type MockPoetClientInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientInfoCall) Return(arg0 *types.PoetInfo, arg1 error) *MockPoetClientInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientInfoCall) Do(f func(context.Context) (*types.PoetInfo, error)) *MockPoetClientInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientInfoCall) DoAndReturn(f func(context.Context) (*types.PoetInfo, error)) *MockPoetClientInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PowParams mocks base method.
func (m *MockPoetClient) PowParams(ctx context.Context) (*PoetPowParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowParams", ctx)
	ret0, _ := ret[0].(*PoetPowParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowParams indicates an expected call of PowParams.
func (mr *MockPoetClientMockRecorder) PowParams(ctx any) *MockPoetClientPowParamsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowParams", reflect.TypeOf((*MockPoetClient)(nil).PowParams), ctx)
	return &MockPoetClientPowParamsCall{Call: call}
}

// MockPoetClientPowParamsCall wrap *gomock.Call
type MockPoetClientPowParamsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientPowParamsCall) Return(arg0 *PoetPowParams, arg1 error) *MockPoetClientPowParamsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientPowParamsCall) Do(f func(context.Context) (*PoetPowParams, error)) *MockPoetClientPowParamsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientPowParamsCall) DoAndReturn(f func(context.Context) (*PoetPowParams, error)) *MockPoetClientPowParamsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Proof mocks base method.
func (m *MockPoetClient) Proof(ctx context.Context, roundID string) (*types.PoetProofMessage, []types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Proof", ctx, roundID)
	ret0, _ := ret[0].(*types.PoetProofMessage)
	ret1, _ := ret[1].([]types.Hash32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Proof indicates an expected call of Proof.
func (mr *MockPoetClientMockRecorder) Proof(ctx, roundID any) *MockPoetClientProofCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proof", reflect.TypeOf((*MockPoetClient)(nil).Proof), ctx, roundID)
	return &MockPoetClientProofCall{Call: call}
}

// MockPoetClientProofCall wrap *gomock.Call
type MockPoetClientProofCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientProofCall) Return(arg0 *types.PoetProofMessage, arg1 []types.Hash32, arg2 error) *MockPoetClientProofCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientProofCall) Do(f func(context.Context, string) (*types.PoetProofMessage, []types.Hash32, error)) *MockPoetClientProofCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientProofCall) DoAndReturn(f func(context.Context, string) (*types.PoetProofMessage, []types.Hash32, error)) *MockPoetClientProofCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Submit mocks base method.
func (m *MockPoetClient) Submit(ctx context.Context, deadline time.Time, prefix, challenge []byte, signature types.EdSignature, nodeID types.NodeID, auth PoetAuth) (*types.PoetRound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, deadline, prefix, challenge, signature, nodeID, auth)
	ret0, _ := ret[0].(*types.PoetRound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockPoetClientMockRecorder) Submit(ctx, deadline, prefix, challenge, signature, nodeID, auth any) *MockPoetClientSubmitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockPoetClient)(nil).Submit), ctx, deadline, prefix, challenge, signature, nodeID, auth)
	return &MockPoetClientSubmitCall{Call: call}
}

// MockPoetClientSubmitCall wrap *gomock.Call
type MockPoetClientSubmitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoetClientSubmitCall) Return(arg0 *types.PoetRound, arg1 error) *MockPoetClientSubmitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoetClientSubmitCall) Do(f func(context.Context, time.Time, []byte, []byte, types.EdSignature, types.NodeID, PoetAuth) (*types.PoetRound, error)) *MockPoetClientSubmitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoetClientSubmitCall) DoAndReturn(f func(context.Context, time.Time, []byte, []byte, types.EdSignature, types.NodeID, PoetAuth) (*types.PoetRound, error)) *MockPoetClientSubmitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
