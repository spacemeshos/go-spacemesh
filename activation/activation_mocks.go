// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/activation (interfaces: SmeshingProvider,AtxHandler,NipostBuilder,Syncer)

// Package activation is a generated GoMock package.
package activation

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/activation/types"
	types0 "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockSmeshingProvider is a mock of SmeshingProvider interface.
type MockSmeshingProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSmeshingProviderMockRecorder
}

// MockSmeshingProviderMockRecorder is the mock recorder for MockSmeshingProvider.
type MockSmeshingProviderMockRecorder struct {
	mock *MockSmeshingProvider
}

// NewMockSmeshingProvider creates a new mock instance.
func NewMockSmeshingProvider(ctrl *gomock.Controller) *MockSmeshingProvider {
	mock := &MockSmeshingProvider{ctrl: ctrl}
	mock.recorder = &MockSmeshingProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmeshingProvider) EXPECT() *MockSmeshingProviderMockRecorder {
	return m.recorder
}

// Coinbase mocks base method.
func (m *MockSmeshingProvider) Coinbase() types0.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Coinbase")
	ret0, _ := ret[0].(types0.Address)
	return ret0
}

// Coinbase indicates an expected call of Coinbase.
func (mr *MockSmeshingProviderMockRecorder) Coinbase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Coinbase", reflect.TypeOf((*MockSmeshingProvider)(nil).Coinbase))
}

// SetCoinbase mocks base method.
func (m *MockSmeshingProvider) SetCoinbase(arg0 types0.Address) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCoinbase", arg0)
}

// SetCoinbase indicates an expected call of SetCoinbase.
func (mr *MockSmeshingProviderMockRecorder) SetCoinbase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCoinbase", reflect.TypeOf((*MockSmeshingProvider)(nil).SetCoinbase), arg0)
}

// SmesherID mocks base method.
func (m *MockSmeshingProvider) SmesherID() types0.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SmesherID")
	ret0, _ := ret[0].(types0.NodeID)
	return ret0
}

// SmesherID indicates an expected call of SmesherID.
func (mr *MockSmeshingProviderMockRecorder) SmesherID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SmesherID", reflect.TypeOf((*MockSmeshingProvider)(nil).SmesherID))
}

// Smeshing mocks base method.
func (m *MockSmeshingProvider) Smeshing() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Smeshing")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Smeshing indicates an expected call of Smeshing.
func (mr *MockSmeshingProviderMockRecorder) Smeshing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Smeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).Smeshing))
}

// StartSmeshing mocks base method.
func (m *MockSmeshingProvider) StartSmeshing(arg0 types0.Address, arg1 types.PostSetupOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSmeshing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSmeshing indicates an expected call of StartSmeshing.
func (mr *MockSmeshingProviderMockRecorder) StartSmeshing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSmeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).StartSmeshing), arg0, arg1)
}

// StopSmeshing mocks base method.
func (m *MockSmeshingProvider) StopSmeshing(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopSmeshing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopSmeshing indicates an expected call of StopSmeshing.
func (mr *MockSmeshingProviderMockRecorder) StopSmeshing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSmeshing", reflect.TypeOf((*MockSmeshingProvider)(nil).StopSmeshing), arg0)
}

// MockAtxHandler is a mock of AtxHandler interface.
type MockAtxHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAtxHandlerMockRecorder
}

// MockAtxHandlerMockRecorder is the mock recorder for MockAtxHandler.
type MockAtxHandlerMockRecorder struct {
	mock *MockAtxHandler
}

// NewMockAtxHandler creates a new mock instance.
func NewMockAtxHandler(ctrl *gomock.Controller) *MockAtxHandler {
	mock := &MockAtxHandler{ctrl: ctrl}
	mock.recorder = &MockAtxHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAtxHandler) EXPECT() *MockAtxHandlerMockRecorder {
	return m.recorder
}

// AwaitAtx mocks base method.
func (m *MockAtxHandler) AwaitAtx(arg0 types0.ATXID) chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AwaitAtx", arg0)
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// AwaitAtx indicates an expected call of AwaitAtx.
func (mr *MockAtxHandlerMockRecorder) AwaitAtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AwaitAtx", reflect.TypeOf((*MockAtxHandler)(nil).AwaitAtx), arg0)
}

// GetPosAtxID mocks base method.
func (m *MockAtxHandler) GetPosAtxID() (types0.ATXID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosAtxID")
	ret0, _ := ret[0].(types0.ATXID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosAtxID indicates an expected call of GetPosAtxID.
func (mr *MockAtxHandlerMockRecorder) GetPosAtxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosAtxID", reflect.TypeOf((*MockAtxHandler)(nil).GetPosAtxID))
}

// UnsubscribeAtx mocks base method.
func (m *MockAtxHandler) UnsubscribeAtx(arg0 types0.ATXID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeAtx", arg0)
}

// UnsubscribeAtx indicates an expected call of UnsubscribeAtx.
func (mr *MockAtxHandlerMockRecorder) UnsubscribeAtx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeAtx", reflect.TypeOf((*MockAtxHandler)(nil).UnsubscribeAtx), arg0)
}

// MockNipostBuilder is a mock of NipostBuilder interface.
type MockNipostBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockNipostBuilderMockRecorder
}

// MockNipostBuilderMockRecorder is the mock recorder for MockNipostBuilder.
type MockNipostBuilderMockRecorder struct {
	mock *MockNipostBuilder
}

// NewMockNipostBuilder creates a new mock instance.
func NewMockNipostBuilder(ctrl *gomock.Controller) *MockNipostBuilder {
	mock := &MockNipostBuilder{ctrl: ctrl}
	mock.recorder = &MockNipostBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNipostBuilder) EXPECT() *MockNipostBuilderMockRecorder {
	return m.recorder
}

// BuildNIPost mocks base method.
func (m *MockNipostBuilder) BuildNIPost(arg0 context.Context, arg1 *types0.PoetChallenge, arg2 types0.ATXID, arg3 time.Time) (*types0.NIPost, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildNIPost", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*types0.NIPost)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BuildNIPost indicates an expected call of BuildNIPost.
func (mr *MockNipostBuilderMockRecorder) BuildNIPost(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildNIPost", reflect.TypeOf((*MockNipostBuilder)(nil).BuildNIPost), arg0, arg1, arg2, arg3)
}

// updatePoETProvers mocks base method.
func (m *MockNipostBuilder) updatePoETProvers(arg0 []PoetProvingServiceClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "updatePoETProvers", arg0)
}

// updatePoETProvers indicates an expected call of updatePoETProvers.
func (mr *MockNipostBuilderMockRecorder) updatePoETProvers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePoETProvers", reflect.TypeOf((*MockNipostBuilder)(nil).updatePoETProvers), arg0)
}

// MockSyncer is a mock of Syncer interface.
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer.
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance.
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// RegisterForATXSynced mocks base method.
func (m *MockSyncer) RegisterForATXSynced() chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterForATXSynced")
	ret0, _ := ret[0].(chan struct{})
	return ret0
}

// RegisterForATXSynced indicates an expected call of RegisterForATXSynced.
func (mr *MockSyncerMockRecorder) RegisterForATXSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterForATXSynced", reflect.TypeOf((*MockSyncer)(nil).RegisterForATXSynced))
}
