// Code generated by MockGen. DO NOT EDIT.
// Source: ./sync.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/mocks.go -source=./sync.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	p2p "github.com/spacemeshos/go-spacemesh/p2p"
	gomock "go.uber.org/mock/gomock"
)

// MockTime is a mock of Time interface.
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *MockTimeMockRecorder
}

// MockTimeMockRecorder is the mock recorder for MockTime.
type MockTimeMockRecorder struct {
	mock *MockTime
}

// NewMockTime creates a new mock instance.
func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &MockTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTime) EXPECT() *MockTimeMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTime) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeMockRecorder) Now() *TimeNowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTime)(nil).Now))
	return &TimeNowCall{Call: call}
}

// TimeNowCall wrap *gomock.Call
type TimeNowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TimeNowCall) Return(arg0 time.Time) *TimeNowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TimeNowCall) Do(f func() time.Time) *TimeNowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TimeNowCall) DoAndReturn(f func() time.Time) *TimeNowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockgetPeers is a mock of getPeers interface.
type MockgetPeers struct {
	ctrl     *gomock.Controller
	recorder *MockgetPeersMockRecorder
}

// MockgetPeersMockRecorder is the mock recorder for MockgetPeers.
type MockgetPeersMockRecorder struct {
	mock *MockgetPeers
}

// NewMockgetPeers creates a new mock instance.
func NewMockgetPeers(ctrl *gomock.Controller) *MockgetPeers {
	mock := &MockgetPeers{ctrl: ctrl}
	mock.recorder = &MockgetPeersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetPeers) EXPECT() *MockgetPeersMockRecorder {
	return m.recorder
}

// GetPeers mocks base method.
func (m *MockgetPeers) GetPeers() []p2p.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]p2p.Peer)
	return ret0
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockgetPeersMockRecorder) GetPeers() *getPeersGetPeersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockgetPeers)(nil).GetPeers))
	return &getPeersGetPeersCall{Call: call}
}

// getPeersGetPeersCall wrap *gomock.Call
type getPeersGetPeersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *getPeersGetPeersCall) Return(arg0 []p2p.Peer) *getPeersGetPeersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *getPeersGetPeersCall) Do(f func() []p2p.Peer) *getPeersGetPeersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *getPeersGetPeersCall) DoAndReturn(f func() []p2p.Peer) *getPeersGetPeersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
