// Code generated by protoc-gen-go. DO NOT EDIT.
// source: merkle/pb/node.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeType int32

const (
	NodeType_branch    NodeType = 0
	NodeType_extension NodeType = 1
	NodeType_leaf      NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "branch",
	1: "extension",
	2: "leaf",
}
var NodeType_value = map[string]int32{
	"branch":    0,
	"extension": 1,
	"leaf":      2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_node_777698ea7213a71c, []int{0}
}

type Node struct {
	NodeType             NodeType `protobuf:"varint,1,opt,name=nodeType,proto3,enum=pb.NodeType" json:"nodeType,omitempty"`
	Entries              [][]byte `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Value                []byte   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_node_777698ea7213a71c, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (dst *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(dst, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetNodeType() NodeType {
	if m != nil {
		return m.NodeType
	}
	return NodeType_branch
}

func (m *Node) GetEntries() [][]byte {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Node) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Node) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterEnum("pb.NodeType", NodeType_name, NodeType_value)
}

func init() { proto.RegisterFile("merkle/pb/node.proto", fileDescriptor_node_777698ea7213a71c) }

var fileDescriptor_node_777698ea7213a71c = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8e, 0xc1, 0x4e, 0x85, 0x30,
	0x14, 0x44, 0x6d, 0xa9, 0x08, 0x37, 0x68, 0xc8, 0x0d, 0x8b, 0x2e, 0x1b, 0x57, 0x8d, 0x0b, 0x48,
	0xf4, 0x0f, 0xfc, 0x00, 0x16, 0x8d, 0x2b, 0x77, 0xad, 0x5c, 0x03, 0x11, 0xdb, 0xa6, 0x54, 0xa3,
	0x7f, 0x6f, 0xe4, 0x3d, 0xde, 0x6e, 0xce, 0x9c, 0x64, 0x32, 0xd0, 0x7d, 0x52, 0xfa, 0x58, 0x69,
	0x88, 0x6e, 0xf0, 0x61, 0xa2, 0x3e, 0xa6, 0x90, 0x03, 0xf2, 0xe8, 0xee, 0x33, 0x88, 0x31, 0x4c,
	0x84, 0x1a, 0xaa, 0x7f, 0xf3, 0xf2, 0x1b, 0x49, 0x32, 0xc5, 0xf4, 0xdd, 0x63, 0xd3, 0x47, 0xd7,
	0x8f, 0xe7, 0xce, 0x5c, 0x2c, 0x4a, 0xb8, 0x21, 0x9f, 0xd3, 0x42, 0x9b, 0xe4, 0xaa, 0xd0, 0x8d,
	0x39, 0x10, 0x11, 0x44, 0xb4, 0x79, 0x96, 0x85, 0x62, 0xba, 0x36, 0x7b, 0xc6, 0x0e, 0xae, 0xbf,
	0xed, 0xfa, 0x45, 0x52, 0x28, 0xa6, 0x1b, 0x73, 0x82, 0x87, 0x01, 0xaa, 0x63, 0x19, 0x01, 0x4a,
	0x97, 0xac, 0x7f, 0x9b, 0xdb, 0x2b, 0xbc, 0x85, 0x9a, 0x7e, 0x32, 0xf9, 0x6d, 0x09, 0xbe, 0x65,
	0x58, 0x81, 0x58, 0xc9, 0xbe, 0xb7, 0xfc, 0x59, 0xbc, 0xf2, 0xe8, 0x5c, 0xb9, 0xff, 0x7e, 0xfa,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xd9, 0x4b, 0x8d, 0xcf, 0x00, 0x00, 0x00,
}
