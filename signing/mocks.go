// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package signing is a generated GoMock package.
package signing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
	sql "github.com/spacemeshos/go-spacemesh/sql"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// LittleEndian mocks base method.
func (m *MockSigner) LittleEndian() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LittleEndian")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LittleEndian indicates an expected call of LittleEndian.
func (mr *MockSignerMockRecorder) LittleEndian() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LittleEndian", reflect.TypeOf((*MockSigner)(nil).LittleEndian))
}

// PublicKey mocks base method.
func (m *MockSigner) PublicKey() *PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockSignerMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSigner)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockSigner) Sign(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigner)(nil).Sign), arg0)
}

// MockVerifier is a mock of Verifier interface.
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier.
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance.
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockVerifier) Verify(pub *PublicKey, msg, sig []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", pub, msg, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockVerifierMockRecorder) Verify(pub, msg, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockVerifier)(nil).Verify), pub, msg, sig)
}

// MockVerifyExtractor is a mock of VerifyExtractor interface.
type MockVerifyExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockVerifyExtractorMockRecorder
}

// MockVerifyExtractorMockRecorder is the mock recorder for MockVerifyExtractor.
type MockVerifyExtractorMockRecorder struct {
	mock *MockVerifyExtractor
}

// NewMockVerifyExtractor creates a new mock instance.
func NewMockVerifyExtractor(ctrl *gomock.Controller) *MockVerifyExtractor {
	mock := &MockVerifyExtractor{ctrl: ctrl}
	mock.recorder = &MockVerifyExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifyExtractor) EXPECT() *MockVerifyExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockVerifyExtractor) Extract(msg, sig []byte) (*PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", msg, sig)
	ret0, _ := ret[0].(*PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockVerifyExtractorMockRecorder) Extract(msg, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockVerifyExtractor)(nil).Extract), msg, sig)
}

// MockVRFDatabase is a mock of VRFDatabase interface.
type MockVRFDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockVRFDatabaseMockRecorder
}

// MockVRFDatabaseMockRecorder is the mock recorder for MockVRFDatabase.
type MockVRFDatabaseMockRecorder struct {
	mock *MockVRFDatabase
}

// NewMockVRFDatabase creates a new mock instance.
func NewMockVRFDatabase(ctrl *gomock.Controller) *MockVRFDatabase {
	mock := &MockVRFDatabase{ctrl: ctrl}
	mock.recorder = &MockVRFDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVRFDatabase) EXPECT() *MockVRFDatabaseMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockVRFDatabase) Exec(arg0 string, arg1 sql.Encoder, arg2 sql.Decoder) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exec", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockVRFDatabaseMockRecorder) Exec(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockVRFDatabase)(nil).Exec), arg0, arg1, arg2)
}

// GetAtxHeader mocks base method.
func (m *MockVRFDatabase) GetAtxHeader(id types.ATXID) (*types.ActivationTxHeader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtxHeader", id)
	ret0, _ := ret[0].(*types.ActivationTxHeader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtxHeader indicates an expected call of GetAtxHeader.
func (mr *MockVRFDatabaseMockRecorder) GetAtxHeader(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtxHeader", reflect.TypeOf((*MockVRFDatabase)(nil).GetAtxHeader), id)
}
