// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package signing is a generated GoMock package.
package signing

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockSigner is a mock of Signer interface.
type MockSigner struct {
	ctrl     *gomock.Controller
	recorder *MockSignerMockRecorder
}

// MockSignerMockRecorder is the mock recorder for MockSigner.
type MockSignerMockRecorder struct {
	mock *MockSigner
}

// NewMockSigner creates a new mock instance.
func NewMockSigner(ctrl *gomock.Controller) *MockSigner {
	mock := &MockSigner{ctrl: ctrl}
	mock.recorder = &MockSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSigner) EXPECT() *MockSignerMockRecorder {
	return m.recorder
}

// LittleEndian mocks base method.
func (m *MockSigner) LittleEndian() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LittleEndian")
	ret0, _ := ret[0].(bool)
	return ret0
}

// LittleEndian indicates an expected call of LittleEndian.
func (mr *MockSignerMockRecorder) LittleEndian() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LittleEndian", reflect.TypeOf((*MockSigner)(nil).LittleEndian))
}

// PublicKey mocks base method.
func (m *MockSigner) PublicKey() *PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicKey")
	ret0, _ := ret[0].(*PublicKey)
	return ret0
}

// PublicKey indicates an expected call of PublicKey.
func (mr *MockSignerMockRecorder) PublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicKey", reflect.TypeOf((*MockSigner)(nil).PublicKey))
}

// Sign mocks base method.
func (m *MockSigner) Sign(arg0 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MockSignerMockRecorder) Sign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSigner)(nil).Sign), arg0)
}

// MockKeyExtractor is a mock of KeyExtractor interface.
type MockKeyExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockKeyExtractorMockRecorder
}

// MockKeyExtractorMockRecorder is the mock recorder for MockKeyExtractor.
type MockKeyExtractorMockRecorder struct {
	mock *MockKeyExtractor
}

// NewMockKeyExtractor creates a new mock instance.
func NewMockKeyExtractor(ctrl *gomock.Controller) *MockKeyExtractor {
	mock := &MockKeyExtractor{ctrl: ctrl}
	mock.recorder = &MockKeyExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyExtractor) EXPECT() *MockKeyExtractorMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockKeyExtractor) Extract(msg, sig []byte) (*PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", msg, sig)
	ret0, _ := ret[0].(*PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockKeyExtractorMockRecorder) Extract(msg, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockKeyExtractor)(nil).Extract), msg, sig)
}

// MocknonceFetcher is a mock of nonceFetcher interface.
type MocknonceFetcher struct {
	ctrl     *gomock.Controller
	recorder *MocknonceFetcherMockRecorder
}

// MocknonceFetcherMockRecorder is the mock recorder for MocknonceFetcher.
type MocknonceFetcherMockRecorder struct {
	mock *MocknonceFetcher
}

// NewMocknonceFetcher creates a new mock instance.
func NewMocknonceFetcher(ctrl *gomock.Controller) *MocknonceFetcher {
	mock := &MocknonceFetcher{ctrl: ctrl}
	mock.recorder = &MocknonceFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknonceFetcher) EXPECT() *MocknonceFetcherMockRecorder {
	return m.recorder
}

// NonceForNode mocks base method.
func (m *MocknonceFetcher) NonceForNode(arg0 types.NodeID) (types.VRFPostIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceForNode", arg0)
	ret0, _ := ret[0].(types.VRFPostIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceForNode indicates an expected call of NonceForNode.
func (mr *MocknonceFetcherMockRecorder) NonceForNode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceForNode", reflect.TypeOf((*MocknonceFetcher)(nil).NonceForNode), arg0)
}
