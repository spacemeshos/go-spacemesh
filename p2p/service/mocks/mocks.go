// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	p2pcrypto "github.com/spacemeshos/go-spacemesh/p2p/p2pcrypto"
	service "github.com/spacemeshos/go-spacemesh/p2p/service"
	priorityq "github.com/spacemeshos/go-spacemesh/priorityq"
)

// MockDirectMessage is a mock of DirectMessage interface.
type MockDirectMessage struct {
	ctrl     *gomock.Controller
	recorder *MockDirectMessageMockRecorder
}

// MockDirectMessageMockRecorder is the mock recorder for MockDirectMessage.
type MockDirectMessageMockRecorder struct {
	mock *MockDirectMessage
}

// NewMockDirectMessage creates a new mock instance.
func NewMockDirectMessage(ctrl *gomock.Controller) *MockDirectMessage {
	mock := &MockDirectMessage{ctrl: ctrl}
	mock.recorder = &MockDirectMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectMessage) EXPECT() *MockDirectMessageMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockDirectMessage) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockDirectMessageMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockDirectMessage)(nil).Bytes))
}

// Metadata mocks base method.
func (m *MockDirectMessage) Metadata() service.P2PMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(service.P2PMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockDirectMessageMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockDirectMessage)(nil).Metadata))
}

// Sender mocks base method.
func (m *MockDirectMessage) Sender() p2pcrypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(p2pcrypto.PublicKey)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MockDirectMessageMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockDirectMessage)(nil).Sender))
}

// MockGossipMessage is a mock of GossipMessage interface.
type MockGossipMessage struct {
	ctrl     *gomock.Controller
	recorder *MockGossipMessageMockRecorder
}

// MockGossipMessageMockRecorder is the mock recorder for MockGossipMessage.
type MockGossipMessageMockRecorder struct {
	mock *MockGossipMessage
}

// NewMockGossipMessage creates a new mock instance.
func NewMockGossipMessage(ctrl *gomock.Controller) *MockGossipMessage {
	mock := &MockGossipMessage{ctrl: ctrl}
	mock.recorder = &MockGossipMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGossipMessage) EXPECT() *MockGossipMessageMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockGossipMessage) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockGossipMessageMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockGossipMessage)(nil).Bytes))
}

// IsOwnMessage mocks base method.
func (m *MockGossipMessage) IsOwnMessage() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwnMessage")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOwnMessage indicates an expected call of IsOwnMessage.
func (mr *MockGossipMessageMockRecorder) IsOwnMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwnMessage", reflect.TypeOf((*MockGossipMessage)(nil).IsOwnMessage))
}

// ReportValidation mocks base method.
func (m *MockGossipMessage) ReportValidation(ctx context.Context, protocol string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportValidation", ctx, protocol)
}

// ReportValidation indicates an expected call of ReportValidation.
func (mr *MockGossipMessageMockRecorder) ReportValidation(ctx, protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportValidation", reflect.TypeOf((*MockGossipMessage)(nil).ReportValidation), ctx, protocol)
}

// RequestID mocks base method.
func (m *MockGossipMessage) RequestID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestID")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestID indicates an expected call of RequestID.
func (mr *MockGossipMessageMockRecorder) RequestID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestID", reflect.TypeOf((*MockGossipMessage)(nil).RequestID))
}

// Sender mocks base method.
func (m *MockGossipMessage) Sender() p2pcrypto.PublicKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender")
	ret0, _ := ret[0].(p2pcrypto.PublicKey)
	return ret0
}

// Sender indicates an expected call of Sender.
func (mr *MockGossipMessageMockRecorder) Sender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockGossipMessage)(nil).Sender))
}

// ValidationCompletedChan mocks base method.
func (m *MockGossipMessage) ValidationCompletedChan() chan service.MessageValidation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationCompletedChan")
	ret0, _ := ret[0].(chan service.MessageValidation)
	return ret0
}

// ValidationCompletedChan indicates an expected call of ValidationCompletedChan.
func (mr *MockGossipMessageMockRecorder) ValidationCompletedChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationCompletedChan", reflect.TypeOf((*MockGossipMessage)(nil).ValidationCompletedChan))
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockService) Broadcast(ctx context.Context, protocol string, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, protocol, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockServiceMockRecorder) Broadcast(ctx, protocol, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockService)(nil).Broadcast), ctx, protocol, payload)
}

// GossipReady mocks base method.
func (m *MockService) GossipReady() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GossipReady")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// GossipReady indicates an expected call of GossipReady.
func (mr *MockServiceMockRecorder) GossipReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GossipReady", reflect.TypeOf((*MockService)(nil).GossipReady))
}

// RegisterDirectProtocol mocks base method.
func (m *MockService) RegisterDirectProtocol(protocol string) chan service.DirectMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterDirectProtocol", protocol)
	ret0, _ := ret[0].(chan service.DirectMessage)
	return ret0
}

// RegisterDirectProtocol indicates an expected call of RegisterDirectProtocol.
func (mr *MockServiceMockRecorder) RegisterDirectProtocol(protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDirectProtocol", reflect.TypeOf((*MockService)(nil).RegisterDirectProtocol), protocol)
}

// RegisterGossipProtocol mocks base method.
func (m *MockService) RegisterGossipProtocol(protocol string, prio priorityq.Priority) chan service.GossipMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterGossipProtocol", protocol, prio)
	ret0, _ := ret[0].(chan service.GossipMessage)
	return ret0
}

// RegisterGossipProtocol indicates an expected call of RegisterGossipProtocol.
func (mr *MockServiceMockRecorder) RegisterGossipProtocol(protocol, prio interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterGossipProtocol", reflect.TypeOf((*MockService)(nil).RegisterGossipProtocol), protocol, prio)
}

// Shutdown mocks base method.
func (m *MockService) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockServiceMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockService)(nil).Shutdown))
}

// Start mocks base method.
func (m *MockService) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start), ctx)
}

// SubscribePeerEvents mocks base method.
func (m *MockService) SubscribePeerEvents() (chan p2pcrypto.PublicKey, chan p2pcrypto.PublicKey) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribePeerEvents")
	ret0, _ := ret[0].(chan p2pcrypto.PublicKey)
	ret1, _ := ret[1].(chan p2pcrypto.PublicKey)
	return ret0, ret1
}

// SubscribePeerEvents indicates an expected call of SubscribePeerEvents.
func (mr *MockServiceMockRecorder) SubscribePeerEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribePeerEvents", reflect.TypeOf((*MockService)(nil).SubscribePeerEvents))
}

// MockData is a mock of Data interface.
type MockData struct {
	ctrl     *gomock.Controller
	recorder *MockDataMockRecorder
}

// MockDataMockRecorder is the mock recorder for MockData.
type MockDataMockRecorder struct {
	mock *MockData
}

// NewMockData creates a new mock instance.
func NewMockData(ctrl *gomock.Controller) *MockData {
	mock := &MockData{ctrl: ctrl}
	mock.recorder = &MockDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockData) EXPECT() *MockDataMockRecorder {
	return m.recorder
}

// Bytes mocks base method.
func (m *MockData) Bytes() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bytes")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Bytes indicates an expected call of Bytes.
func (mr *MockDataMockRecorder) Bytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bytes", reflect.TypeOf((*MockData)(nil).Bytes))
}
