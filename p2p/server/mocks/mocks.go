// Code generated by MockGen. DO NOT EDIT.
// Source: ./server.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/mocks.go -source=./server.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	network "github.com/libp2p/go-libp2p/core/network"
	peer "github.com/libp2p/go-libp2p/core/peer"
	protocol "github.com/libp2p/go-libp2p/core/protocol"
	gomock "go.uber.org/mock/gomock"
)

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Network mocks base method.
func (m *MockHost) Network() network.Network {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(network.Network)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockHostMockRecorder) Network() *HostNetworkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockHost)(nil).Network))
	return &HostNetworkCall{Call: call}
}

// HostNetworkCall wrap *gomock.Call
type HostNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HostNetworkCall) Return(arg0 network.Network) *HostNetworkCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HostNetworkCall) Do(f func() network.Network) *HostNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HostNetworkCall) DoAndReturn(f func() network.Network) *HostNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewStream mocks base method.
func (m *MockHost) NewStream(arg0 context.Context, arg1 peer.ID, arg2 ...protocol.ID) (network.Stream, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStream", varargs...)
	ret0, _ := ret[0].(network.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStream indicates an expected call of NewStream.
func (mr *MockHostMockRecorder) NewStream(arg0, arg1 any, arg2 ...any) *HostNewStreamCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockHost)(nil).NewStream), varargs...)
	return &HostNewStreamCall{Call: call}
}

// HostNewStreamCall wrap *gomock.Call
type HostNewStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HostNewStreamCall) Return(arg0 network.Stream, arg1 error) *HostNewStreamCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HostNewStreamCall) Do(f func(context.Context, peer.ID, ...protocol.ID) (network.Stream, error)) *HostNewStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HostNewStreamCall) DoAndReturn(f func(context.Context, peer.ID, ...protocol.ID) (network.Stream, error)) *HostNewStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStreamHandler mocks base method.
func (m *MockHost) SetStreamHandler(arg0 protocol.ID, arg1 network.StreamHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStreamHandler", arg0, arg1)
}

// SetStreamHandler indicates an expected call of SetStreamHandler.
func (mr *MockHostMockRecorder) SetStreamHandler(arg0, arg1 any) *HostSetStreamHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStreamHandler", reflect.TypeOf((*MockHost)(nil).SetStreamHandler), arg0, arg1)
	return &HostSetStreamHandlerCall{Call: call}
}

// HostSetStreamHandlerCall wrap *gomock.Call
type HostSetStreamHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *HostSetStreamHandlerCall) Return() *HostSetStreamHandlerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *HostSetStreamHandlerCall) Do(f func(protocol.ID, network.StreamHandler)) *HostSetStreamHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *HostSetStreamHandlerCall) DoAndReturn(f func(protocol.ID, network.StreamHandler)) *HostSetStreamHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
