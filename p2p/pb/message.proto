syntax = "proto3";

package pb;
option go_package = "pb";

// Handshake protocol data used for both request and response - sent unencrypted over the wire
message HandshakeData {
    string clientVersion = 1; // client version of the sender
    int32 networkID = 2; // network id of sending node
    uint32 port = 3; // the port this node listens on, omitted or handshake responses.
}

// just here for now

// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multiplexing back to higher level protocols
// data is here and not in CommonMessageData to avoid leaked data on unencrypted connections
message ProtocolMessage {
    Metadata metadata = 1;
    oneof data {
        bytes payload = 2;
        MessageWrapper msg = 3;
    }
}

message Metadata {
    string nextProtocol = 1; // Protocol id string
    string clientVersion = 2; // Author client version
    int64 timestamp = 3; // Unix time - authoring time (not sending time)
    bytes authPubkey = 4; // Authoring node public key (32bytes) - may not be sender
}

message MessageWrapper {
    uint32 type = 1; //msg type
    bool req = 2; // Req or Resp, 0 - req / 1 - resp
    uint64 reqID = 3;
    bytes payload = 4; //encapsulated msg
}
