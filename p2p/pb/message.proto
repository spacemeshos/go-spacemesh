syntax = "proto3";

package pb;
option go_package = "pb";

// Handshake protocol data used for both request and response - sent unencrypted over the wire
message HandshakeData {
    string clientVersion = 1; // client version of the sender
    int32 networkID = 2; // network id of sending node
    uint32 port = 3; // the port this node listens on, omitted or handshake responses. TODO: REMOVE
}

// P2P message headers

// used to distinguish plain messages to MessageServer messages. TODO: do this without oneof ?
message Payload {
    oneof data {
        bytes payload = 2;
        MessageWrapper msg = 3;
    }
}

// used in message server for direct req-res protocols.
message MessageWrapper {
    uint32 type = 1; //msg type
    bool req = 2; // Req or Resp, 0 - req / 1 - resp
    uint64 reqID = 3;
    bytes payload = 4; //encapsulated msg
}


// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multiplexing back to higher level protocols
// data is here and not in CommonMessageData to avoid leaked data on unencrypted connections
message ProtocolMessage {
    Metadata metadata = 1;
    Payload payload = 2;
}

message Metadata {
    string nextProtocol = 1; // Protocol id string
    string clientVersion = 2; // client version
    int64 timestamp = 3; // Unix time - sending time
    bytes authPubkey = 4; // sending node public key (32bytes)
}

// TODO: consider adding NetworkID to the ProtocolMessage Metadata and use the same messages for UDP :)

// We don't want to save state about udp connections hence we send some more info in the header, actually not more info
// because we don't need
message UDPMetadata {
    string nextProtocol = 1; // Protocol id string
    string clientVersion = 2; // client version
    int64 timestamp = 3; // Unix time - sending time
    int32 NetworkID = 4; // NetworkID
}

message UDPProtocolMessage {
    UDPMetadata Metadata = 1;
    Payload Payload = 2;
}
