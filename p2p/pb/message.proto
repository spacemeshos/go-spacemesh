syntax = "proto3";

package pb;
option go_package = "pb";

// Handshake protocol message format

// data common to all messages - Top level msg format
message CommonMessageData {
    bytes sessionId = 1;  // always set (handshake or other protocol messages)
    bytes payload = 2;    // encrypted payload with session aes key - binary protobufs. empty for handshake methods
    int64 timestamp = 3;  // sending time
    // we don't want to add anything here even protocol names as it goes unencrypted over the wire
}

// Handshake protocol data used for both request and response - sent unencrypted over the wire
message HandshakeData {
    bytes sessionId = 1;    // for req - same as iv. for response - set to req id
    bytes payload = 2; // empty for now
    int64 timestamp = 3; // sending time
    string clientVersion = 4; // client version of the sender
    int32 networkID = 5; // network id of sending node
    string protocol = 6; // 'handshake/req' || 'handshake/resp'
    bytes nodePubKey = 7; // 65 bytes uncompressed
    bytes iv = 8; // 16 bytes - AES-256-CBC IV
    bytes pubKey = 9; // 65 bytes (uncompressed) ephemeral public key
    bytes hmac = 10; // HMAC-SHA-256 32 bytes
    string sign = 11; // hex encoded string 32 bytes sign of all above data by node public key (verifies he has the priv key and he wrote the data
}

// just here for now

// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multi310.445plexing back to higher level protocols
// data is here and not in CommonMessageData to avoid leaked data on unencrypted connections
message ProtocolMessage {
    Metadata metadata = 1;
}

message Metadata {
    string protocol = 1;      // Protocol id string
    bytes reqId = 2;          // Unique request id. Generated by caller. Returned in responses.
    string clientVersion = 3; // Author client version
    int64 timestamp = 4;      // Unix time - authoring time (not sending time)
    bool gossip = 5;          // True to have receiver peer gossip the message to its neighbors
    bytes authPubKey = 6;     // Authoring node Secp256k1 public key (32bytes) - may not be sender
    string authorSign = 7;    // Signature of message data by author + method specific data by message creator node. format: hexEncode([]bytes)
}

// ping is our example protocol
message PingReqData {
    Metadata metadata = 1;
    string ping = 2; // the echo message itself - protocol specific - starts at #2
}

message PingRespData {
    Metadata metadata = 1;
    string pong = 2; // the echo message itself - protocol specific - starts at #2
}