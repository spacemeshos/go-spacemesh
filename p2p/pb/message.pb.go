// Code generated by protoc-gen-go. DO NOT EDIT.
// source: message.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// data common to all messages - Top level msg format
type CommonMessageData struct {
	SessionId []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CommonMessageData) Reset()                    { *m = CommonMessageData{} }
func (m *CommonMessageData) String() string            { return proto.CompactTextString(m) }
func (*CommonMessageData) ProtoMessage()               {}
func (*CommonMessageData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CommonMessageData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *CommonMessageData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CommonMessageData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Handshake protocol data used for both request and response - sent unencrypted over the wire
type HandshakeData struct {
	SessionId     []byte `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Payload       []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Timestamp     int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	ClientVersion string `protobuf:"bytes,4,opt,name=clientVersion" json:"clientVersion,omitempty"`
	NetworkID     int32  `protobuf:"varint,5,opt,name=networkID" json:"networkID,omitempty"`
	Protocol      string `protobuf:"bytes,6,opt,name=protocol" json:"protocol,omitempty"`
	NodePubKey    []byte `protobuf:"bytes,7,opt,name=nodePubKey,proto3" json:"nodePubKey,omitempty"`
	Iv            []byte `protobuf:"bytes,8,opt,name=iv,proto3" json:"iv,omitempty"`
	PubKey        []byte `protobuf:"bytes,9,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Hmac          []byte `protobuf:"bytes,10,opt,name=hmac,proto3" json:"hmac,omitempty"`
	TcpAddress    string `protobuf:"bytes,11,opt,name=tcpAddress" json:"tcpAddress,omitempty"`
	Sign          string `protobuf:"bytes,12,opt,name=sign" json:"sign,omitempty"`
}

func (m *HandshakeData) Reset()                    { *m = HandshakeData{} }
func (m *HandshakeData) String() string            { return proto.CompactTextString(m) }
func (*HandshakeData) ProtoMessage()               {}
func (*HandshakeData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *HandshakeData) GetSessionId() []byte {
	if m != nil {
		return m.SessionId
	}
	return nil
}

func (m *HandshakeData) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HandshakeData) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HandshakeData) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *HandshakeData) GetNetworkID() int32 {
	if m != nil {
		return m.NetworkID
	}
	return 0
}

func (m *HandshakeData) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *HandshakeData) GetNodePubKey() []byte {
	if m != nil {
		return m.NodePubKey
	}
	return nil
}

func (m *HandshakeData) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *HandshakeData) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *HandshakeData) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *HandshakeData) GetTcpAddress() string {
	if m != nil {
		return m.TcpAddress
	}
	return ""
}

func (m *HandshakeData) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

// used for protocol messages (non-handshake) - this is the decrypted CommonMessageData.payload
// it allows multi310.445plexing back to higher level protocols
// data is here and not in CommonMessageData to avoid leaked data on unencrypted connections
type ProtocolMessage struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *ProtocolMessage) Reset()                    { *m = ProtocolMessage{} }
func (m *ProtocolMessage) String() string            { return proto.CompactTextString(m) }
func (*ProtocolMessage) ProtoMessage()               {}
func (*ProtocolMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ProtocolMessage) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Metadata struct {
	Protocol      string `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	ReqId         []byte `protobuf:"bytes,2,opt,name=reqId,proto3" json:"reqId,omitempty"`
	ClientVersion string `protobuf:"bytes,3,opt,name=clientVersion" json:"clientVersion,omitempty"`
	Timestamp     int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Gossip        bool   `protobuf:"varint,5,opt,name=gossip" json:"gossip,omitempty"`
	AuthPubKey    []byte `protobuf:"bytes,6,opt,name=authPubKey,proto3" json:"authPubKey,omitempty"`
	AuthorSign    string `protobuf:"bytes,7,opt,name=authorSign" json:"authorSign,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Metadata) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Metadata) GetReqId() []byte {
	if m != nil {
		return m.ReqId
	}
	return nil
}

func (m *Metadata) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *Metadata) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Metadata) GetGossip() bool {
	if m != nil {
		return m.Gossip
	}
	return false
}

func (m *Metadata) GetAuthPubKey() []byte {
	if m != nil {
		return m.AuthPubKey
	}
	return nil
}

func (m *Metadata) GetAuthorSign() string {
	if m != nil {
		return m.AuthorSign
	}
	return ""
}

// ping is our example protocol
type PingReqData struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Ping     string    `protobuf:"bytes,2,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingReqData) Reset()                    { *m = PingReqData{} }
func (m *PingReqData) String() string            { return proto.CompactTextString(m) }
func (*PingReqData) ProtoMessage()               {}
func (*PingReqData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *PingReqData) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PingReqData) GetPing() string {
	if m != nil {
		return m.Ping
	}
	return ""
}

type PingRespData struct {
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Pong     string    `protobuf:"bytes,2,opt,name=pong" json:"pong,omitempty"`
}

func (m *PingRespData) Reset()                    { *m = PingRespData{} }
func (m *PingRespData) String() string            { return proto.CompactTextString(m) }
func (*PingRespData) ProtoMessage()               {}
func (*PingRespData) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *PingRespData) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PingRespData) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonMessageData)(nil), "pb.CommonMessageData")
	proto.RegisterType((*HandshakeData)(nil), "pb.HandshakeData")
	proto.RegisterType((*ProtocolMessage)(nil), "pb.ProtocolMessage")
	proto.RegisterType((*Metadata)(nil), "pb.Metadata")
	proto.RegisterType((*PingReqData)(nil), "pb.PingReqData")
	proto.RegisterType((*PingRespData)(nil), "pb.PingRespData")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x41, 0x8b, 0xd4, 0x30,
	0x14, 0xc7, 0x69, 0xa7, 0xd3, 0x69, 0xdf, 0x74, 0x14, 0x83, 0x2c, 0x41, 0x44, 0x4a, 0xf1, 0xd0,
	0xd3, 0x1c, 0xf4, 0xe8, 0x49, 0xdd, 0x83, 0xc3, 0xba, 0x30, 0x44, 0xf0, 0xe0, 0x2d, 0x6d, 0x43,
	0x27, 0xec, 0x34, 0xc9, 0x36, 0xd9, 0x95, 0xfd, 0xa0, 0x82, 0x1f, 0x47, 0xf2, 0xda, 0x6e, 0x67,
	0x57, 0x04, 0x11, 0xbc, 0xe5, 0xfd, 0x5e, 0xf3, 0x4f, 0xf2, 0x7b, 0x85, 0x4d, 0x27, 0xac, 0xe5,
	0xad, 0xd8, 0x9a, 0x5e, 0x3b, 0x4d, 0x42, 0x53, 0x15, 0x12, 0x9e, 0x7d, 0xd4, 0x5d, 0xa7, 0xd5,
	0xe5, 0xd0, 0x3a, 0xe7, 0x8e, 0x93, 0x97, 0x90, 0x5a, 0x61, 0xad, 0xd4, 0x6a, 0xd7, 0xd0, 0x20,
	0x0f, 0xca, 0x8c, 0xcd, 0x80, 0x50, 0x58, 0x19, 0x7e, 0x77, 0xd4, 0xbc, 0xa1, 0x21, 0xf6, 0xa6,
	0xd2, 0xef, 0x73, 0xb2, 0x13, 0xd6, 0xf1, 0xce, 0xd0, 0x45, 0x1e, 0x94, 0x0b, 0x36, 0x83, 0xe2,
	0x47, 0x08, 0x9b, 0x4f, 0x5c, 0x35, 0xf6, 0xc0, 0xaf, 0xfe, 0xe3, 0x39, 0xe4, 0x35, 0x6c, 0xea,
	0xa3, 0x14, 0xca, 0x7d, 0x15, 0xbd, 0x8f, 0xa2, 0x51, 0x1e, 0x94, 0x29, 0x7b, 0x08, 0x7d, 0x86,
	0x12, 0xee, 0xbb, 0xee, 0xaf, 0x76, 0xe7, 0x74, 0x99, 0x07, 0xe5, 0x92, 0xcd, 0x80, 0xbc, 0x80,
	0x04, 0x1d, 0xd5, 0xfa, 0x48, 0x63, 0xdc, 0x7e, 0x5f, 0x93, 0x57, 0x00, 0x4a, 0x37, 0x62, 0x7f,
	0x53, 0x5d, 0x88, 0x3b, 0xba, 0xc2, 0xab, 0x9d, 0x10, 0xf2, 0x04, 0x42, 0x79, 0x4b, 0x13, 0xe4,
	0xa1, 0xbc, 0x25, 0x67, 0x10, 0x9b, 0xe1, 0xdb, 0x14, 0xd9, 0x58, 0x11, 0x02, 0xd1, 0xa1, 0xe3,
	0x35, 0x05, 0xa4, 0xb8, 0xf6, 0xd9, 0xae, 0x36, 0xef, 0x9b, 0xa6, 0x17, 0xd6, 0xd2, 0x35, 0x9e,
	0x7c, 0x42, 0xfc, 0x1e, 0x2b, 0x5b, 0x45, 0x33, 0xec, 0xe0, 0xba, 0x78, 0x07, 0x4f, 0xf7, 0xe3,
	0xdd, 0xc6, 0x21, 0x92, 0x12, 0x92, 0x4e, 0x38, 0xde, 0x70, 0xc7, 0xd1, 0xeb, 0xfa, 0x4d, 0xb6,
	0x35, 0xd5, 0xf6, 0x72, 0x64, 0xec, 0xbe, 0x5b, 0xfc, 0x0c, 0x20, 0x99, 0xf0, 0x83, 0x57, 0x07,
	0x8f, 0x5e, 0xfd, 0x1c, 0x96, 0xbd, 0xb8, 0xde, 0x4d, 0xb3, 0x18, 0x8a, 0xdf, 0x5d, 0x2f, 0xfe,
	0xe0, 0x7a, 0x9e, 0x57, 0xf4, 0x78, 0x5e, 0x67, 0x10, 0xb7, 0xda, 0x5a, 0x69, 0x70, 0x0c, 0x09,
	0x1b, 0x2b, 0xef, 0x82, 0xdf, 0xb8, 0xc3, 0xe8, 0x39, 0x1e, 0x3c, 0xcf, 0x64, 0xea, 0xeb, 0xfe,
	0x8b, 0x37, 0xb2, 0x1a, 0x5c, 0xcd, 0xa4, 0xb8, 0x80, 0xf5, 0x5e, 0xaa, 0x96, 0x89, 0x6b, 0xfc,
	0xd9, 0xfe, 0xda, 0x89, 0x97, 0x6c, 0xa4, 0x6a, 0xf1, 0xa5, 0x29, 0xc3, 0x75, 0xf1, 0x19, 0xb2,
	0x21, 0xcc, 0x9a, 0x7f, 0x48, 0xd3, 0x27, 0x69, 0x5a, 0xb5, 0x1f, 0xa2, 0x6f, 0xa1, 0xa9, 0xaa,
	0x18, 0xe5, 0xbe, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xd3, 0x91, 0x3a, 0x97, 0x03, 0x00,
	0x00,
}
