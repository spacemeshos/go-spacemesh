// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/vm/core (interfaces: Host)
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/host.go github.com/spacemeshos/go-spacemesh/vm/core Host
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	core "github.com/spacemeshos/go-spacemesh/vm/core"
	gomock "go.uber.org/mock/gomock"
)

// MockHost is a mock of Host interface.
type MockHost struct {
	ctrl     *gomock.Controller
	recorder *MockHostMockRecorder
}

// MockHostMockRecorder is the mock recorder for MockHost.
type MockHostMockRecorder struct {
	mock *MockHost
}

// NewMockHost creates a new mock instance.
func NewMockHost(ctrl *gomock.Controller) *MockHost {
	mock := &MockHost{ctrl: ctrl}
	mock.recorder = &MockHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHost) EXPECT() *MockHostMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockHost) Balance() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Balance indicates an expected call of Balance.
func (mr *MockHostMockRecorder) Balance() *MockHostBalanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockHost)(nil).Balance))
	return &MockHostBalanceCall{Call: call}
}

// MockHostBalanceCall wrap *gomock.Call
type MockHostBalanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostBalanceCall) Return(arg0 uint64) *MockHostBalanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostBalanceCall) Do(f func() uint64) *MockHostBalanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostBalanceCall) DoAndReturn(f func() uint64) *MockHostBalanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Consume mocks base method.
func (m *MockHost) Consume(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockHostMockRecorder) Consume(arg0 any) *MockHostConsumeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockHost)(nil).Consume), arg0)
	return &MockHostConsumeCall{Call: call}
}

// MockHostConsumeCall wrap *gomock.Call
type MockHostConsumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostConsumeCall) Return(arg0 error) *MockHostConsumeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostConsumeCall) Do(f func(uint64) error) *MockHostConsumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostConsumeCall) DoAndReturn(f func(uint64) error) *MockHostConsumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGenesisID mocks base method.
func (m *MockHost) GetGenesisID() types.Hash20 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisID")
	ret0, _ := ret[0].(types.Hash20)
	return ret0
}

// GetGenesisID indicates an expected call of GetGenesisID.
func (mr *MockHostMockRecorder) GetGenesisID() *MockHostGetGenesisIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisID", reflect.TypeOf((*MockHost)(nil).GetGenesisID))
	return &MockHostGetGenesisIDCall{Call: call}
}

// MockHostGetGenesisIDCall wrap *gomock.Call
type MockHostGetGenesisIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostGetGenesisIDCall) Return(arg0 types.Hash20) *MockHostGetGenesisIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostGetGenesisIDCall) Do(f func() types.Hash20) *MockHostGetGenesisIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostGetGenesisIDCall) DoAndReturn(f func() types.Hash20) *MockHostGetGenesisIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Handler mocks base method.
func (m *MockHost) Handler() core.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handler")
	ret0, _ := ret[0].(core.Handler)
	return ret0
}

// Handler indicates an expected call of Handler.
func (mr *MockHostMockRecorder) Handler() *MockHostHandlerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handler", reflect.TypeOf((*MockHost)(nil).Handler))
	return &MockHostHandlerCall{Call: call}
}

// MockHostHandlerCall wrap *gomock.Call
type MockHostHandlerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostHandlerCall) Return(arg0 core.Handler) *MockHostHandlerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostHandlerCall) Do(f func() core.Handler) *MockHostHandlerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostHandlerCall) DoAndReturn(f func() core.Handler) *MockHostHandlerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Layer mocks base method.
func (m *MockHost) Layer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Layer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// Layer indicates an expected call of Layer.
func (mr *MockHostMockRecorder) Layer() *MockHostLayerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Layer", reflect.TypeOf((*MockHost)(nil).Layer))
	return &MockHostLayerCall{Call: call}
}

// MockHostLayerCall wrap *gomock.Call
type MockHostLayerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostLayerCall) Return(arg0 types.LayerID) *MockHostLayerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostLayerCall) Do(f func() types.LayerID) *MockHostLayerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostLayerCall) DoAndReturn(f func() types.LayerID) *MockHostLayerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MaxGas mocks base method.
func (m *MockHost) MaxGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// MaxGas indicates an expected call of MaxGas.
func (mr *MockHostMockRecorder) MaxGas() *MockHostMaxGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxGas", reflect.TypeOf((*MockHost)(nil).MaxGas))
	return &MockHostMaxGasCall{Call: call}
}

// MockHostMaxGasCall wrap *gomock.Call
type MockHostMaxGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostMaxGasCall) Return(arg0 uint64) *MockHostMaxGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostMaxGasCall) Do(f func() uint64) *MockHostMaxGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostMaxGasCall) DoAndReturn(f func() uint64) *MockHostMaxGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Nonce mocks base method.
func (m *MockHost) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce.
func (mr *MockHostMockRecorder) Nonce() *MockHostNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockHost)(nil).Nonce))
	return &MockHostNonceCall{Call: call}
}

// MockHostNonceCall wrap *gomock.Call
type MockHostNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostNonceCall) Return(arg0 uint64) *MockHostNonceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostNonceCall) Do(f func() uint64) *MockHostNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostNonceCall) DoAndReturn(f func() uint64) *MockHostNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Principal mocks base method.
func (m *MockHost) Principal() types.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Principal")
	ret0, _ := ret[0].(types.Address)
	return ret0
}

// Principal indicates an expected call of Principal.
func (mr *MockHostMockRecorder) Principal() *MockHostPrincipalCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Principal", reflect.TypeOf((*MockHost)(nil).Principal))
	return &MockHostPrincipalCall{Call: call}
}

// MockHostPrincipalCall wrap *gomock.Call
type MockHostPrincipalCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostPrincipalCall) Return(arg0 types.Address) *MockHostPrincipalCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostPrincipalCall) Do(f func() types.Address) *MockHostPrincipalCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostPrincipalCall) DoAndReturn(f func() types.Address) *MockHostPrincipalCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Template mocks base method.
func (m *MockHost) Template() core.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Template")
	ret0, _ := ret[0].(core.Template)
	return ret0
}

// Template indicates an expected call of Template.
func (mr *MockHostMockRecorder) Template() *MockHostTemplateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Template", reflect.TypeOf((*MockHost)(nil).Template))
	return &MockHostTemplateCall{Call: call}
}

// MockHostTemplateCall wrap *gomock.Call
type MockHostTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostTemplateCall) Return(arg0 core.Template) *MockHostTemplateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostTemplateCall) Do(f func() core.Template) *MockHostTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostTemplateCall) DoAndReturn(f func() core.Template) *MockHostTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TemplateAddress mocks base method.
func (m *MockHost) TemplateAddress() types.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateAddress")
	ret0, _ := ret[0].(types.Address)
	return ret0
}

// TemplateAddress indicates an expected call of TemplateAddress.
func (mr *MockHostMockRecorder) TemplateAddress() *MockHostTemplateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateAddress", reflect.TypeOf((*MockHost)(nil).TemplateAddress))
	return &MockHostTemplateAddressCall{Call: call}
}

// MockHostTemplateAddressCall wrap *gomock.Call
type MockHostTemplateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHostTemplateAddressCall) Return(arg0 types.Address) *MockHostTemplateAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHostTemplateAddressCall) Do(f func() types.Address) *MockHostTemplateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHostTemplateAddressCall) DoAndReturn(f func() types.Address) *MockHostTemplateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
