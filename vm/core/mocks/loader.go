// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/vm/core (interfaces: AccountLoader)
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/loader.go github.com/spacemeshos/go-spacemesh/vm/core AccountLoader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountLoader is a mock of AccountLoader interface.
type MockAccountLoader struct {
	ctrl     *gomock.Controller
	recorder *MockAccountLoaderMockRecorder
}

// MockAccountLoaderMockRecorder is the mock recorder for MockAccountLoader.
type MockAccountLoaderMockRecorder struct {
	mock *MockAccountLoader
}

// NewMockAccountLoader creates a new mock instance.
func NewMockAccountLoader(ctrl *gomock.Controller) *MockAccountLoader {
	mock := &MockAccountLoader{ctrl: ctrl}
	mock.recorder = &MockAccountLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountLoader) EXPECT() *MockAccountLoaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountLoader) Get(arg0 types.Address) (types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountLoaderMockRecorder) Get(arg0 any) *MockAccountLoaderGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountLoader)(nil).Get), arg0)
	return &MockAccountLoaderGetCall{Call: call}
}

// MockAccountLoaderGetCall wrap *gomock.Call
type MockAccountLoaderGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccountLoaderGetCall) Return(arg0 types.Account, arg1 error) *MockAccountLoaderGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccountLoaderGetCall) Do(f func(types.Address) (types.Account, error)) *MockAccountLoaderGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccountLoaderGetCall) DoAndReturn(f func(types.Address) (types.Account, error)) *MockAccountLoaderGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Has mocks base method.
func (m *MockAccountLoader) Has(arg0 types.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockAccountLoaderMockRecorder) Has(arg0 any) *MockAccountLoaderHasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockAccountLoader)(nil).Has), arg0)
	return &MockAccountLoaderHasCall{Call: call}
}

// MockAccountLoaderHasCall wrap *gomock.Call
type MockAccountLoaderHasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccountLoaderHasCall) Return(arg0 bool, arg1 error) *MockAccountLoaderHasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccountLoaderHasCall) Do(f func(types.Address) (bool, error)) *MockAccountLoaderHasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccountLoaderHasCall) DoAndReturn(f func(types.Address) (bool, error)) *MockAccountLoaderHasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
