// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/vm/core (interfaces: Template)
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/template.go github.com/spacemeshos/go-spacemesh/vm/core Template
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	scale "github.com/spacemeshos/go-scale"
	core "github.com/spacemeshos/go-spacemesh/vm/core"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplate is a mock of Template interface.
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate.
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance.
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// BaseGas mocks base method.
func (m *MockTemplate) BaseGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// BaseGas indicates an expected call of BaseGas.
func (mr *MockTemplateMockRecorder) BaseGas() *MockTemplateBaseGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseGas", reflect.TypeOf((*MockTemplate)(nil).BaseGas))
	return &MockTemplateBaseGasCall{Call: call}
}

// MockTemplateBaseGasCall wrap *gomock.Call
type MockTemplateBaseGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTemplateBaseGasCall) Return(arg0 uint64) *MockTemplateBaseGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTemplateBaseGasCall) Do(f func() uint64) *MockTemplateBaseGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTemplateBaseGasCall) DoAndReturn(f func() uint64) *MockTemplateBaseGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExecGas mocks base method.
func (m *MockTemplate) ExecGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ExecGas indicates an expected call of ExecGas.
func (mr *MockTemplateMockRecorder) ExecGas() *MockTemplateExecGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecGas", reflect.TypeOf((*MockTemplate)(nil).ExecGas))
	return &MockTemplateExecGasCall{Call: call}
}

// MockTemplateExecGasCall wrap *gomock.Call
type MockTemplateExecGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTemplateExecGasCall) Return(arg0 uint64) *MockTemplateExecGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTemplateExecGasCall) Do(f func() uint64) *MockTemplateExecGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTemplateExecGasCall) DoAndReturn(f func() uint64) *MockTemplateExecGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LoadGas mocks base method.
func (m *MockTemplate) LoadGas() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadGas")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LoadGas indicates an expected call of LoadGas.
func (mr *MockTemplateMockRecorder) LoadGas() *MockTemplateLoadGasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadGas", reflect.TypeOf((*MockTemplate)(nil).LoadGas))
	return &MockTemplateLoadGasCall{Call: call}
}

// MockTemplateLoadGasCall wrap *gomock.Call
type MockTemplateLoadGasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTemplateLoadGasCall) Return(arg0 uint64) *MockTemplateLoadGasCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTemplateLoadGasCall) Do(f func() uint64) *MockTemplateLoadGasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTemplateLoadGasCall) DoAndReturn(f func() uint64) *MockTemplateLoadGasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MaxSpend mocks base method.
func (m *MockTemplate) MaxSpend(arg0 any) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxSpend", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MaxSpend indicates an expected call of MaxSpend.
func (mr *MockTemplateMockRecorder) MaxSpend(arg0 any) *MockTemplateMaxSpendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxSpend", reflect.TypeOf((*MockTemplate)(nil).MaxSpend), arg0)
	return &MockTemplateMaxSpendCall{Call: call}
}

// MockTemplateMaxSpendCall wrap *gomock.Call
type MockTemplateMaxSpendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTemplateMaxSpendCall) Return(arg0 uint64, arg1 error) *MockTemplateMaxSpendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTemplateMaxSpendCall) Do(f func(any) (uint64, error)) *MockTemplateMaxSpendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTemplateMaxSpendCall) DoAndReturn(f func(any) (uint64, error)) *MockTemplateMaxSpendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Verify mocks base method.
func (m *MockTemplate) Verify(arg0 core.Host, arg1 []byte, arg2 *scale.Decoder) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockTemplateMockRecorder) Verify(arg0, arg1, arg2 any) *MockTemplateVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTemplate)(nil).Verify), arg0, arg1, arg2)
	return &MockTemplateVerifyCall{Call: call}
}

// MockTemplateVerifyCall wrap *gomock.Call
type MockTemplateVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTemplateVerifyCall) Return(arg0 bool) *MockTemplateVerifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTemplateVerifyCall) Do(f func(core.Host, []byte, *scale.Decoder) bool) *MockTemplateVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTemplateVerifyCall) DoAndReturn(f func(core.Host, []byte, *scale.Decoder) bool) *MockTemplateVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
