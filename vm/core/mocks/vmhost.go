// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/vm/core (interfaces: VMHost)
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/vmhost.go github.com/spacemeshos/go-spacemesh/vm/core VMHost
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockVMHost is a mock of VMHost interface.
type MockVMHost struct {
	ctrl     *gomock.Controller
	recorder *MockVMHostMockRecorder
}

// MockVMHostMockRecorder is the mock recorder for MockVMHost.
type MockVMHostMockRecorder struct {
	mock *MockVMHost
}

// NewMockVMHost creates a new mock instance.
func NewMockVMHost(ctrl *gomock.Controller) *MockVMHost {
	mock := &MockVMHost{ctrl: ctrl}
	mock.recorder = &MockVMHostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMHost) EXPECT() *MockVMHostMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockVMHost) Execute(arg0 types.LayerID, arg1 int64, arg2, arg3 types.Address, arg4 []byte, arg5 uint64, arg6 []byte) ([]byte, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockVMHostMockRecorder) Execute(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockVMHostExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockVMHost)(nil).Execute), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockVMHostExecuteCall{Call: call}
}

// MockVMHostExecuteCall wrap *gomock.Call
type MockVMHostExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVMHostExecuteCall) Return(arg0 []byte, arg1 int64, arg2 error) *MockVMHostExecuteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVMHostExecuteCall) Do(f func(types.LayerID, int64, types.Address, types.Address, []byte, uint64, []byte) ([]byte, int64, error)) *MockVMHostExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVMHostExecuteCall) DoAndReturn(f func(types.LayerID, int64, types.Address, types.Address, []byte, uint64, []byte) ([]byte, int64, error)) *MockVMHostExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
