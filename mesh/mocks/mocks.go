// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockconservativeState is a mock of conservativeState interface.
type MockconservativeState struct {
	ctrl     *gomock.Controller
	recorder *MockconservativeStateMockRecorder
}

// MockconservativeStateMockRecorder is the mock recorder for MockconservativeState.
type MockconservativeStateMockRecorder struct {
	mock *MockconservativeState
}

// NewMockconservativeState creates a new mock instance.
func NewMockconservativeState(ctrl *gomock.Controller) *MockconservativeState {
	mock := &MockconservativeState{ctrl: ctrl}
	mock.recorder = &MockconservativeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconservativeState) EXPECT() *MockconservativeStateMockRecorder {
	return m.recorder
}

// AddTxToMempool mocks base method.
func (m *MockconservativeState) AddTxToMempool(tx *types.Transaction, checkValidity bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxToMempool", tx, checkValidity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxToMempool indicates an expected call of AddTxToMempool.
func (mr *MockconservativeStateMockRecorder) AddTxToMempool(tx, checkValidity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxToMempool", reflect.TypeOf((*MockconservativeState)(nil).AddTxToMempool), tx, checkValidity)
}

// AddressExists mocks base method.
func (m *MockconservativeState) AddressExists(arg0 types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MockconservativeStateMockRecorder) AddressExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MockconservativeState)(nil).AddressExists), arg0)
}

// ApplyLayer mocks base method.
func (m *MockconservativeState) ApplyLayer(layer types.LayerID, txs []*types.Transaction, rewards map[types.Address]uint64) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLayer", layer, txs, rewards)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyLayer indicates an expected call of ApplyLayer.
func (mr *MockconservativeStateMockRecorder) ApplyLayer(layer, txs, rewards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLayer", reflect.TypeOf((*MockconservativeState)(nil).ApplyLayer), layer, txs, rewards)
}

// Get mocks base method.
func (m *MockconservativeState) Get(id types.TransactionID) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockconservativeStateMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockconservativeState)(nil).Get), id)
}

// GetAllAccounts mocks base method.
func (m *MockconservativeState) GetAllAccounts() (*types.MultipleAccountsState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts")
	ret0, _ := ret[0].(*types.MultipleAccountsState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockconservativeStateMockRecorder) GetAllAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockconservativeState)(nil).GetAllAccounts))
}

// GetBalance mocks base method.
func (m *MockconservativeState) GetBalance(arg0 types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockconservativeStateMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockconservativeState)(nil).GetBalance), arg0)
}

// GetLayerApplied mocks base method.
func (m *MockconservativeState) GetLayerApplied(arg0 types.TransactionID) *types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerApplied", arg0)
	ret0, _ := ret[0].(*types.LayerID)
	return ret0
}

// GetLayerApplied indicates an expected call of GetLayerApplied.
func (mr *MockconservativeStateMockRecorder) GetLayerApplied(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerApplied", reflect.TypeOf((*MockconservativeState)(nil).GetLayerApplied), arg0)
}

// GetLayerStateRoot mocks base method.
func (m *MockconservativeState) GetLayerStateRoot(arg0 types.LayerID) (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerStateRoot", arg0)
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerStateRoot indicates an expected call of GetLayerStateRoot.
func (mr *MockconservativeStateMockRecorder) GetLayerStateRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerStateRoot", reflect.TypeOf((*MockconservativeState)(nil).GetLayerStateRoot), arg0)
}

// GetNonce mocks base method.
func (m *MockconservativeState) GetNonce(arg0 types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockconservativeStateMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockconservativeState)(nil).GetNonce), arg0)
}

// GetStateRoot mocks base method.
func (m *MockconservativeState) GetStateRoot() types.Hash32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot")
	ret0, _ := ret[0].(types.Hash32)
	return ret0
}

// GetStateRoot indicates an expected call of GetStateRoot.
func (mr *MockconservativeStateMockRecorder) GetStateRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MockconservativeState)(nil).GetStateRoot))
}

// Invalidate mocks base method.
func (m *MockconservativeState) Invalidate(id types.TransactionID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate", id)
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockconservativeStateMockRecorder) Invalidate(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockconservativeState)(nil).Invalidate), id)
}

// Rewind mocks base method.
func (m *MockconservativeState) Rewind(layer types.LayerID) (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewind", layer)
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rewind indicates an expected call of Rewind.
func (mr *MockconservativeStateMockRecorder) Rewind(layer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewind", reflect.TypeOf((*MockconservativeState)(nil).Rewind), layer)
}

// Mocktortoise is a mock of tortoise interface.
type Mocktortoise struct {
	ctrl     *gomock.Controller
	recorder *MocktortoiseMockRecorder
}

// MocktortoiseMockRecorder is the mock recorder for Mocktortoise.
type MocktortoiseMockRecorder struct {
	mock *Mocktortoise
}

// NewMocktortoise creates a new mock instance.
func NewMocktortoise(ctrl *gomock.Controller) *Mocktortoise {
	mock := &Mocktortoise{ctrl: ctrl}
	mock.recorder = &MocktortoiseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktortoise) EXPECT() *MocktortoiseMockRecorder {
	return m.recorder
}

// HandleIncomingLayer mocks base method.
func (m *Mocktortoise) HandleIncomingLayer(arg0 context.Context, arg1 types.LayerID) (types.LayerID, types.LayerID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIncomingLayer", arg0, arg1)
	ret0, _ := ret[0].(types.LayerID)
	ret1, _ := ret[1].(types.LayerID)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// HandleIncomingLayer indicates an expected call of HandleIncomingLayer.
func (mr *MocktortoiseMockRecorder) HandleIncomingLayer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIncomingLayer", reflect.TypeOf((*Mocktortoise)(nil).HandleIncomingLayer), arg0, arg1)
}

// OnBallot mocks base method.
func (m *Mocktortoise) OnBallot(arg0 *types.Ballot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBallot", arg0)
}

// OnBallot indicates an expected call of OnBallot.
func (mr *MocktortoiseMockRecorder) OnBallot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBallot", reflect.TypeOf((*Mocktortoise)(nil).OnBallot), arg0)
}

// OnBlock mocks base method.
func (m *Mocktortoise) OnBlock(arg0 *types.Block) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnBlock", arg0)
}

// OnBlock indicates an expected call of OnBlock.
func (mr *MocktortoiseMockRecorder) OnBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnBlock", reflect.TypeOf((*Mocktortoise)(nil).OnBlock), arg0)
}
