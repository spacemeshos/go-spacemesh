// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=txs -destination=./txs_mocks.go -source=./interface.go
//

// Package txs is a generated GoMock package.
package txs

import (
	context "context"
	reflect "reflect"
	time "time"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	system "github.com/spacemeshos/go-spacemesh/system"
	gomock "go.uber.org/mock/gomock"
)

// MockconservativeState is a mock of conservativeState interface.
type MockconservativeState struct {
	ctrl     *gomock.Controller
	recorder *MockconservativeStateMockRecorder
}

// MockconservativeStateMockRecorder is the mock recorder for MockconservativeState.
type MockconservativeStateMockRecorder struct {
	mock *MockconservativeState
}

// NewMockconservativeState creates a new mock instance.
func NewMockconservativeState(ctrl *gomock.Controller) *MockconservativeState {
	mock := &MockconservativeState{ctrl: ctrl}
	mock.recorder = &MockconservativeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconservativeState) EXPECT() *MockconservativeStateMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockconservativeState) AddToCache(arg0 context.Context, arg1 *types.Transaction, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCache", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockconservativeStateMockRecorder) AddToCache(arg0, arg1, arg2 any) *MockconservativeStateAddToCacheCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockconservativeState)(nil).AddToCache), arg0, arg1, arg2)
	return &MockconservativeStateAddToCacheCall{Call: call}
}

// MockconservativeStateAddToCacheCall wrap *gomock.Call
type MockconservativeStateAddToCacheCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconservativeStateAddToCacheCall) Return(arg0 error) *MockconservativeStateAddToCacheCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconservativeStateAddToCacheCall) Do(f func(context.Context, *types.Transaction, time.Time) error) *MockconservativeStateAddToCacheCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconservativeStateAddToCacheCall) DoAndReturn(f func(context.Context, *types.Transaction, time.Time) error) *MockconservativeStateAddToCacheCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddToDB mocks base method.
func (m *MockconservativeState) AddToDB(arg0 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToDB indicates an expected call of AddToDB.
func (mr *MockconservativeStateMockRecorder) AddToDB(arg0 any) *MockconservativeStateAddToDBCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToDB", reflect.TypeOf((*MockconservativeState)(nil).AddToDB), arg0)
	return &MockconservativeStateAddToDBCall{Call: call}
}

// MockconservativeStateAddToDBCall wrap *gomock.Call
type MockconservativeStateAddToDBCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconservativeStateAddToDBCall) Return(arg0 error) *MockconservativeStateAddToDBCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconservativeStateAddToDBCall) Do(f func(*types.Transaction) error) *MockconservativeStateAddToDBCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconservativeStateAddToDBCall) DoAndReturn(f func(*types.Transaction) error) *MockconservativeStateAddToDBCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMeshTransaction mocks base method.
func (m *MockconservativeState) GetMeshTransaction(arg0 types.TransactionID) (*types.MeshTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeshTransaction", arg0)
	ret0, _ := ret[0].(*types.MeshTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeshTransaction indicates an expected call of GetMeshTransaction.
func (mr *MockconservativeStateMockRecorder) GetMeshTransaction(arg0 any) *MockconservativeStateGetMeshTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeshTransaction", reflect.TypeOf((*MockconservativeState)(nil).GetMeshTransaction), arg0)
	return &MockconservativeStateGetMeshTransactionCall{Call: call}
}

// MockconservativeStateGetMeshTransactionCall wrap *gomock.Call
type MockconservativeStateGetMeshTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconservativeStateGetMeshTransactionCall) Return(arg0 *types.MeshTransaction, arg1 error) *MockconservativeStateGetMeshTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconservativeStateGetMeshTransactionCall) Do(f func(types.TransactionID) (*types.MeshTransaction, error)) *MockconservativeStateGetMeshTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconservativeStateGetMeshTransactionCall) DoAndReturn(f func(types.TransactionID) (*types.MeshTransaction, error)) *MockconservativeStateGetMeshTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasTx mocks base method.
func (m *MockconservativeState) HasTx(arg0 types.TransactionID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTx", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasTx indicates an expected call of HasTx.
func (mr *MockconservativeStateMockRecorder) HasTx(arg0 any) *MockconservativeStateHasTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTx", reflect.TypeOf((*MockconservativeState)(nil).HasTx), arg0)
	return &MockconservativeStateHasTxCall{Call: call}
}

// MockconservativeStateHasTxCall wrap *gomock.Call
type MockconservativeStateHasTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconservativeStateHasTxCall) Return(arg0 bool, arg1 error) *MockconservativeStateHasTxCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconservativeStateHasTxCall) Do(f func(types.TransactionID) (bool, error)) *MockconservativeStateHasTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconservativeStateHasTxCall) DoAndReturn(f func(types.TransactionID) (bool, error)) *MockconservativeStateHasTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validation mocks base method.
func (m *MockconservativeState) Validation(arg0 types.RawTx) system.ValidationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validation", arg0)
	ret0, _ := ret[0].(system.ValidationRequest)
	return ret0
}

// Validation indicates an expected call of Validation.
func (mr *MockconservativeStateMockRecorder) Validation(arg0 any) *MockconservativeStateValidationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validation", reflect.TypeOf((*MockconservativeState)(nil).Validation), arg0)
	return &MockconservativeStateValidationCall{Call: call}
}

// MockconservativeStateValidationCall wrap *gomock.Call
type MockconservativeStateValidationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconservativeStateValidationCall) Return(arg0 system.ValidationRequest) *MockconservativeStateValidationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconservativeStateValidationCall) Do(f func(types.RawTx) system.ValidationRequest) *MockconservativeStateValidationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconservativeStateValidationCall) DoAndReturn(f func(types.RawTx) system.ValidationRequest) *MockconservativeStateValidationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockVmState is a mock of VmState interface.
type MockVmState struct {
	ctrl     *gomock.Controller
	recorder *MockVmStateMockRecorder
}

// MockVmStateMockRecorder is the mock recorder for MockVmState.
type MockVmStateMockRecorder struct {
	mock *MockVmState
}

// NewMockVmState creates a new mock instance.
func NewMockVmState(ctrl *gomock.Controller) *MockVmState {
	mock := &MockVmState{ctrl: ctrl}
	mock.recorder = &MockVmStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVmState) EXPECT() *MockVmStateMockRecorder {
	return m.recorder
}

// GetAllAccounts mocks base method.
func (m *MockVmState) GetAllAccounts() ([]*types.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts")
	ret0, _ := ret[0].([]*types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockVmStateMockRecorder) GetAllAccounts() *MockVmStateGetAllAccountsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockVmState)(nil).GetAllAccounts))
	return &MockVmStateGetAllAccountsCall{Call: call}
}

// MockVmStateGetAllAccountsCall wrap *gomock.Call
type MockVmStateGetAllAccountsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetAllAccountsCall) Return(arg0 []*types.Account, arg1 error) *MockVmStateGetAllAccountsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetAllAccountsCall) Do(f func() ([]*types.Account, error)) *MockVmStateGetAllAccountsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetAllAccountsCall) DoAndReturn(f func() ([]*types.Account, error)) *MockVmStateGetAllAccountsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBalance mocks base method.
func (m *MockVmState) GetBalance(arg0 types.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockVmStateMockRecorder) GetBalance(arg0 any) *MockVmStateGetBalanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockVmState)(nil).GetBalance), arg0)
	return &MockVmStateGetBalanceCall{Call: call}
}

// MockVmStateGetBalanceCall wrap *gomock.Call
type MockVmStateGetBalanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetBalanceCall) Return(arg0 uint64, arg1 error) *MockVmStateGetBalanceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetBalanceCall) Do(f func(types.Address) (uint64, error)) *MockVmStateGetBalanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetBalanceCall) DoAndReturn(f func(types.Address) (uint64, error)) *MockVmStateGetBalanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLayerApplied mocks base method.
func (m *MockVmState) GetLayerApplied(arg0 types.TransactionID) (types.LayerID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerApplied", arg0)
	ret0, _ := ret[0].(types.LayerID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerApplied indicates an expected call of GetLayerApplied.
func (mr *MockVmStateMockRecorder) GetLayerApplied(arg0 any) *MockVmStateGetLayerAppliedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerApplied", reflect.TypeOf((*MockVmState)(nil).GetLayerApplied), arg0)
	return &MockVmStateGetLayerAppliedCall{Call: call}
}

// MockVmStateGetLayerAppliedCall wrap *gomock.Call
type MockVmStateGetLayerAppliedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetLayerAppliedCall) Return(arg0 types.LayerID, arg1 error) *MockVmStateGetLayerAppliedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetLayerAppliedCall) Do(f func(types.TransactionID) (types.LayerID, error)) *MockVmStateGetLayerAppliedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetLayerAppliedCall) DoAndReturn(f func(types.TransactionID) (types.LayerID, error)) *MockVmStateGetLayerAppliedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLayerStateRoot mocks base method.
func (m *MockVmState) GetLayerStateRoot(arg0 types.LayerID) (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerStateRoot", arg0)
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerStateRoot indicates an expected call of GetLayerStateRoot.
func (mr *MockVmStateMockRecorder) GetLayerStateRoot(arg0 any) *MockVmStateGetLayerStateRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerStateRoot", reflect.TypeOf((*MockVmState)(nil).GetLayerStateRoot), arg0)
	return &MockVmStateGetLayerStateRootCall{Call: call}
}

// MockVmStateGetLayerStateRootCall wrap *gomock.Call
type MockVmStateGetLayerStateRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetLayerStateRootCall) Return(arg0 types.Hash32, arg1 error) *MockVmStateGetLayerStateRootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetLayerStateRootCall) Do(f func(types.LayerID) (types.Hash32, error)) *MockVmStateGetLayerStateRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetLayerStateRootCall) DoAndReturn(f func(types.LayerID) (types.Hash32, error)) *MockVmStateGetLayerStateRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNonce mocks base method.
func (m *MockVmState) GetNonce(arg0 types.Address) (types.Nonce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(types.Nonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockVmStateMockRecorder) GetNonce(arg0 any) *MockVmStateGetNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockVmState)(nil).GetNonce), arg0)
	return &MockVmStateGetNonceCall{Call: call}
}

// MockVmStateGetNonceCall wrap *gomock.Call
type MockVmStateGetNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetNonceCall) Return(arg0 types.Nonce, arg1 error) *MockVmStateGetNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetNonceCall) Do(f func(types.Address) (types.Nonce, error)) *MockVmStateGetNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetNonceCall) DoAndReturn(f func(types.Address) (types.Nonce, error)) *MockVmStateGetNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStateRoot mocks base method.
func (m *MockVmState) GetStateRoot() (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot")
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateRoot indicates an expected call of GetStateRoot.
func (mr *MockVmStateMockRecorder) GetStateRoot() *MockVmStateGetStateRootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MockVmState)(nil).GetStateRoot))
	return &MockVmStateGetStateRootCall{Call: call}
}

// MockVmStateGetStateRootCall wrap *gomock.Call
type MockVmStateGetStateRootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateGetStateRootCall) Return(arg0 types.Hash32, arg1 error) *MockVmStateGetStateRootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateGetStateRootCall) Do(f func() (types.Hash32, error)) *MockVmStateGetStateRootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateGetStateRootCall) DoAndReturn(f func() (types.Hash32, error)) *MockVmStateGetStateRootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validation mocks base method.
func (m *MockVmState) Validation(arg0 types.RawTx) system.ValidationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validation", arg0)
	ret0, _ := ret[0].(system.ValidationRequest)
	return ret0
}

// Validation indicates an expected call of Validation.
func (mr *MockVmStateMockRecorder) Validation(arg0 any) *MockVmStateValidationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validation", reflect.TypeOf((*MockVmState)(nil).Validation), arg0)
	return &MockVmStateValidationCall{Call: call}
}

// MockVmStateValidationCall wrap *gomock.Call
type MockVmStateValidationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVmStateValidationCall) Return(arg0 system.ValidationRequest) *MockVmStateValidationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVmStateValidationCall) Do(f func(types.RawTx) system.ValidationRequest) *MockVmStateValidationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVmStateValidationCall) DoAndReturn(f func(types.RawTx) system.ValidationRequest) *MockVmStateValidationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockconStateCache is a mock of conStateCache interface.
type MockconStateCache struct {
	ctrl     *gomock.Controller
	recorder *MockconStateCacheMockRecorder
}

// MockconStateCacheMockRecorder is the mock recorder for MockconStateCache.
type MockconStateCacheMockRecorder struct {
	mock *MockconStateCache
}

// NewMockconStateCache creates a new mock instance.
func NewMockconStateCache(ctrl *gomock.Controller) *MockconStateCache {
	mock := &MockconStateCache{ctrl: ctrl}
	mock.recorder = &MockconStateCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconStateCache) EXPECT() *MockconStateCacheMockRecorder {
	return m.recorder
}

// GetMempool mocks base method.
func (m *MockconStateCache) GetMempool() map[types.Address][]*NanoTX {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(map[types.Address][]*NanoTX)
	return ret0
}

// GetMempool indicates an expected call of GetMempool.
func (mr *MockconStateCacheMockRecorder) GetMempool() *MockconStateCacheGetMempoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockconStateCache)(nil).GetMempool))
	return &MockconStateCacheGetMempoolCall{Call: call}
}

// MockconStateCacheGetMempoolCall wrap *gomock.Call
type MockconStateCacheGetMempoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockconStateCacheGetMempoolCall) Return(arg0 map[types.Address][]*NanoTX) *MockconStateCacheGetMempoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockconStateCacheGetMempoolCall) Do(f func() map[types.Address][]*NanoTX) *MockconStateCacheGetMempoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockconStateCacheGetMempoolCall) DoAndReturn(f func() map[types.Address][]*NanoTX) *MockconStateCacheGetMempoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
