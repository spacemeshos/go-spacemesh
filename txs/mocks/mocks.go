// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockconservativeState is a mock of conservativeState interface.
type MockconservativeState struct {
	ctrl     *gomock.Controller
	recorder *MockconservativeStateMockRecorder
}

// MockconservativeStateMockRecorder is the mock recorder for MockconservativeState.
type MockconservativeStateMockRecorder struct {
	mock *MockconservativeState
}

// NewMockconservativeState creates a new mock instance.
func NewMockconservativeState(ctrl *gomock.Controller) *MockconservativeState {
	mock := &MockconservativeState{ctrl: ctrl}
	mock.recorder = &MockconservativeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconservativeState) EXPECT() *MockconservativeStateMockRecorder {
	return m.recorder
}

// AddTxToMempool mocks base method.
func (m *MockconservativeState) AddTxToMempool(tx *types.Transaction, checkValidity bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxToMempool", tx, checkValidity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxToMempool indicates an expected call of AddTxToMempool.
func (mr *MockconservativeStateMockRecorder) AddTxToMempool(tx, checkValidity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxToMempool", reflect.TypeOf((*MockconservativeState)(nil).AddTxToMempool), tx, checkValidity)
}

// AddressExists mocks base method.
func (m *MockconservativeState) AddressExists(addr types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MockconservativeStateMockRecorder) AddressExists(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MockconservativeState)(nil).AddressExists), addr)
}
