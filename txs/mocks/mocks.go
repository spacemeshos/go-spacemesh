// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockconservativeState is a mock of conservativeState interface.
type MockconservativeState struct {
	ctrl     *gomock.Controller
	recorder *MockconservativeStateMockRecorder
}

// MockconservativeStateMockRecorder is the mock recorder for MockconservativeState.
type MockconservativeStateMockRecorder struct {
	mock *MockconservativeState
}

// NewMockconservativeState creates a new mock instance.
func NewMockconservativeState(ctrl *gomock.Controller) *MockconservativeState {
	mock := &MockconservativeState{ctrl: ctrl}
	mock.recorder = &MockconservativeStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconservativeState) EXPECT() *MockconservativeStateMockRecorder {
	return m.recorder
}

// AddTxToMemPool mocks base method.
func (m *MockconservativeState) AddTxToMemPool(tx *types.Transaction, checkValidity bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTxToMemPool", tx, checkValidity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTxToMemPool indicates an expected call of AddTxToMemPool.
func (mr *MockconservativeStateMockRecorder) AddTxToMemPool(tx, checkValidity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTxToMemPool", reflect.TypeOf((*MockconservativeState)(nil).AddTxToMemPool), tx, checkValidity)
}

// AddressExists mocks base method.
func (m *MockconservativeState) AddressExists(addr types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MockconservativeStateMockRecorder) AddressExists(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MockconservativeState)(nil).AddressExists), addr)
}

// HasTx mocks base method.
func (m *MockconservativeState) HasTx(arg0 types.TransactionID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTx", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTx indicates an expected call of HasTx.
func (mr *MockconservativeStateMockRecorder) HasTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTx", reflect.TypeOf((*MockconservativeState)(nil).HasTx), arg0)
}

// MocksvmState is a mock of svmState interface.
type MocksvmState struct {
	ctrl     *gomock.Controller
	recorder *MocksvmStateMockRecorder
}

// MocksvmStateMockRecorder is the mock recorder for MocksvmState.
type MocksvmStateMockRecorder struct {
	mock *MocksvmState
}

// NewMocksvmState creates a new mock instance.
func NewMocksvmState(ctrl *gomock.Controller) *MocksvmState {
	mock := &MocksvmState{ctrl: ctrl}
	mock.recorder = &MocksvmStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksvmState) EXPECT() *MocksvmStateMockRecorder {
	return m.recorder
}

// AddressExists mocks base method.
func (m *MocksvmState) AddressExists(arg0 types.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AddressExists indicates an expected call of AddressExists.
func (mr *MocksvmStateMockRecorder) AddressExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressExists", reflect.TypeOf((*MocksvmState)(nil).AddressExists), arg0)
}

// ApplyLayer mocks base method.
func (m *MocksvmState) ApplyLayer(arg0 types.LayerID, arg1 []*types.Transaction, arg2 map[types.Address]uint64) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyLayer", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyLayer indicates an expected call of ApplyLayer.
func (mr *MocksvmStateMockRecorder) ApplyLayer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyLayer", reflect.TypeOf((*MocksvmState)(nil).ApplyLayer), arg0, arg1, arg2)
}

// GetAllAccounts mocks base method.
func (m *MocksvmState) GetAllAccounts() (*types.MultipleAccountsState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts")
	ret0, _ := ret[0].(*types.MultipleAccountsState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MocksvmStateMockRecorder) GetAllAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MocksvmState)(nil).GetAllAccounts))
}

// GetBalance mocks base method.
func (m *MocksvmState) GetBalance(arg0 types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MocksvmStateMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MocksvmState)(nil).GetBalance), arg0)
}

// GetLayerApplied mocks base method.
func (m *MocksvmState) GetLayerApplied(arg0 types.TransactionID) *types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerApplied", arg0)
	ret0, _ := ret[0].(*types.LayerID)
	return ret0
}

// GetLayerApplied indicates an expected call of GetLayerApplied.
func (mr *MocksvmStateMockRecorder) GetLayerApplied(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerApplied", reflect.TypeOf((*MocksvmState)(nil).GetLayerApplied), arg0)
}

// GetLayerStateRoot mocks base method.
func (m *MocksvmState) GetLayerStateRoot(arg0 types.LayerID) (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerStateRoot", arg0)
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerStateRoot indicates an expected call of GetLayerStateRoot.
func (mr *MocksvmStateMockRecorder) GetLayerStateRoot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerStateRoot", reflect.TypeOf((*MocksvmState)(nil).GetLayerStateRoot), arg0)
}

// GetNonce mocks base method.
func (m *MocksvmState) GetNonce(arg0 types.Address) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MocksvmStateMockRecorder) GetNonce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MocksvmState)(nil).GetNonce), arg0)
}

// GetStateRoot mocks base method.
func (m *MocksvmState) GetStateRoot() types.Hash32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateRoot")
	ret0, _ := ret[0].(types.Hash32)
	return ret0
}

// GetStateRoot indicates an expected call of GetStateRoot.
func (mr *MocksvmStateMockRecorder) GetStateRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateRoot", reflect.TypeOf((*MocksvmState)(nil).GetStateRoot))
}

// Rewind mocks base method.
func (m *MocksvmState) Rewind(arg0 types.LayerID) (types.Hash32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rewind", arg0)
	ret0, _ := ret[0].(types.Hash32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rewind indicates an expected call of Rewind.
func (mr *MocksvmStateMockRecorder) Rewind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rewind", reflect.TypeOf((*MocksvmState)(nil).Rewind), arg0)
}

// MockconStateCache is a mock of conStateCache interface.
type MockconStateCache struct {
	ctrl     *gomock.Controller
	recorder *MockconStateCacheMockRecorder
}

// MockconStateCacheMockRecorder is the mock recorder for MockconStateCache.
type MockconStateCacheMockRecorder struct {
	mock *MockconStateCache
}

// NewMockconStateCache creates a new mock instance.
func NewMockconStateCache(ctrl *gomock.Controller) *MockconStateCache {
	mock := &MockconStateCache{ctrl: ctrl}
	mock.recorder = &MockconStateCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconStateCache) EXPECT() *MockconStateCacheMockRecorder {
	return m.recorder
}

// GetMempool mocks base method.
func (m *MockconStateCache) GetMempool() (map[types.Address][]*types.NanoTX, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMempool")
	ret0, _ := ret[0].(map[types.Address][]*types.NanoTX)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMempool indicates an expected call of GetMempool.
func (mr *MockconStateCacheMockRecorder) GetMempool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMempool", reflect.TypeOf((*MockconStateCache)(nil).GetMempool))
}

// MocktxProvider is a mock of txProvider interface.
type MocktxProvider struct {
	ctrl     *gomock.Controller
	recorder *MocktxProviderMockRecorder
}

// MocktxProviderMockRecorder is the mock recorder for MocktxProvider.
type MocktxProviderMockRecorder struct {
	mock *MocktxProvider
}

// NewMocktxProvider creates a new mock instance.
func NewMocktxProvider(ctrl *gomock.Controller) *MocktxProvider {
	mock := &MocktxProvider{ctrl: ctrl}
	mock.recorder = &MocktxProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktxProvider) EXPECT() *MocktxProviderMockRecorder {
	return m.recorder
}

// add mocks base method.
func (m *MocktxProvider) add(arg0 *types.Transaction, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// add indicates an expected call of add.
func (mr *MocktxProviderMockRecorder) add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "add", reflect.TypeOf((*MocktxProvider)(nil).add), arg0, arg1)
}

// addToBlock mocks base method.
func (m *MocktxProvider) addToBlock(arg0 types.LayerID, arg1 types.BlockID, arg2 []types.TransactionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addToBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// addToBlock indicates an expected call of addToBlock.
func (mr *MocktxProviderMockRecorder) addToBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addToBlock", reflect.TypeOf((*MocktxProvider)(nil).addToBlock), arg0, arg1, arg2)
}

// addToProposal mocks base method.
func (m *MocktxProvider) addToProposal(arg0 types.LayerID, arg1 types.ProposalID, arg2 []types.TransactionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addToProposal", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// addToProposal indicates an expected call of addToProposal.
func (mr *MocktxProviderMockRecorder) addToProposal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addToProposal", reflect.TypeOf((*MocktxProvider)(nil).addToProposal), arg0, arg1, arg2)
}

// applyLayer mocks base method.
func (m *MocktxProvider) applyLayer(arg0 types.LayerID, arg1 types.BlockID, arg2, arg3 []types.TransactionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "applyLayer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// applyLayer indicates an expected call of applyLayer.
func (mr *MocktxProviderMockRecorder) applyLayer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "applyLayer", reflect.TypeOf((*MocktxProvider)(nil).applyLayer), arg0, arg1, arg2, arg3)
}

// discard4Ever mocks base method.
func (m *MocktxProvider) discard4Ever(arg0 types.TransactionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "discard4Ever", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// discard4Ever indicates an expected call of discard4Ever.
func (mr *MocktxProviderMockRecorder) discard4Ever(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "discard4Ever", reflect.TypeOf((*MocktxProvider)(nil).discard4Ever), arg0)
}

// get mocks base method.
func (m *MocktxProvider) get(arg0 types.TransactionID) (*types.MeshTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "get", arg0)
	ret0, _ := ret[0].(*types.MeshTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// get indicates an expected call of get.
func (mr *MocktxProviderMockRecorder) get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MocktxProvider)(nil).get), arg0)
}

// getAcctPending mocks base method.
func (m *MocktxProvider) getAcctPending(arg0 types.Address) ([]*types.MeshTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAcctPending", arg0)
	ret0, _ := ret[0].([]*types.MeshTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAcctPending indicates an expected call of getAcctPending.
func (mr *MocktxProviderMockRecorder) getAcctPending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAcctPending", reflect.TypeOf((*MocktxProvider)(nil).getAcctPending), arg0)
}

// getAllPending mocks base method.
func (m *MocktxProvider) getAllPending() ([]*types.MeshTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllPending")
	ret0, _ := ret[0].([]*types.MeshTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllPending indicates an expected call of getAllPending.
func (mr *MocktxProviderMockRecorder) getAllPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllPending", reflect.TypeOf((*MocktxProvider)(nil).getAllPending))
}

// getBlob mocks base method.
func (m *MocktxProvider) getBlob(arg0 types.TransactionID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBlob", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getBlob indicates an expected call of getBlob.
func (mr *MocktxProviderMockRecorder) getBlob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBlob", reflect.TypeOf((*MocktxProvider)(nil).getBlob), arg0)
}

// getByAddress mocks base method.
func (m *MocktxProvider) getByAddress(arg0, arg1 types.LayerID, arg2 types.Address) ([]*types.MeshTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*types.MeshTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getByAddress indicates an expected call of getByAddress.
func (mr *MocktxProviderMockRecorder) getByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getByAddress", reflect.TypeOf((*MocktxProvider)(nil).getByAddress), arg0, arg1, arg2)
}

// has mocks base method.
func (m *MocktxProvider) has(arg0 types.TransactionID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// has indicates an expected call of has.
func (mr *MocktxProviderMockRecorder) has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "has", reflect.TypeOf((*MocktxProvider)(nil).has), arg0)
}

// setNextLayerBlock mocks base method.
func (m *MocktxProvider) setNextLayerBlock(arg0 types.TransactionID, arg1 types.LayerID) (types.LayerID, types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setNextLayerBlock", arg0, arg1)
	ret0, _ := ret[0].(types.LayerID)
	ret1, _ := ret[1].(types.BlockID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// setNextLayerBlock indicates an expected call of setNextLayerBlock.
func (mr *MocktxProviderMockRecorder) setNextLayerBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setNextLayerBlock", reflect.TypeOf((*MocktxProvider)(nil).setNextLayerBlock), arg0, arg1)
}

// undoApply mocks base method.
func (m *MocktxProvider) undoApply(arg0 types.LayerID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "undoApply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// undoApply indicates an expected call of undoApply.
func (mr *MocktxProviderMockRecorder) undoApply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "undoApply", reflect.TypeOf((*MocktxProvider)(nil).undoApply), arg0)
}
