// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/spacemeshos/go-spacemesh/common/types"
)

// MockblockDataProvider is a mock of blockDataProvider interface.
type MockblockDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockblockDataProviderMockRecorder
}

// MockblockDataProviderMockRecorder is the mock recorder for MockblockDataProvider.
type MockblockDataProviderMockRecorder struct {
	mock *MockblockDataProvider
}

// NewMockblockDataProvider creates a new mock instance.
func NewMockblockDataProvider(ctrl *gomock.Controller) *MockblockDataProvider {
	mock := &MockblockDataProvider{ctrl: ctrl}
	mock.recorder = &MockblockDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockblockDataProvider) EXPECT() *MockblockDataProviderMockRecorder {
	return m.recorder
}

// ContextualValidity mocks base method.
func (m *MockblockDataProvider) ContextualValidity(arg0 types.BlockID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContextualValidity", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContextualValidity indicates an expected call of ContextualValidity.
func (mr *MockblockDataProviderMockRecorder) ContextualValidity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContextualValidity", reflect.TypeOf((*MockblockDataProvider)(nil).ContextualValidity), arg0)
}

// GetBlock mocks base method.
func (m *MockblockDataProvider) GetBlock(arg0 types.BlockID) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockblockDataProviderMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockblockDataProvider)(nil).GetBlock), arg0)
}

// GetCoinflip mocks base method.
func (m *MockblockDataProvider) GetCoinflip(arg0 context.Context, arg1 types.LayerID) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinflip", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCoinflip indicates an expected call of GetCoinflip.
func (mr *MockblockDataProviderMockRecorder) GetCoinflip(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinflip", reflect.TypeOf((*MockblockDataProvider)(nil).GetCoinflip), arg0, arg1)
}

// GetLayerInputVectorByID mocks base method.
func (m *MockblockDataProvider) GetLayerInputVectorByID(arg0 types.LayerID) ([]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLayerInputVectorByID", arg0)
	ret0, _ := ret[0].([]types.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLayerInputVectorByID indicates an expected call of GetLayerInputVectorByID.
func (mr *MockblockDataProviderMockRecorder) GetLayerInputVectorByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLayerInputVectorByID", reflect.TypeOf((*MockblockDataProvider)(nil).GetLayerInputVectorByID), arg0)
}

// LayerBlockIds mocks base method.
func (m *MockblockDataProvider) LayerBlockIds(arg0 types.LayerID) ([]types.BlockID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerBlockIds", arg0)
	ret0, _ := ret[0].([]types.BlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerBlockIds indicates an expected call of LayerBlockIds.
func (mr *MockblockDataProviderMockRecorder) LayerBlockIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerBlockIds", reflect.TypeOf((*MockblockDataProvider)(nil).LayerBlockIds), arg0)
}

// LayerBlocks mocks base method.
func (m *MockblockDataProvider) LayerBlocks(arg0 types.LayerID) ([]*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerBlocks", arg0)
	ret0, _ := ret[0].([]*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerBlocks indicates an expected call of LayerBlocks.
func (mr *MockblockDataProviderMockRecorder) LayerBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerBlocks", reflect.TypeOf((*MockblockDataProvider)(nil).LayerBlocks), arg0)
}

// LayerContextuallyValidBlocks mocks base method.
func (m *MockblockDataProvider) LayerContextuallyValidBlocks(arg0 context.Context, arg1 types.LayerID) (map[types.BlockID]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerContextuallyValidBlocks", arg0, arg1)
	ret0, _ := ret[0].(map[types.BlockID]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayerContextuallyValidBlocks indicates an expected call of LayerContextuallyValidBlocks.
func (mr *MockblockDataProviderMockRecorder) LayerContextuallyValidBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerContextuallyValidBlocks", reflect.TypeOf((*MockblockDataProvider)(nil).LayerContextuallyValidBlocks), arg0, arg1)
}

// SaveContextualValidity mocks base method.
func (m *MockblockDataProvider) SaveContextualValidity(arg0 types.BlockID, arg1 types.LayerID, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContextualValidity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContextualValidity indicates an expected call of SaveContextualValidity.
func (mr *MockblockDataProviderMockRecorder) SaveContextualValidity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContextualValidity", reflect.TypeOf((*MockblockDataProvider)(nil).SaveContextualValidity), arg0, arg1, arg2)
}
