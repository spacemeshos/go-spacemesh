# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  # concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 1

  # Include test files or not.
  # Default: true
  tests: true

  # List of build tags, all linters use it.
  # Default: [].
  # build-tags:
  #   - mytag

  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib
  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  skip-dirs-use-default: false

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  skip-files:
    - "^mock_*\\.go$"

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  # go: '1.19'

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# All available settings of specific linters.
linters-settings:
  staticcheck:
    # SAxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: ["all"]

  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`.
    # Such cases aren't reported by default.
    # Default: false
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`.
    # Such cases aren't reported by default.
    # Default: false
    check-blank: true

  govet:
    # Report about shadowed variables.
    # Default: false
    check-shadowing: false
    # Disable all analyzers.
    # Default: false
    disable-all: false
    # Enable analyzers by name (in addition to default).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    # enable:
    # Enable all analyzers.
    # Default: false
    enable-all: false
    # Disable analyzers by name.
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    # disable:

  revive:
    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    confidence: 0.8

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    simplify: true

    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: "interface{}"
        replacement: "any"
      - pattern: "a[b:len(a)]"
        replacement: "a[b:]"

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 10

  goconst:
    # Minimal length of string constant.
    # Default: 3
    min-len: 3

    # Minimum occurrences of constant string count to trigger issue.
    # Default: 3
    min-occurrences: 3

  depguard:
    # Kind of list is passed in.
    # Allowed values: allowlist|denylist
    # Default: denylist
    list-type: denylist

    # Check the list against standard lib.
    # Default: false
    include-go-root: true

    # A list of packages for the list type specified.
    # Can accept both string prefixes and string glob patterns.
    # Default: []
    packages:
      - "io/ioutil"
      - "github.com/pkg/errors"
      - "golang.org/x/xerrors"
      - "golang.org/x/net/context"
      - "golang.org/x/crypto/ed25519"

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US

  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 120
    # Tab width in spaces.
    # Default: 1
    tab-width: 4

  nakedret:
    # Make an issue if func has more lines of code than this setting, and it has naked returns.
    # Default: 30
    max-func-lines: 30

  prealloc:
    # IMPORTANT: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # Default: true
    simple: true
    # Report pre-allocation suggestions on range loops.
    # Default: true
    range-loops: true
    # Report pre-allocation suggestions on for loops.
    # Default: false
    for-loops: true

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard
      - default
      - prefix(github.com/spacemeshos/go-spacemesh)

  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: false
    # Do not allow non-required aliases.
    # Default: false
    no-extra-aliases: false
    # List of aliases
    # Default: []
    alias:
      - pkg: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"
        alias: chaos
      - pkg: "github.com/hashicorp/golang-lru/v2"
        alias: lru
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware"
        alias: grpcmw
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
        alias: grpczap
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware/tags"
        alias: grpctags
      - pkg: "github.com/libp2p/go-libp2p-pubsub"
        alias: pubsub
      - pkg: "github.com/libp2p/go-libp2p-pubsub/pb"
        alias: pb
      - pkg: "github.com/libp2p/go-libp2p/p2p/net/mock"
        alias: mocknet
      - pkg: "github.com/libp2p/go-libp2p-testing/netutil"
        alias: p2putil
      - pkg: "github.com/multiformats/go-multiaddr"
        alias: ma
      - pkg: "github.com/multiformats/go-multiaddr/net"
        alias: manet
      - pkg: "github.com/spacemeshos/api/release/go/spacemesh/v1"
        alias: pb
      - pkg: "github.com/spacemeshos/go-spacemesh/genvm"
        alias: vm
      - pkg: "github.com/spacemeshos/go-spacemesh/p2p/metrics"
        alias: p2pmetrics
      - pkg: "github.com/spacemeshos/go-spacemesh/sql/proposals"
        alias: dbproposals
      - pkg: "github.com/spacemeshos/go-spacemesh/sql/metrics"
        alias: dbmetrics
      - pkg: "github.com/spacemeshos/go-spacemesh/txs/types"
        alias: txtypes
      - pkg: "google.golang.org/genproto/googleapis/rpc/status"
        alias: rpcstatus
      - pkg: "k8s.io/apimachinery/pkg/apis/meta/v1"
        alias: apimetav1
      - pkg: "k8s.io/api/apps/v1"
        alias: apiappsv1
      - pkg: "k8s.io/api/core/v1"
        alias: apiv1
      - pkg: "k8s.io/client-go/applyconfigurations/apps/v1"
        alias: appsv1
      - pkg: "k8s.io/client-go/applyconfigurations/core/v1"
        alias: corev1
      - pkg: "k8s.io/client-go/applyconfigurations/meta/v1"
        alias: metav1

  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    scope: declarations
    # List of regexps for excluding particular comment lines from check.
    # Default: []
    exclude:
      # Exclude todo and fixme comments.
      - "^FIXME:"
      - "^TODO:"
    # Check that each sentence ends with a period.
    # Default: true
    period: true
    # Check that each sentence starts with a capital letter.
    # Default: false
    capital: false

  gofumpt:
    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: false

  gosec:
    # To select a subset of rules to run.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: [] - means include all rules
    # includes:
    # To specify a set of rules to explicitly exclude.
    # Available rules: https://github.com/securego/gosec#available-rules
    # Default: []
    # excludes:
    # Exclude generated files
    # Default: false
    exclude-generated: false
    # Filter out the issues with a lower severity than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    severity: medium
    # Filter out the issues with a lower confidence than the given value.
    # Valid options are: low, medium, high.
    # Default: low
    confidence: medium
    # Concurrency value.
    # Default: the number of logical CPUs usable by the current process.
    concurrency: 12

  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: true
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: true

  wrapcheck:
    # An array of strings that specify substrings of signatures to ignore.
    # If this set, it will override the default set of ignored signatures.
    # See https://github.com/tomarrell/wrapcheck#configuration for more information.
    # Default: [".Errorf(", "errors.New(", "errors.Unwrap(", ".Wrap(", ".Wrapf(", ".WithMessage(", ".WithMessagef(", ".WithStack("]
    ignoreSigs:
      - .Errorf(
      - errors.New(
      - .WithMessage(
      - .WithMessagef(
      - .WithStack(

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - gci
    - importas
    - govet
    - godot
    - gofmt
    - gofumpt
    - revive
    - misspell
    - staticcheck
    - unused
    - ineffassign
    - typecheck
    - nakedret
    - depguard
    - goconst
    # - whitespace
    # - wrapcheck
    # - errcheck
    # - gosec
    # - nakedret
    # - gocyclo
    # - lll
    # - prealloc
  
  # Enable all available linters.
  # Default: false
  enable-all: false

  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  # disable:
    
  # Run only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  fast: false

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  # exclude:

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - linters:
        - staticcheck
      text: SA1019

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true.
  exclude-use-default: false

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false.
  new: false
