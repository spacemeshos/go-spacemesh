# This file contains all available configuration options
# with their default values (in comments).
#
# This file is not a configuration example,
# it contains the exhaustive configuration with explanations of the options.

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    # - asasalint
    # - asciicheck
    # - bidichk
    # - bodyclose
    - canonicalheader
    # - containedctx
    # - contextcheck
    - copyloopvar
    # - cyclop
    # - decorder
    - depguard
    # - dogsled
    # - dupl
    # - dupword
    # - durationcheck
    # - err113
    # - errcheck
    # - errchkjson
    # - errname
    # - errorlint
    # - execinquery
    # - exhaustive
    # - exhaustruct
    # - exportloopref
    - fatcontext
    # - forbidigo
    # - forcetypeassert
    # - funlen
    - gci
    # - ginkgolinter
    # - gocheckcompilerdirectives
    # - gochecknoglobals
    # - gochecknoinits
    - gochecksumtype
    # - gocognit
    # - goconst
    # - gocritic
    # - gocyclo
    - godot
    # - godox
    - gofmt
    - gofumpt
    # - goheader
    # - goimports
    # - gomoddirectives
    # - gomodguard
    # - goprintffuncname
    # - gosec
    - gosimple
    # - gosmopolitan
    - govet
    # - grouper
    - importas
    # - inamedparam
    - ineffassign
    # - interfacebloat
    # - intrange
    # - ireturn
    - lll
    # - loggercheck
    # - maintidx
    # - makezero
    # - mirror
    - misspell
    # - mnd
    # - musttag
    - nakedret
    - nestif
    # - nilerr
    # - nilnil
    # - nlreturn
    # - noctx
    # - nolintlint
    # - nonamedreturns
    # - nosprintfhostport
    # - paralleltest
    - perfsprint
    # - prealloc
    # - predeclared
    # - promlinter
    # - protogetter
    # - reassign
    - revive
    # - rowserrcheck
    # - sloglint
    - spancheck
    # - sqlclosecheck
    - staticcheck
    # - stylecheck
    # - tagalign
    # - tagliatelle
    # - tenv
    # - testableexamples
    - testifylint
    # - testpackage
    # - thelper
    # - tparallel
    # - unconvert
    # - unparam
    - unused
    - usestdlibvars
    # - varnamelen
    # - wastedassign
    # - whitespace
    # - wrapcheck
    # - wsl
    # - zerologlint

  # Enable all available linters.
  # Default: false
  # enable-all: true
  # Disable specific linter
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  # disable:
  #   - asasalint
  #   - asciicheck
  #   - bidichk
  #   - bodyclose
  #   - canonicalheader
  #   - containedctx
  #   - contextcheck
  #   - copyloopvar
  #   - cyclop
  #   - decorder
  #   - depguard
  #   - dogsled
  #   - dupl
  #   - dupword
  #   - durationcheck
  #   - err113
  #   - errcheck
  #   - errchkjson
  #   - errname
  #   - errorlint
  #   - execinquery
  #   - exhaustive
  #   - exhaustruct
  #   - exportloopref
  #   - fatcontext
  #   - forbidigo
  #   - forcetypeassert
  #   - funlen
  #   - gci
  #   - ginkgolinter
  #   - gocheckcompilerdirectives
  #   - gochecknoglobals
  #   - gochecknoinits
  #   - gochecksumtype
  #   - gocognit
  #   - goconst
  #   - gocritic
  #   - gocyclo
  #   - godot
  #   - godox
  #   - gofmt
  #   - gofumpt
  #   - goheader
  #   - goimports
  #   - gomoddirectives
  #   - gomodguard
  #   - goprintffuncname
  #   - gosec
  #   - gosimple
  #   - gosmopolitan
  #   - govet
  #   - grouper
  #   - importas
  #   - inamedparam
  #   - ineffassign
  #   - interfacebloat
  #   - intrange
  #   - ireturn
  #   - lll
  #   - loggercheck
  #   - maintidx
  #   - makezero
  #   - mirror
  #   - misspell
  #   - mnd
  #   - musttag
  #   - nakedret
  #   - nestif
  #   - nilerr
  #   - nilnil
  #   - nlreturn
  #   - noctx
  #   - nolintlint
  #   - nonamedreturns
  #   - nosprintfhostport
  #   - paralleltest
  #   - perfsprint
  #   - prealloc
  #   - predeclared
  #   - promlinter
  #   - protogetter
  #   - reassign
  #   - revive
  #   - rowserrcheck
  #   - sloglint
  #   - spancheck
  #   - sqlclosecheck
  #   - staticcheck
  #   - stylecheck
  #   - tagalign
  #   - tagliatelle
  #   - tenv
  #   - testableexamples
  #   - testifylint
  #   - testpackage
  #   - thelper
  #   - tparallel
  #   - unconvert
  #   - unparam
  #   - unused
  #   - usestdlibvars
  #   - varnamelen
  #   - wastedassign
  #   - whitespace
  #   - wrapcheck
  #   - wsl
  #   - zerologlint
  #   - deadcode # Deprecated
  #   - exhaustivestruct # Deprecated
  #   - golint # Deprecated
  #   - ifshort # Deprecated
  #   - interfacer # Deprecated
  #   - maligned # Deprecated
  #   - gomnd # Deprecated
  #   - nosnakecase # Deprecated
  #   - scopelint # Deprecated
  #   - structcheck # Deprecated
  #   - varcheck # Deprecated

  # Enable presets.
  # https://golangci-lint.run/usage/linters
  # Default: []
  # presets:
  #   - bugs
  #   - comment
  #   - complexity
  #   - error
  #   - format
  #   - import
  #   - metalinter
  #   - module
  #   - performance
  #   - sql
  #   - style
  #   - test
  #   - unused

  # Enable only fast linters from enabled linters set (first run won't be fast)
  # Default: false
  # fast: true


# All available settings of specific linters.
linters-settings:
  copyloopvar:
    # Check all assigning the loop variable to another variable.
    # Default: false
    check-alias: true

  depguard:
    # Rules to apply.
    #
    # Variables:
    # - File Variables
    #   you can still use and exclamation mark ! in front of a variable to say not to use it.
    #   Example !$test will match any file that is not a go test file.
    #
    #   `$all` - matches all go files
    #   `$test` - matches all go test files
    #
    # - Package Variables
    #
    #  `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)
    #
    # Default: Only allow $gostd in all files.
    rules:
      # Name of a rule.
      main:
        # Used to determine the package matching priority.
        # There are three different modes: `original`, `strict`, and `lax`.
        # Default: "original"
        # list-mode: lax
        # List of file globs that will match this list of settings to compare against.
        # Default: $all
        # files:
        #   - "!**/*_a _file.go"
        # List of allowed packages.
        # allow:
        #   - $gostd
        #   - github.com/OpenPeeDeeP
        # Packages that are not allowed where the value is a suggestion.
        deny:
          - pkg: "io/ioutil"
            desc: Use os instead
          - pkg: "github.com/pkg/errors"
            desc: Should be replaced by standard lib errors package
          - pkg: "golang.org/x/xerrors"
            desc: Should be replaced by standard lib errors package
          - pkg: "golang.org/x/net/context"
            desc: Should be replaced by standard lib context package
          - pkg: "golang.org/x/crypto/ed25519"
            desc: Should be replaced by standard lib ed25519 package

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard                                    # Standard section: captures all standard packages.
      - default                                     # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/spacemeshos/go-spacemesh) # Custom section: groups all imports with the specified Prefix.
      # - blank                                     # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      # - dot                                       # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      # - alias                                     # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      # - localmodule                               # Local module section: contains all local packages. This section is not present unless explicitly enabled.

    # Skip generated files.
    # Default: true
    # skip-generated: false

    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    # custom-order: true

    # Drops lexical ordering for custom sections.
    # Default: false
    # no-lex-order: true

  godot:
    # Comments to be checked: `declarations`, `toplevel`, or `all`.
    # Default: declarations
    # scope: toplevel
    # List of regexps for excluding particular comment lines from check.
    # Default: []
    exclude:
      # Exclude todo and fixme comments.
      - "^fixme:"
      - "^todo:"
    # Check that each sentence ends with a period.
    # Default: true
    # period: false
    # Check that each sentence starts with a capital letter.
    # Default: false
    # capital: true

  gofmt:
    # Simplify code: gofmt with `-s` option.
    # Default: true
    # simplify: false
    # Apply the rewrite rules to the source before reformatting.
    # https://pkg.go.dev/cmd/gofmt
    # Default: []
    rewrite-rules:
      - pattern: 'interface{}'
        replacement: 'any'
      - pattern: 'a[b:len(a)]'
        replacement: 'a[b:]'

  gofumpt:
    # Module path which contains the source code being formatted.
    # Default: ""
    # module-path: github.com/org/project

    # Choose whether to use the extra rules.
    # Default: false
    extra-rules: true

  gosimple:
    # Sxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: [ "all" ]

  importas:
    # Do not allow unaliased imports of aliased packages.
    # Default: false
    no-unaliased: true
    # Do not allow non-required aliases.
    # Default: false
    # no-extra-aliases: true
    # List of aliases
    # Default: []
    alias:
      - pkg: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1"
        alias: chaos
      - pkg: "github.com/hashicorp/golang-lru/v2"
        alias: lru
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware"
        alias: grpcmw
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware/logging/zap"
        alias: grpczap
      - pkg: "github.com/grpc-ecosystem/go-grpc-middleware/tags"
        alias: grpctags
      - pkg: "github.com/libp2p/go-libp2p-pubsub"
        alias: pubsub
      - pkg: "github.com/libp2p/go-libp2p-pubsub/pb"
        alias: pubsubpb
      - pkg: "github.com/libp2p/go-libp2p/p2p/net/mock"
        alias: mocknet
      - pkg: "github.com/libp2p/go-libp2p-testing/netutil"
        alias: p2putil
      - pkg: "github.com/multiformats/go-multiaddr"
        alias: ma
      - pkg: "github.com/multiformats/go-multiaddr/net"
        alias: manet
      - pkg: "github.com/spacemeshos/api/release/go/spacemesh/v1"
        alias: pb
      - pkg: "github.com/spacemeshos/go-spacemesh/genvm"
        alias: vm
      - pkg: "github.com/spacemeshos/go-spacemesh/p2p/metrics"
        alias: p2pmetrics
      - pkg: "github.com/spacemeshos/go-spacemesh/sql/metrics"
        alias: dbmetrics
      - pkg: "github.com/spacemeshos/go-spacemesh/txs/types"
        alias: txtypes
      - pkg: "google.golang.org/genproto/googleapis/rpc/status"
        alias: rpcstatus
      - pkg: "k8s.io/apimachinery/pkg/apis/meta/v1"
        alias: apimetav1
      - pkg: "k8s.io/api/apps/v1"
        alias: apiappsv1
      - pkg: "k8s.io/api/core/v1"
        alias: apiv1
      - pkg: "k8s.io/client-go/applyconfigurations/apps/v1"
        alias: appsv1
      - pkg: "k8s.io/client-go/applyconfigurations/core/v1"
        alias: corev1
      - pkg: "k8s.io/client-go/applyconfigurations/meta/v1"
        alias: metav1

  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 120
    # Tab width in spaces.
    # Default: 1
    tab-width: 4

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    # Default is to use a neutral variety of English.
    locale: US
    # Typos to ignore.
    # Should be in lower case.
    # Default: []
    # ignore-words:
    #   - someword
    # Extra word corrections.
    # `typo` and `correction` should only contain letters.
    # The words are case-insensitive.
    # Default: []
    extra-words:
      - typo: "iff"
        correction: "if"
      - typo: "cancelation"
        correction: "cancellation"
    # Mode of the analysis:
    # - default: checks all the file content.
    # - restricted: checks only comments.
    # Default: ""
    mode: restricted

  nestif:
    # Minimal complexity of if statements to report.
    # Default: 5
    min-complexity: 15

  perfsprint:
    # Optimizes even if it requires an int or uint type cast.
    # Default: true
    # int-conversion: false
    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.
    # Default: false
    err-error: true
    # Optimizes `fmt.Errorf`.
    # Default: true
    # errorf: false
    # Optimizes `fmt.Sprintf` with only one argument.
    # Default: true
    # sprintf1: false
    # Optimizes into strings concatenation.
    # Default: true
    strconcat: false

  revive:
    # Maximum number of open files at the same time.
    # See https://github.com/mgechev/revive#command-line-flags
    # Defaults to unlimited.
    max-open-files: 2048

    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    # Default: false
    ignore-generated-header: true

    # Sets the default severity.
    # See https://github.com/mgechev/revive#configuration
    # Default: warning
    # severity: error

    # Enable all available rules.
    # Default: false
    # enable-all-rules: true

    # Sets the default failure confidence.
    # This means that linting errors with less than 0.8 confidence will be ignored.
    # Default: 0.8
    # confidence: 0.1

  spancheck:
    # Checks to enable.
    # Options include:
    # - `end`: check that `span.End()` is called
    # - `record-error`: check that `span.RecordError(err)` is called when an error is returned
    # - `set-status`: check that `span.SetStatus(codes.Error, msg)` is called when an error is returned
    # Default: ["end"]
    checks:
      - end
      - record-error
      - set-status
    # A list of regexes for function signatures that silence `record-error` and `set-status` reports
    # if found in the call path to a returned error.
    # https://github.com/jjti/go-spancheck#ignore-check-signatures
    # Default: []
    ignore-check-signatures:
      - "telemetry.RecordError"
    # A list of regexes for additional function signatures that create spans.
    # This is useful if you have a utility method to create spans.
    # Each entry should be of the form `<regex>:<telemetry-type>`, where `telemetry-type` can be `opentelemetry` or `opencensus`.
    # https://github.com/jjti/go-spancheck#extra-start-span-signatures
    # Default: []
    # extra-start-span-signatures:
    #   - "github.com/user/repo/telemetry/trace.Start:opentelemetry"
  staticcheck:
    # SAxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    # Default: ["*"]
    checks: [ "all" ]

  testifylint:
    # Enable all checkers (https://github.com/Antonboom/testifylint#checkers).
    # Default: false
    enable-all: true
    # Disable checkers by name
    # (in addition to default
    #   suite-thelper
    # ).
    # disable:
    #   - blank-import
    #   - bool-compare
    #   - compares
    #   - empty
    #   - error-is-as
    #   - error-nil
    #   - expected-actual
    #   - float-compare
    #   - formatter
    #   - go-require
    #   - len
    #   - negative-positive
    #   - nil-compare
    #   - require-error
    #   - suite-broken-parallel
    #   - suite-dont-use-pkg
    #   - suite-extra-assert-call
    #   - suite-subtest-run
    #   - suite-thelper
    #   - useless-assert

    # Disable all checkers (https://github.com/Antonboom/testifylint#checkers).
    # Default: false
    # disable-all: true
    # Enable checkers by name
    # (in addition to default
    #   blank-import, bool-compare, compares, empty, error-is-as, error-nil, expected-actual, go-require, float-compare,
    #   formatter, len, negative-positive, nil-compare, require-error, suite-broken-parallel, suite-dont-use-pkg,
    #   suite-extra-assert-call, suite-subtest-run, useless-assert
    # ).
    # enable:
    #   - blank-import
    #   - bool-compare
    #   - compares
    #   - empty
    #   - error-is-as
    #   - error-nil
    #   - expected-actual
    #   - float-compare
    #   - formatter
    #   - go-require
    #   - len
    #   - negative-positive
    #   - nil-compare
    #   - require-error
    #   - suite-broken-parallel
    #   - suite-dont-use-pkg
    #   - suite-extra-assert-call
    #   - suite-subtest-run
    #   - suite-thelper
    #   - useless-assert

  usestdlibvars:
    # Suggest the use of http.MethodXX.
    # Default: true
    http-method: false
    # Suggest the use of http.StatusXX.
    # Default: true
    http-status-code: false
    # Suggest the use of time.Weekday.String().
    # Default: true
    time-weekday: true
    # Suggest the use of time.Month.String().
    # Default: false
    time-month: true
    # Suggest the use of time.Layout.
    # Default: false
    time-layout: true
    # Suggest the use of crypto.Hash.String().
    # Default: false
    crypto-hash: true
    # Suggest the use of rpc.DefaultXXPath.
    # Default: false
    default-rpc-path: true
    # Suggest the use of sql.LevelXX.String().
    # Default: false
    sql-isolation-level: true
    # Suggest the use of tls.SignatureScheme.String().
    # Default: false
    tls-signature-scheme: true
    # Suggest the use of constant.Kind.String().
    # Default: false
    constant-kind: true

  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: false
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    # post-statements-are-reads: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: false
    # Mark all function parameters as used.
    # default: true
    # parameters-are-used: false
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: false
    # Mark all identifiers inside generated files as used.
    # Default: true
    # generated-is-used: false

issues:
  # List of regexps of issue texts to exclude.
  #
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`.
  # To list all excluded by default patterns execute `golangci-lint run --help`
  #
  # Default: https://golangci-lint.run/usage/false-positives/#default-exclusions
  # exclude:
  #   - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  # exclude-rules:
  #   # Exclude some linters from running on tests files.
  #   - path: _test\.go
  #     linters:
  #       - gocyclo
  #       - errcheck
  #       - dupl
  #       - gosec

  #   # Run some linter only for test files by excluding its issues for everything else.
  #   - path-except: _test\.go
  #     linters:
  #       - forbidigo

  #   # Exclude known linters from partially hard-vendored code,
  #   # which is impossible to exclude via `nolint` comments.
  #   # `/` will be replaced by current OS file path separator to properly work on Windows.
  #   - path: internal/hmac/
  #     text: "weak cryptographic primitive"
  #     linters:
  #       - gosec

  #   # Exclude some `staticcheck` messages.
  #   - linters:
  #       - staticcheck
  #     text: "SA9003:"

  #   # Exclude `lll` issues for long lines with `go:generate`.
  #   - linters:
  #       - lll
  #     source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option.
  # To list all excluded by default patterns execute `golangci-lint run --help`.
  # Default: true
  exclude-use-default: false

  # If set to true, `exclude` and `exclude-rules` regular expressions become case-sensitive.
  # Default: false
  exclude-case-sensitive: false

  # Which dirs to exclude: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  # exclude-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # Enables exclude of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  exclude-dirs-use-default: false

  # Which files to exclude: they will be analyzed, but issues from them won't be reported.
  # There is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not, please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  # Default: []
  # exclude-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # Mode of the generated files analysis.
  #
  # - `strict`: sources are excluded by following strictly the Go generated file convention.
  #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
  #    This line must appear before the first non-comment, non-blank text in the file.
  #    https://go.dev/s/generatedcode
  # - `lax`: sources are excluded if they contain lines `autogenerated file`, `code generated`, `do not edit`, etc.
  # - `disable`: disable the generated files exclusion.
  #
  # Default: lax
  # exclude-generated: strict

  # The list of ids of default excludes to include or disable.
  # https://golangci-lint.run/usage/false-positives/#default-exclusions
  # Default: []
  # include:
  #   - EXC0001
  #   - EXC0002
  #   - EXC0003
  #   - EXC0004
  #   - EXC0005
  #   - EXC0006
  #   - EXC0007
  #   - EXC0008
  #   - EXC0009
  #   - EXC0010
  #   - EXC0011
  #   - EXC0012
  #   - EXC0013
  #   - EXC0014
  #   - EXC0015

  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0

  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  #
  # Default: false
  # new: true

  # Show only new issues created after git revision `REV`.
  # Default: ""
  # new-from-rev: HEAD

  # Show only new issues created in git patch with set file path.
  # Default: ""
  # new-from-patch: path/to/patch/file

  # Show issues in any part of update files (requires new-from-rev or new-from-patch).
  # Default: false
  whole-files: true

  # Fix found issues (if it's supported by the linter).
  # Default: false
  # fix: true

severity:
  # Set the default severity for issues.
  #
  # If severity rules are defined and the issues do not match or no severity is provided to the rule
  # this will be the default severity applied.
  # Severities should match the supported severity names of the selected out format.
  # - Code climate: https://docs.codeclimate.com/docs/issues#issue-severity
  # - Checkstyle: https://checkstyle.sourceforge.io/property_types.html#SeverityLevel
  # - GitHub: https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
  # - TeamCity: https://www.jetbrains.com/help/teamcity/service-messages.html#Inspection+Instance
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Default: ""
  default-severity: error

  # If set to true `severity-rules` regular expressions become case-sensitive.
  # Default: false
  case-sensitive: true

  # When a list of severity rules are provided, severity information will be added to lint issues.
  # Severity rules have the same filtering capability as exclude rules
  # except you are allowed to specify one matcher per severity rule.
  #
  # `@linter` can be used as severity value to keep the severity from linters (e.g. revive, gosec, ...)
  #
  # Only affects out formats that support setting severity information.
  #
  # Default: []
  # rules:
  #   - linters:
  #       - dupl
  #     severity: info

  # Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m

  # Exit code when at least one issue was found.
  # Default: 1
  # issues-exit-code: 2

  # Include test files or not.
  # Default: true
  # tests: false

  # List of build tags, all linters use it.
  # Default: []
  # build-tags:
  #   - mytag

  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  # allow-parallel-runners: true

  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  # allow-serial-runners: true

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.17
  go: '1.19'

  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # If it is explicitly set to 0 (i.e. not the default) then golangci-lint will automatically set the value to match Linux container CPU quota.
  # Default: the number of logical CPUs in the machine
  concurrency: 4

# output configuration options
output:
  # The formats used to render issues.
  # Formats:
  # - `colored-line-number`
  # - `line-number`
  # - `json`
  # - `colored-tab`
  # - `tab`
  # - `html`
  # - `checkstyle`
  # - `code-climate`
  # - `junit-xml`
  # - `junit-xml-extended`
  # - `github-actions`
  # - `teamcity`
  # - `sarif`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdout
  formats:
    # - format: json
    #   path: stderr
    # - format: checkstyle
    #   path: report.xml
    - format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  # print-issued-lines: false

  # Print linter name in the end of issue text.
  # Default: true
  # print-linter-name: false

  # Make issues output unique by line.
  # Default: true
  # uniq-by-line: false

  # Add a prefix to the output file references.
  # Default: ""
  # path-prefix: ""

  # Sort results by the order defined in `sort-order`.
  # Default: false
  sort-results: true

  # Order to use when sorting results.
  # Require `sort-results` to `true`.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.

  # Show statistics per linter.
  # Default: false
  # show-stats: true
