// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=weakcoin -destination=./mocks.go -source=./interface.go
//
// Package weakcoin is a generated GoMock package.
package weakcoin

import (
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MockvrfSigner is a mock of vrfSigner interface.
type MockvrfSigner struct {
	ctrl     *gomock.Controller
	recorder *MockvrfSignerMockRecorder
}

// MockvrfSignerMockRecorder is the mock recorder for MockvrfSigner.
type MockvrfSignerMockRecorder struct {
	mock *MockvrfSigner
}

// NewMockvrfSigner creates a new mock instance.
func NewMockvrfSigner(ctrl *gomock.Controller) *MockvrfSigner {
	mock := &MockvrfSigner{ctrl: ctrl}
	mock.recorder = &MockvrfSignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvrfSigner) EXPECT() *MockvrfSignerMockRecorder {
	return m.recorder
}

// NodeID mocks base method.
func (m *MockvrfSigner) NodeID() types.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeID")
	ret0, _ := ret[0].(types.NodeID)
	return ret0
}

// NodeID indicates an expected call of NodeID.
func (mr *MockvrfSignerMockRecorder) NodeID() *vrfSignerNodeIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeID", reflect.TypeOf((*MockvrfSigner)(nil).NodeID))
	return &vrfSignerNodeIDCall{Call: call}
}

// vrfSignerNodeIDCall wrap *gomock.Call
type vrfSignerNodeIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *vrfSignerNodeIDCall) Return(arg0 types.NodeID) *vrfSignerNodeIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *vrfSignerNodeIDCall) Do(f func() types.NodeID) *vrfSignerNodeIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *vrfSignerNodeIDCall) DoAndReturn(f func() types.NodeID) *vrfSignerNodeIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sign mocks base method.
func (m *MockvrfSigner) Sign(msg []byte) types.VrfSignature {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", msg)
	ret0, _ := ret[0].(types.VrfSignature)
	return ret0
}

// Sign indicates an expected call of Sign.
func (mr *MockvrfSignerMockRecorder) Sign(msg any) *vrfSignerSignCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockvrfSigner)(nil).Sign), msg)
	return &vrfSignerSignCall{Call: call}
}

// vrfSignerSignCall wrap *gomock.Call
type vrfSignerSignCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *vrfSignerSignCall) Return(arg0 types.VrfSignature) *vrfSignerSignCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *vrfSignerSignCall) Do(f func([]byte) types.VrfSignature) *vrfSignerSignCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *vrfSignerSignCall) DoAndReturn(f func([]byte) types.VrfSignature) *vrfSignerSignCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockvrfVerifier is a mock of vrfVerifier interface.
type MockvrfVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockvrfVerifierMockRecorder
}

// MockvrfVerifierMockRecorder is the mock recorder for MockvrfVerifier.
type MockvrfVerifierMockRecorder struct {
	mock *MockvrfVerifier
}

// NewMockvrfVerifier creates a new mock instance.
func NewMockvrfVerifier(ctrl *gomock.Controller) *MockvrfVerifier {
	mock := &MockvrfVerifier{ctrl: ctrl}
	mock.recorder = &MockvrfVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvrfVerifier) EXPECT() *MockvrfVerifierMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockvrfVerifier) Verify(nodeID types.NodeID, msg []byte, sig types.VrfSignature) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", nodeID, msg, sig)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockvrfVerifierMockRecorder) Verify(nodeID, msg, sig any) *vrfVerifierVerifyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockvrfVerifier)(nil).Verify), nodeID, msg, sig)
	return &vrfVerifierVerifyCall{Call: call}
}

// vrfVerifierVerifyCall wrap *gomock.Call
type vrfVerifierVerifyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *vrfVerifierVerifyCall) Return(arg0 bool) *vrfVerifierVerifyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *vrfVerifierVerifyCall) Do(f func(types.NodeID, []byte, types.VrfSignature) bool) *vrfVerifierVerifyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *vrfVerifierVerifyCall) DoAndReturn(f func(types.NodeID, []byte, types.VrfSignature) bool) *vrfVerifierVerifyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocknonceFetcher is a mock of nonceFetcher interface.
type MocknonceFetcher struct {
	ctrl     *gomock.Controller
	recorder *MocknonceFetcherMockRecorder
}

// MocknonceFetcherMockRecorder is the mock recorder for MocknonceFetcher.
type MocknonceFetcherMockRecorder struct {
	mock *MocknonceFetcher
}

// NewMocknonceFetcher creates a new mock instance.
func NewMocknonceFetcher(ctrl *gomock.Controller) *MocknonceFetcher {
	mock := &MocknonceFetcher{ctrl: ctrl}
	mock.recorder = &MocknonceFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknonceFetcher) EXPECT() *MocknonceFetcherMockRecorder {
	return m.recorder
}

// VRFNonce mocks base method.
func (m *MocknonceFetcher) VRFNonce(arg0 types.NodeID, arg1 types.EpochID) (types.VRFPostIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VRFNonce", arg0, arg1)
	ret0, _ := ret[0].(types.VRFPostIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VRFNonce indicates an expected call of VRFNonce.
func (mr *MocknonceFetcherMockRecorder) VRFNonce(arg0, arg1 any) *nonceFetcherVRFNonceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VRFNonce", reflect.TypeOf((*MocknonceFetcher)(nil).VRFNonce), arg0, arg1)
	return &nonceFetcherVRFNonceCall{Call: call}
}

// nonceFetcherVRFNonceCall wrap *gomock.Call
type nonceFetcherVRFNonceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *nonceFetcherVRFNonceCall) Return(arg0 types.VRFPostIndex, arg1 error) *nonceFetcherVRFNonceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *nonceFetcherVRFNonceCall) Do(f func(types.NodeID, types.EpochID) (types.VRFPostIndex, error)) *nonceFetcherVRFNonceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *nonceFetcherVRFNonceCall) DoAndReturn(f func(types.NodeID, types.EpochID) (types.VRFPostIndex, error)) *nonceFetcherVRFNonceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mockallowance is a mock of allowance interface.
type Mockallowance struct {
	ctrl     *gomock.Controller
	recorder *MockallowanceMockRecorder
}

// MockallowanceMockRecorder is the mock recorder for Mockallowance.
type MockallowanceMockRecorder struct {
	mock *Mockallowance
}

// NewMockallowance creates a new mock instance.
func NewMockallowance(ctrl *gomock.Controller) *Mockallowance {
	mock := &Mockallowance{ctrl: ctrl}
	mock.recorder = &MockallowanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockallowance) EXPECT() *MockallowanceMockRecorder {
	return m.recorder
}

// MinerAllowance mocks base method.
func (m *Mockallowance) MinerAllowance(arg0 types.EpochID, arg1 types.NodeID) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinerAllowance", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// MinerAllowance indicates an expected call of MinerAllowance.
func (mr *MockallowanceMockRecorder) MinerAllowance(arg0, arg1 any) *allowanceMinerAllowanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinerAllowance", reflect.TypeOf((*Mockallowance)(nil).MinerAllowance), arg0, arg1)
	return &allowanceMinerAllowanceCall{Call: call}
}

// allowanceMinerAllowanceCall wrap *gomock.Call
type allowanceMinerAllowanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *allowanceMinerAllowanceCall) Return(arg0 uint32) *allowanceMinerAllowanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *allowanceMinerAllowanceCall) Do(f func(types.EpochID, types.NodeID) uint32) *allowanceMinerAllowanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *allowanceMinerAllowanceCall) DoAndReturn(f func(types.EpochID, types.NodeID) uint32) *allowanceMinerAllowanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
