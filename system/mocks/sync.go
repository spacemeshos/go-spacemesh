// Code generated by MockGen. DO NOT EDIT.
// Source: ./sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSyncStateProvider is a mock of SyncStateProvider interface.
type MockSyncStateProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSyncStateProviderMockRecorder
}

// MockSyncStateProviderMockRecorder is the mock recorder for MockSyncStateProvider.
type MockSyncStateProviderMockRecorder struct {
	mock *MockSyncStateProvider
}

// NewMockSyncStateProvider creates a new mock instance.
func NewMockSyncStateProvider(ctrl *gomock.Controller) *MockSyncStateProvider {
	mock := &MockSyncStateProvider{ctrl: ctrl}
	mock.recorder = &MockSyncStateProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncStateProvider) EXPECT() *MockSyncStateProviderMockRecorder {
	return m.recorder
}

// IsSynced mocks base method.
func (m *MockSyncStateProvider) IsSynced(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSynced", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSynced indicates an expected call of IsSynced.
func (mr *MockSyncStateProviderMockRecorder) IsSynced(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSynced", reflect.TypeOf((*MockSyncStateProvider)(nil).IsSynced), arg0)
}
