// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=multipeer -destination=./mocks_test.go -source=./interface.go
//

// Package multipeer is a generated GoMock package.
package multipeer

import (
	context "context"
	io "io"
	reflect "reflect"

	p2p "github.com/spacemeshos/go-spacemesh/p2p"
	rangesync "github.com/spacemeshos/go-spacemesh/sync2/rangesync"
	types "github.com/spacemeshos/go-spacemesh/sync2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockSyncBase is a mock of SyncBase interface.
type MockSyncBase struct {
	ctrl     *gomock.Controller
	recorder *MockSyncBaseMockRecorder
}

// MockSyncBaseMockRecorder is the mock recorder for MockSyncBase.
type MockSyncBaseMockRecorder struct {
	mock *MockSyncBase
}

// NewMockSyncBase creates a new mock instance.
func NewMockSyncBase(ctrl *gomock.Controller) *MockSyncBase {
	mock := &MockSyncBase{ctrl: ctrl}
	mock.recorder = &MockSyncBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncBase) EXPECT() *MockSyncBaseMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockSyncBase) Count(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSyncBaseMockRecorder) Count(ctx any) *MockSyncBaseCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSyncBase)(nil).Count), ctx)
	return &MockSyncBaseCountCall{Call: call}
}

// MockSyncBaseCountCall wrap *gomock.Call
type MockSyncBaseCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseCountCall) Return(arg0 int, arg1 error) *MockSyncBaseCountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseCountCall) Do(f func(context.Context) (int, error)) *MockSyncBaseCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseCountCall) DoAndReturn(f func(context.Context) (int, error)) *MockSyncBaseCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Derive mocks base method.
func (m *MockSyncBase) Derive(p p2p.Peer) Syncer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Derive", p)
	ret0, _ := ret[0].(Syncer)
	return ret0
}

// Derive indicates an expected call of Derive.
func (mr *MockSyncBaseMockRecorder) Derive(p any) *MockSyncBaseDeriveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Derive", reflect.TypeOf((*MockSyncBase)(nil).Derive), p)
	return &MockSyncBaseDeriveCall{Call: call}
}

// MockSyncBaseDeriveCall wrap *gomock.Call
type MockSyncBaseDeriveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseDeriveCall) Return(arg0 Syncer) *MockSyncBaseDeriveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseDeriveCall) Do(f func(p2p.Peer) Syncer) *MockSyncBaseDeriveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseDeriveCall) DoAndReturn(f func(p2p.Peer) Syncer) *MockSyncBaseDeriveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Probe mocks base method.
func (m *MockSyncBase) Probe(ctx context.Context, p p2p.Peer) (rangesync.ProbeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", ctx, p)
	ret0, _ := ret[0].(rangesync.ProbeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockSyncBaseMockRecorder) Probe(ctx, p any) *MockSyncBaseProbeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockSyncBase)(nil).Probe), ctx, p)
	return &MockSyncBaseProbeCall{Call: call}
}

// MockSyncBaseProbeCall wrap *gomock.Call
type MockSyncBaseProbeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseProbeCall) Return(arg0 rangesync.ProbeResult, arg1 error) *MockSyncBaseProbeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseProbeCall) Do(f func(context.Context, p2p.Peer) (rangesync.ProbeResult, error)) *MockSyncBaseProbeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseProbeCall) DoAndReturn(f func(context.Context, p2p.Peer) (rangesync.ProbeResult, error)) *MockSyncBaseProbeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockSyncBase) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockSyncBaseMockRecorder) Wait() *MockSyncBaseWaitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockSyncBase)(nil).Wait))
	return &MockSyncBaseWaitCall{Call: call}
}

// MockSyncBaseWaitCall wrap *gomock.Call
type MockSyncBaseWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncBaseWaitCall) Return(arg0 error) *MockSyncBaseWaitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncBaseWaitCall) Do(f func() error) *MockSyncBaseWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncBaseWaitCall) DoAndReturn(f func() error) *MockSyncBaseWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSyncer is a mock of Syncer interface.
type MockSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerMockRecorder
}

// MockSyncerMockRecorder is the mock recorder for MockSyncer.
type MockSyncerMockRecorder struct {
	mock *MockSyncer
}

// NewMockSyncer creates a new mock instance.
func NewMockSyncer(ctrl *gomock.Controller) *MockSyncer {
	mock := &MockSyncer{ctrl: ctrl}
	mock.recorder = &MockSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncer) EXPECT() *MockSyncerMockRecorder {
	return m.recorder
}

// Peer mocks base method.
func (m *MockSyncer) Peer() p2p.Peer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peer")
	ret0, _ := ret[0].(p2p.Peer)
	return ret0
}

// Peer indicates an expected call of Peer.
func (mr *MockSyncerMockRecorder) Peer() *MockSyncerPeerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peer", reflect.TypeOf((*MockSyncer)(nil).Peer))
	return &MockSyncerPeerCall{Call: call}
}

// MockSyncerPeerCall wrap *gomock.Call
type MockSyncerPeerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncerPeerCall) Return(arg0 p2p.Peer) *MockSyncerPeerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncerPeerCall) Do(f func() p2p.Peer) *MockSyncerPeerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncerPeerCall) DoAndReturn(f func() p2p.Peer) *MockSyncerPeerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Serve mocks base method.
func (m *MockSyncer) Serve(ctx context.Context, req []byte, stream io.ReadWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx, req, stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockSyncerMockRecorder) Serve(ctx, req, stream any) *MockSyncerServeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockSyncer)(nil).Serve), ctx, req, stream)
	return &MockSyncerServeCall{Call: call}
}

// MockSyncerServeCall wrap *gomock.Call
type MockSyncerServeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncerServeCall) Return(arg0 error) *MockSyncerServeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncerServeCall) Do(f func(context.Context, []byte, io.ReadWriter) error) *MockSyncerServeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncerServeCall) DoAndReturn(f func(context.Context, []byte, io.ReadWriter) error) *MockSyncerServeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sync mocks base method.
func (m *MockSyncer) Sync(ctx context.Context, x, y types.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockSyncerMockRecorder) Sync(ctx, x, y any) *MockSyncerSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockSyncer)(nil).Sync), ctx, x, y)
	return &MockSyncerSyncCall{Call: call}
}

// MockSyncerSyncCall wrap *gomock.Call
type MockSyncerSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSyncerSyncCall) Return(arg0 error) *MockSyncerSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSyncerSyncCall) Do(f func(context.Context, types.KeyBytes, types.KeyBytes) error) *MockSyncerSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSyncerSyncCall) DoAndReturn(f func(context.Context, types.KeyBytes, types.KeyBytes) error) *MockSyncerSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPairwiseSyncer is a mock of PairwiseSyncer interface.
type MockPairwiseSyncer struct {
	ctrl     *gomock.Controller
	recorder *MockPairwiseSyncerMockRecorder
}

// MockPairwiseSyncerMockRecorder is the mock recorder for MockPairwiseSyncer.
type MockPairwiseSyncerMockRecorder struct {
	mock *MockPairwiseSyncer
}

// NewMockPairwiseSyncer creates a new mock instance.
func NewMockPairwiseSyncer(ctrl *gomock.Controller) *MockPairwiseSyncer {
	mock := &MockPairwiseSyncer{ctrl: ctrl}
	mock.recorder = &MockPairwiseSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPairwiseSyncer) EXPECT() *MockPairwiseSyncerMockRecorder {
	return m.recorder
}

// Probe mocks base method.
func (m *MockPairwiseSyncer) Probe(ctx context.Context, peer p2p.Peer, os rangesync.OrderedSet, x, y types.KeyBytes) (rangesync.ProbeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Probe", ctx, peer, os, x, y)
	ret0, _ := ret[0].(rangesync.ProbeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Probe indicates an expected call of Probe.
func (mr *MockPairwiseSyncerMockRecorder) Probe(ctx, peer, os, x, y any) *MockPairwiseSyncerProbeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Probe", reflect.TypeOf((*MockPairwiseSyncer)(nil).Probe), ctx, peer, os, x, y)
	return &MockPairwiseSyncerProbeCall{Call: call}
}

// MockPairwiseSyncerProbeCall wrap *gomock.Call
type MockPairwiseSyncerProbeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerProbeCall) Return(arg0 rangesync.ProbeResult, arg1 error) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerProbeCall) Do(f func(context.Context, p2p.Peer, rangesync.OrderedSet, types.KeyBytes, types.KeyBytes) (rangesync.ProbeResult, error)) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerProbeCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.OrderedSet, types.KeyBytes, types.KeyBytes) (rangesync.ProbeResult, error)) *MockPairwiseSyncerProbeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Serve mocks base method.
func (m *MockPairwiseSyncer) Serve(ctx context.Context, req []byte, stream io.ReadWriter, os rangesync.OrderedSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", ctx, req, stream, os)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockPairwiseSyncerMockRecorder) Serve(ctx, req, stream, os any) *MockPairwiseSyncerServeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockPairwiseSyncer)(nil).Serve), ctx, req, stream, os)
	return &MockPairwiseSyncerServeCall{Call: call}
}

// MockPairwiseSyncerServeCall wrap *gomock.Call
type MockPairwiseSyncerServeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerServeCall) Return(arg0 error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerServeCall) Do(f func(context.Context, []byte, io.ReadWriter, rangesync.OrderedSet) error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerServeCall) DoAndReturn(f func(context.Context, []byte, io.ReadWriter, rangesync.OrderedSet) error) *MockPairwiseSyncerServeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Sync mocks base method.
func (m *MockPairwiseSyncer) Sync(ctx context.Context, peer p2p.Peer, os rangesync.OrderedSet, x, y types.KeyBytes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, peer, os, x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockPairwiseSyncerMockRecorder) Sync(ctx, peer, os, x, y any) *MockPairwiseSyncerSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockPairwiseSyncer)(nil).Sync), ctx, peer, os, x, y)
	return &MockPairwiseSyncerSyncCall{Call: call}
}

// MockPairwiseSyncerSyncCall wrap *gomock.Call
type MockPairwiseSyncerSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPairwiseSyncerSyncCall) Return(arg0 error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPairwiseSyncerSyncCall) Do(f func(context.Context, p2p.Peer, rangesync.OrderedSet, types.KeyBytes, types.KeyBytes) error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPairwiseSyncerSyncCall) DoAndReturn(f func(context.Context, p2p.Peer, rangesync.OrderedSet, types.KeyBytes, types.KeyBytes) error) *MockPairwiseSyncerSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocksyncRunner is a mock of syncRunner interface.
type MocksyncRunner struct {
	ctrl     *gomock.Controller
	recorder *MocksyncRunnerMockRecorder
}

// MocksyncRunnerMockRecorder is the mock recorder for MocksyncRunner.
type MocksyncRunnerMockRecorder struct {
	mock *MocksyncRunner
}

// NewMocksyncRunner creates a new mock instance.
func NewMocksyncRunner(ctrl *gomock.Controller) *MocksyncRunner {
	mock := &MocksyncRunner{ctrl: ctrl}
	mock.recorder = &MocksyncRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksyncRunner) EXPECT() *MocksyncRunnerMockRecorder {
	return m.recorder
}

// fullSync mocks base method.
func (m *MocksyncRunner) fullSync(ctx context.Context, syncPeers []p2p.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fullSync", ctx, syncPeers)
	ret0, _ := ret[0].(error)
	return ret0
}

// fullSync indicates an expected call of fullSync.
func (mr *MocksyncRunnerMockRecorder) fullSync(ctx, syncPeers any) *MocksyncRunnerfullSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fullSync", reflect.TypeOf((*MocksyncRunner)(nil).fullSync), ctx, syncPeers)
	return &MocksyncRunnerfullSyncCall{Call: call}
}

// MocksyncRunnerfullSyncCall wrap *gomock.Call
type MocksyncRunnerfullSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksyncRunnerfullSyncCall) Return(arg0 error) *MocksyncRunnerfullSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksyncRunnerfullSyncCall) Do(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerfullSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksyncRunnerfullSyncCall) DoAndReturn(f func(context.Context, []p2p.Peer) error) *MocksyncRunnerfullSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// splitSync mocks base method.
func (m *MocksyncRunner) splitSync(ctx context.Context, syncPeers []p2p.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "splitSync", ctx, syncPeers)
	ret0, _ := ret[0].(error)
	return ret0
}

// splitSync indicates an expected call of splitSync.
func (mr *MocksyncRunnerMockRecorder) splitSync(ctx, syncPeers any) *MocksyncRunnersplitSyncCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "splitSync", reflect.TypeOf((*MocksyncRunner)(nil).splitSync), ctx, syncPeers)
	return &MocksyncRunnersplitSyncCall{Call: call}
}

// MocksyncRunnersplitSyncCall wrap *gomock.Call
type MocksyncRunnersplitSyncCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocksyncRunnersplitSyncCall) Return(arg0 error) *MocksyncRunnersplitSyncCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocksyncRunnersplitSyncCall) Do(f func(context.Context, []p2p.Peer) error) *MocksyncRunnersplitSyncCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocksyncRunnersplitSyncCall) DoAndReturn(f func(context.Context, []p2p.Peer) error) *MocksyncRunnersplitSyncCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
