// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go
//
// Generated by this command:
//
//	mockgen -typed -package=mocks -destination=./mocks/mocks.go -source=./interface.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	p2p "github.com/spacemeshos/go-spacemesh/p2p"
	server "github.com/spacemeshos/go-spacemesh/p2p/server"
	rangesync "github.com/spacemeshos/go-spacemesh/sync2/rangesync"
	types "github.com/spacemeshos/go-spacemesh/sync2/types"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderedSet is a mock of OrderedSet interface.
type MockOrderedSet struct {
	ctrl     *gomock.Controller
	recorder *MockOrderedSetMockRecorder
}

// MockOrderedSetMockRecorder is the mock recorder for MockOrderedSet.
type MockOrderedSetMockRecorder struct {
	mock *MockOrderedSet
}

// NewMockOrderedSet creates a new mock instance.
func NewMockOrderedSet(ctrl *gomock.Controller) *MockOrderedSet {
	mock := &MockOrderedSet{ctrl: ctrl}
	mock.recorder = &MockOrderedSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderedSet) EXPECT() *MockOrderedSetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrderedSet) Add(ctx context.Context, k types.Ordered) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, k)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOrderedSetMockRecorder) Add(ctx, k any) *MockOrderedSetAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrderedSet)(nil).Add), ctx, k)
	return &MockOrderedSetAddCall{Call: call}
}

// MockOrderedSetAddCall wrap *gomock.Call
type MockOrderedSetAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetAddCall) Return(arg0 error) *MockOrderedSetAddCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetAddCall) Do(f func(context.Context, types.Ordered) error) *MockOrderedSetAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetAddCall) DoAndReturn(f func(context.Context, types.Ordered) error) *MockOrderedSetAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Copy mocks base method.
func (m *MockOrderedSet) Copy() rangesync.OrderedSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(rangesync.OrderedSet)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockOrderedSetMockRecorder) Copy() *MockOrderedSetCopyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockOrderedSet)(nil).Copy))
	return &MockOrderedSetCopyCall{Call: call}
}

// MockOrderedSetCopyCall wrap *gomock.Call
type MockOrderedSetCopyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetCopyCall) Return(arg0 rangesync.OrderedSet) *MockOrderedSetCopyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetCopyCall) Do(f func() rangesync.OrderedSet) *MockOrderedSetCopyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetCopyCall) DoAndReturn(f func() rangesync.OrderedSet) *MockOrderedSetCopyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Empty mocks base method.
func (m *MockOrderedSet) Empty(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Empty", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Empty indicates an expected call of Empty.
func (mr *MockOrderedSetMockRecorder) Empty(ctx any) *MockOrderedSetEmptyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Empty", reflect.TypeOf((*MockOrderedSet)(nil).Empty), ctx)
	return &MockOrderedSetEmptyCall{Call: call}
}

// MockOrderedSetEmptyCall wrap *gomock.Call
type MockOrderedSetEmptyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetEmptyCall) Return(arg0 bool, arg1 error) *MockOrderedSetEmptyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetEmptyCall) Do(f func(context.Context) (bool, error)) *MockOrderedSetEmptyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetEmptyCall) DoAndReturn(f func(context.Context) (bool, error)) *MockOrderedSetEmptyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRangeInfo mocks base method.
func (m *MockOrderedSet) GetRangeInfo(ctx context.Context, x, y types.Ordered, count int) (rangesync.RangeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRangeInfo", ctx, x, y, count)
	ret0, _ := ret[0].(rangesync.RangeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRangeInfo indicates an expected call of GetRangeInfo.
func (mr *MockOrderedSetMockRecorder) GetRangeInfo(ctx, x, y, count any) *MockOrderedSetGetRangeInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRangeInfo", reflect.TypeOf((*MockOrderedSet)(nil).GetRangeInfo), ctx, x, y, count)
	return &MockOrderedSetGetRangeInfoCall{Call: call}
}

// MockOrderedSetGetRangeInfoCall wrap *gomock.Call
type MockOrderedSetGetRangeInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetGetRangeInfoCall) Return(arg0 rangesync.RangeInfo, arg1 error) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetGetRangeInfoCall) Do(f func(context.Context, types.Ordered, types.Ordered, int) (rangesync.RangeInfo, error)) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetGetRangeInfoCall) DoAndReturn(f func(context.Context, types.Ordered, types.Ordered, int) (rangesync.RangeInfo, error)) *MockOrderedSetGetRangeInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Has mocks base method.
func (m *MockOrderedSet) Has(ctx context.Context, k types.Ordered) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", ctx, k)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockOrderedSetMockRecorder) Has(ctx, k any) *MockOrderedSetHasCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockOrderedSet)(nil).Has), ctx, k)
	return &MockOrderedSetHasCall{Call: call}
}

// MockOrderedSetHasCall wrap *gomock.Call
type MockOrderedSetHasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetHasCall) Return(arg0 bool, arg1 error) *MockOrderedSetHasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetHasCall) Do(f func(context.Context, types.Ordered) (bool, error)) *MockOrderedSetHasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetHasCall) DoAndReturn(f func(context.Context, types.Ordered) (bool, error)) *MockOrderedSetHasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Items mocks base method.
func (m *MockOrderedSet) Items(ctx context.Context) (types.Seq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Items", ctx)
	ret0, _ := ret[0].(types.Seq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Items indicates an expected call of Items.
func (mr *MockOrderedSetMockRecorder) Items(ctx any) *MockOrderedSetItemsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Items", reflect.TypeOf((*MockOrderedSet)(nil).Items), ctx)
	return &MockOrderedSetItemsCall{Call: call}
}

// MockOrderedSetItemsCall wrap *gomock.Call
type MockOrderedSetItemsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetItemsCall) Return(arg0 types.Seq, arg1 error) *MockOrderedSetItemsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetItemsCall) Do(f func(context.Context) (types.Seq, error)) *MockOrderedSetItemsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetItemsCall) DoAndReturn(f func(context.Context) (types.Seq, error)) *MockOrderedSetItemsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recent mocks base method.
func (m *MockOrderedSet) Recent(ctx context.Context, since time.Time) (types.Seq, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recent", ctx, since)
	ret0, _ := ret[0].(types.Seq)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Recent indicates an expected call of Recent.
func (mr *MockOrderedSetMockRecorder) Recent(ctx, since any) *MockOrderedSetRecentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recent", reflect.TypeOf((*MockOrderedSet)(nil).Recent), ctx, since)
	return &MockOrderedSetRecentCall{Call: call}
}

// MockOrderedSetRecentCall wrap *gomock.Call
type MockOrderedSetRecentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetRecentCall) Return(arg0 types.Seq, arg1 int, arg2 error) *MockOrderedSetRecentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetRecentCall) Do(f func(context.Context, time.Time) (types.Seq, int, error)) *MockOrderedSetRecentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetRecentCall) DoAndReturn(f func(context.Context, time.Time) (types.Seq, int, error)) *MockOrderedSetRecentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SplitRange mocks base method.
func (m *MockOrderedSet) SplitRange(ctx context.Context, x, y types.Ordered, count int) (rangesync.SplitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SplitRange", ctx, x, y, count)
	ret0, _ := ret[0].(rangesync.SplitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SplitRange indicates an expected call of SplitRange.
func (mr *MockOrderedSetMockRecorder) SplitRange(ctx, x, y, count any) *MockOrderedSetSplitRangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SplitRange", reflect.TypeOf((*MockOrderedSet)(nil).SplitRange), ctx, x, y, count)
	return &MockOrderedSetSplitRangeCall{Call: call}
}

// MockOrderedSetSplitRangeCall wrap *gomock.Call
type MockOrderedSetSplitRangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOrderedSetSplitRangeCall) Return(arg0 rangesync.SplitInfo, arg1 error) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOrderedSetSplitRangeCall) Do(f func(context.Context, types.Ordered, types.Ordered, int) (rangesync.SplitInfo, error)) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOrderedSetSplitRangeCall) DoAndReturn(f func(context.Context, types.Ordered, types.Ordered, int) (rangesync.SplitInfo, error)) *MockOrderedSetSplitRangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRequester) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRequesterMockRecorder) Run(arg0 any) *MockRequesterRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRequester)(nil).Run), arg0)
	return &MockRequesterRunCall{Call: call}
}

// MockRequesterRunCall wrap *gomock.Call
type MockRequesterRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequesterRunCall) Return(arg0 error) *MockRequesterRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequesterRunCall) Do(f func(context.Context) error) *MockRequesterRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequesterRunCall) DoAndReturn(f func(context.Context) error) *MockRequesterRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StreamRequest mocks base method.
func (m *MockRequester) StreamRequest(arg0 context.Context, arg1 p2p.Peer, arg2 []byte, arg3 server.StreamRequestCallback, arg4 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StreamRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamRequest indicates an expected call of StreamRequest.
func (mr *MockRequesterMockRecorder) StreamRequest(arg0, arg1, arg2, arg3 any, arg4 ...any) *MockRequesterStreamRequestCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3}, arg4...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamRequest", reflect.TypeOf((*MockRequester)(nil).StreamRequest), varargs...)
	return &MockRequesterStreamRequestCall{Call: call}
}

// MockRequesterStreamRequestCall wrap *gomock.Call
type MockRequesterStreamRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequesterStreamRequestCall) Return(arg0 error) *MockRequesterStreamRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequesterStreamRequestCall) Do(f func(context.Context, p2p.Peer, []byte, server.StreamRequestCallback, ...string) error) *MockRequesterStreamRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequesterStreamRequestCall) DoAndReturn(f func(context.Context, p2p.Peer, []byte, server.StreamRequestCallback, ...string) error) *MockRequesterStreamRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
