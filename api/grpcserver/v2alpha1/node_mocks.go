// Code generated by MockGen. DO NOT EDIT.
// Source: ./node.go
//
// Generated by this command:
//
//	mockgen -typed -package=v2alpha1 -destination=./node_mocks.go -source=./node.go
//

// Package v2alpha1 is a generated GoMock package.
package v2alpha1

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	gomock "go.uber.org/mock/gomock"
)

// MocknodePeerCounter is a mock of nodePeerCounter interface.
type MocknodePeerCounter struct {
	ctrl     *gomock.Controller
	recorder *MocknodePeerCounterMockRecorder
}

// MocknodePeerCounterMockRecorder is the mock recorder for MocknodePeerCounter.
type MocknodePeerCounterMockRecorder struct {
	mock *MocknodePeerCounter
}

// NewMocknodePeerCounter creates a new mock instance.
func NewMocknodePeerCounter(ctrl *gomock.Controller) *MocknodePeerCounter {
	mock := &MocknodePeerCounter{ctrl: ctrl}
	mock.recorder = &MocknodePeerCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodePeerCounter) EXPECT() *MocknodePeerCounterMockRecorder {
	return m.recorder
}

// PeerCount mocks base method.
func (m *MocknodePeerCounter) PeerCount() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerCount")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// PeerCount indicates an expected call of PeerCount.
func (mr *MocknodePeerCounterMockRecorder) PeerCount() *MocknodePeerCounterPeerCountCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerCount", reflect.TypeOf((*MocknodePeerCounter)(nil).PeerCount))
	return &MocknodePeerCounterPeerCountCall{Call: call}
}

// MocknodePeerCounterPeerCountCall wrap *gomock.Call
type MocknodePeerCounterPeerCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknodePeerCounterPeerCountCall) Return(arg0 uint64) *MocknodePeerCounterPeerCountCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknodePeerCounterPeerCountCall) Do(f func() uint64) *MocknodePeerCounterPeerCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknodePeerCounterPeerCountCall) DoAndReturn(f func() uint64) *MocknodePeerCounterPeerCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocknodeMeshAPI is a mock of nodeMeshAPI interface.
type MocknodeMeshAPI struct {
	ctrl     *gomock.Controller
	recorder *MocknodeMeshAPIMockRecorder
}

// MocknodeMeshAPIMockRecorder is the mock recorder for MocknodeMeshAPI.
type MocknodeMeshAPIMockRecorder struct {
	mock *MocknodeMeshAPI
}

// NewMocknodeMeshAPI creates a new mock instance.
func NewMocknodeMeshAPI(ctrl *gomock.Controller) *MocknodeMeshAPI {
	mock := &MocknodeMeshAPI{ctrl: ctrl}
	mock.recorder = &MocknodeMeshAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeMeshAPI) EXPECT() *MocknodeMeshAPIMockRecorder {
	return m.recorder
}

// LatestLayer mocks base method.
func (m *MocknodeMeshAPI) LatestLayer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestLayer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// LatestLayer indicates an expected call of LatestLayer.
func (mr *MocknodeMeshAPIMockRecorder) LatestLayer() *MocknodeMeshAPILatestLayerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestLayer", reflect.TypeOf((*MocknodeMeshAPI)(nil).LatestLayer))
	return &MocknodeMeshAPILatestLayerCall{Call: call}
}

// MocknodeMeshAPILatestLayerCall wrap *gomock.Call
type MocknodeMeshAPILatestLayerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknodeMeshAPILatestLayerCall) Return(arg0 types.LayerID) *MocknodeMeshAPILatestLayerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknodeMeshAPILatestLayerCall) Do(f func() types.LayerID) *MocknodeMeshAPILatestLayerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknodeMeshAPILatestLayerCall) DoAndReturn(f func() types.LayerID) *MocknodeMeshAPILatestLayerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LatestLayerInState mocks base method.
func (m *MocknodeMeshAPI) LatestLayerInState() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestLayerInState")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// LatestLayerInState indicates an expected call of LatestLayerInState.
func (mr *MocknodeMeshAPIMockRecorder) LatestLayerInState() *MocknodeMeshAPILatestLayerInStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestLayerInState", reflect.TypeOf((*MocknodeMeshAPI)(nil).LatestLayerInState))
	return &MocknodeMeshAPILatestLayerInStateCall{Call: call}
}

// MocknodeMeshAPILatestLayerInStateCall wrap *gomock.Call
type MocknodeMeshAPILatestLayerInStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknodeMeshAPILatestLayerInStateCall) Return(arg0 types.LayerID) *MocknodeMeshAPILatestLayerInStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknodeMeshAPILatestLayerInStateCall) Do(f func() types.LayerID) *MocknodeMeshAPILatestLayerInStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknodeMeshAPILatestLayerInStateCall) DoAndReturn(f func() types.LayerID) *MocknodeMeshAPILatestLayerInStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessedLayer mocks base method.
func (m *MocknodeMeshAPI) ProcessedLayer() types.LayerID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedLayer")
	ret0, _ := ret[0].(types.LayerID)
	return ret0
}

// ProcessedLayer indicates an expected call of ProcessedLayer.
func (mr *MocknodeMeshAPIMockRecorder) ProcessedLayer() *MocknodeMeshAPIProcessedLayerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedLayer", reflect.TypeOf((*MocknodeMeshAPI)(nil).ProcessedLayer))
	return &MocknodeMeshAPIProcessedLayerCall{Call: call}
}

// MocknodeMeshAPIProcessedLayerCall wrap *gomock.Call
type MocknodeMeshAPIProcessedLayerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknodeMeshAPIProcessedLayerCall) Return(arg0 types.LayerID) *MocknodeMeshAPIProcessedLayerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknodeMeshAPIProcessedLayerCall) Do(f func() types.LayerID) *MocknodeMeshAPIProcessedLayerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknodeMeshAPIProcessedLayerCall) DoAndReturn(f func() types.LayerID) *MocknodeMeshAPIProcessedLayerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocknodeSyncer is a mock of nodeSyncer interface.
type MocknodeSyncer struct {
	ctrl     *gomock.Controller
	recorder *MocknodeSyncerMockRecorder
}

// MocknodeSyncerMockRecorder is the mock recorder for MocknodeSyncer.
type MocknodeSyncerMockRecorder struct {
	mock *MocknodeSyncer
}

// NewMocknodeSyncer creates a new mock instance.
func NewMocknodeSyncer(ctrl *gomock.Controller) *MocknodeSyncer {
	mock := &MocknodeSyncer{ctrl: ctrl}
	mock.recorder = &MocknodeSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeSyncer) EXPECT() *MocknodeSyncerMockRecorder {
	return m.recorder
}

// IsSynced mocks base method.
func (m *MocknodeSyncer) IsSynced(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSynced", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSynced indicates an expected call of IsSynced.
func (mr *MocknodeSyncerMockRecorder) IsSynced(arg0 any) *MocknodeSyncerIsSyncedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSynced", reflect.TypeOf((*MocknodeSyncer)(nil).IsSynced), arg0)
	return &MocknodeSyncerIsSyncedCall{Call: call}
}

// MocknodeSyncerIsSyncedCall wrap *gomock.Call
type MocknodeSyncerIsSyncedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocknodeSyncerIsSyncedCall) Return(arg0 bool) *MocknodeSyncerIsSyncedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocknodeSyncerIsSyncedCall) Do(f func(context.Context) bool) *MocknodeSyncerIsSyncedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocknodeSyncerIsSyncedCall) DoAndReturn(f func(context.Context) bool) *MocknodeSyncerIsSyncedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
