// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go
//
// Generated by this command:
//
//	mockgen -typed -package=v2alpha1 -destination=./transaction_mocks.go -source=./transaction.go
//

// Package v2alpha1 is a generated GoMock package.
package v2alpha1

import (
	context "context"
	reflect "reflect"

	types "github.com/spacemeshos/go-spacemesh/common/types"
	system "github.com/spacemeshos/go-spacemesh/system"
	gomock "go.uber.org/mock/gomock"
)

// MocktransactionConState is a mock of transactionConState interface.
type MocktransactionConState struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionConStateMockRecorder
}

// MocktransactionConStateMockRecorder is the mock recorder for MocktransactionConState.
type MocktransactionConStateMockRecorder struct {
	mock *MocktransactionConState
}

// NewMocktransactionConState creates a new mock instance.
func NewMocktransactionConState(ctrl *gomock.Controller) *MocktransactionConState {
	mock := &MocktransactionConState{ctrl: ctrl}
	mock.recorder = &MocktransactionConStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionConState) EXPECT() *MocktransactionConStateMockRecorder {
	return m.recorder
}

// Validation mocks base method.
func (m *MocktransactionConState) Validation(raw types.RawTx) system.ValidationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validation", raw)
	ret0, _ := ret[0].(system.ValidationRequest)
	return ret0
}

// Validation indicates an expected call of Validation.
func (mr *MocktransactionConStateMockRecorder) Validation(raw any) *MocktransactionConStateValidationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validation", reflect.TypeOf((*MocktransactionConState)(nil).Validation), raw)
	return &MocktransactionConStateValidationCall{Call: call}
}

// MocktransactionConStateValidationCall wrap *gomock.Call
type MocktransactionConStateValidationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktransactionConStateValidationCall) Return(arg0 system.ValidationRequest) *MocktransactionConStateValidationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktransactionConStateValidationCall) Do(f func(types.RawTx) system.ValidationRequest) *MocktransactionConStateValidationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktransactionConStateValidationCall) DoAndReturn(f func(types.RawTx) system.ValidationRequest) *MocktransactionConStateValidationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocktransactionSyncer is a mock of transactionSyncer interface.
type MocktransactionSyncer struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionSyncerMockRecorder
}

// MocktransactionSyncerMockRecorder is the mock recorder for MocktransactionSyncer.
type MocktransactionSyncerMockRecorder struct {
	mock *MocktransactionSyncer
}

// NewMocktransactionSyncer creates a new mock instance.
func NewMocktransactionSyncer(ctrl *gomock.Controller) *MocktransactionSyncer {
	mock := &MocktransactionSyncer{ctrl: ctrl}
	mock.recorder = &MocktransactionSyncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionSyncer) EXPECT() *MocktransactionSyncerMockRecorder {
	return m.recorder
}

// IsSynced mocks base method.
func (m *MocktransactionSyncer) IsSynced(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSynced", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSynced indicates an expected call of IsSynced.
func (mr *MocktransactionSyncerMockRecorder) IsSynced(arg0 any) *MocktransactionSyncerIsSyncedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSynced", reflect.TypeOf((*MocktransactionSyncer)(nil).IsSynced), arg0)
	return &MocktransactionSyncerIsSyncedCall{Call: call}
}

// MocktransactionSyncerIsSyncedCall wrap *gomock.Call
type MocktransactionSyncerIsSyncedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktransactionSyncerIsSyncedCall) Return(arg0 bool) *MocktransactionSyncerIsSyncedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktransactionSyncerIsSyncedCall) Do(f func(context.Context) bool) *MocktransactionSyncerIsSyncedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktransactionSyncerIsSyncedCall) DoAndReturn(f func(context.Context) bool) *MocktransactionSyncerIsSyncedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MocktransactionValidator is a mock of transactionValidator interface.
type MocktransactionValidator struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionValidatorMockRecorder
}

// MocktransactionValidatorMockRecorder is the mock recorder for MocktransactionValidator.
type MocktransactionValidatorMockRecorder struct {
	mock *MocktransactionValidator
}

// NewMocktransactionValidator creates a new mock instance.
func NewMocktransactionValidator(ctrl *gomock.Controller) *MocktransactionValidator {
	mock := &MocktransactionValidator{ctrl: ctrl}
	mock.recorder = &MocktransactionValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionValidator) EXPECT() *MocktransactionValidatorMockRecorder {
	return m.recorder
}

// VerifyAndCacheTx mocks base method.
func (m *MocktransactionValidator) VerifyAndCacheTx(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndCacheTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAndCacheTx indicates an expected call of VerifyAndCacheTx.
func (mr *MocktransactionValidatorMockRecorder) VerifyAndCacheTx(arg0, arg1 any) *MocktransactionValidatorVerifyAndCacheTxCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndCacheTx", reflect.TypeOf((*MocktransactionValidator)(nil).VerifyAndCacheTx), arg0, arg1)
	return &MocktransactionValidatorVerifyAndCacheTxCall{Call: call}
}

// MocktransactionValidatorVerifyAndCacheTxCall wrap *gomock.Call
type MocktransactionValidatorVerifyAndCacheTxCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MocktransactionValidatorVerifyAndCacheTxCall) Return(arg0 error) *MocktransactionValidatorVerifyAndCacheTxCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MocktransactionValidatorVerifyAndCacheTxCall) Do(f func(context.Context, []byte) error) *MocktransactionValidatorVerifyAndCacheTxCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MocktransactionValidatorVerifyAndCacheTxCall) DoAndReturn(f func(context.Context, []byte) error) *MocktransactionValidatorVerifyAndCacheTxCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
