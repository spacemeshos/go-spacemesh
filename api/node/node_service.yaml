openapi: 3.0.0
info:
  title: Node Service API
  description: API of a Node Service
  version: 1.0.0

paths:
  /activation/positioning_atx/{publish_epoch}:
    get:
      summary: Get Positioning ATX ID with given maximum publish epoch
      tags:
        - "Activation"
      parameters:
        - in: path
          name: publish_epoch
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/EpochID"

      responses:
        "200":
          description: ATX ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  ID:
                    $ref: "models/components.yaml#/components/schemas/ATXID"
                required:
                  - ID

  /activation/last_atx/{node_id}:
    get:
      summary: Get last ATX by node ID
      tags:
        - "Activation"
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/NodeID"
      responses:
        "200":
          description: ATX
          content:
            application/json:
              schema:
                $ref: "models/components.yaml#/components/schemas/ActivationTx"
        "400":
          description: Bad request
          content:
            plain/text:
              schema:
                type: string

        "404":
          description: There is no ATX for this node

  /activation/atx/{atx_id}:
    get:
      summary: Get ATX by ID
      tags:
        - "Activation"
      parameters:
        - in: path
          name: atx_id
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/ATXID"
      responses:
        "200":
          description: ATX
          content:
            application/json:
              schema:
                $ref: "models/components.yaml#/components/schemas/ActivationTx"
        "404":
          description: ATX not found

  /publish/{protocol}:
    post:
      summary: Publish a blob in the given p2p protocol
      tags:
        - "Publish"
      parameters:
        - in: path
          name: protocol
          required: true
          schema:
            type: string
            enum: [ax1, pp1, tx1, bc1, b1, bw1, bp1, bf1, bo1, mp1]
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Successfully published the blob
  /poet:
    post:
      summary: Store PoET proof
      tags:
        - "Poet"
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Successfully stored the proof
        "400":
          description: Bad request
          content:
            plain/text:
              schema:
                type: string
  /hare/round_template/{layer}/{iter}/{round}:
    get:
      summary: Get a hare message to sign
      tags:
        - "hare"
      parameters:
        - in: path
          name: layer 
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/LayerID"
        - in: path
          name: iter
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/HareIter"
        - in: path
          name: round
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/HareRound"
      responses:
        "200":
          description: successfully found the message to return to client
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "204":
          description: did not find a message to retrieve
  /hare/total_weight/{layer}:
    get:
      summary: Get the total weight for layer
      tags:
        - "hare"
      parameters:
        - in: path
          name: layer
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: successfully found the total weight to return to client
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "204":
          description: did not find a message to retrieve
  /hare/weight/{node_id}/{layer}:
    get:
      summary: Get the miner weight in layer
      tags:
        - "hare"
      parameters:
        - in: path
          name: node_id
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/NodeID"
        - in: path
          name: layer
          required: true
          schema:
            type: integer
            format: uint32
      responses:
        "200":
          description: successfully found the total weight to return to client
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "204":
          description: did not find a message to retrieve
  /hare/beacon/{epoch}:
    get:
      summary: Get the beacon value for an epoch
      tags:
        - "hare"
      parameters:
        - in: path
          name: epoch
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/EpochID"
      responses:
        "200":
          description: successfully found the epoch id
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "204":
          description: did not find a message to retrieve
  /proposal/{layer}/{node}:
    get:
      summary: Get a partial proposal for a given node in a layer
      tags:
        - "proposals"
      parameters:
        - in: path
          name: layer
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/LayerID"
        - in: path
          name: node
          required: true
          schema:
            $ref: "models/components.yaml#/components/schemas/NodeID"
      responses:
        "200":
          description: successfully created a partial proposal
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "500":
          description: could not generate proposal

