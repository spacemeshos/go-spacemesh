// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spacemeshos/go-spacemesh/api (interfaces: NetworkIdentity,PostSetupProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p/core/peer"
	types "github.com/spacemeshos/go-spacemesh/activation/types"
)

// MockNetworkIdentity is a mock of NetworkIdentity interface.
type MockNetworkIdentity struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkIdentityMockRecorder
}

// MockNetworkIdentityMockRecorder is the mock recorder for MockNetworkIdentity.
type MockNetworkIdentityMockRecorder struct {
	mock *MockNetworkIdentity
}

// NewMockNetworkIdentity creates a new mock instance.
func NewMockNetworkIdentity(ctrl *gomock.Controller) *MockNetworkIdentity {
	mock := &MockNetworkIdentity{ctrl: ctrl}
	mock.recorder = &MockNetworkIdentityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkIdentity) EXPECT() *MockNetworkIdentityMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockNetworkIdentity) ID() peer.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(peer.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNetworkIdentityMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNetworkIdentity)(nil).ID))
}

// MockPostSetupProvider is a mock of PostSetupProvider interface.
type MockPostSetupProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPostSetupProviderMockRecorder
}

// MockPostSetupProviderMockRecorder is the mock recorder for MockPostSetupProvider.
type MockPostSetupProviderMockRecorder struct {
	mock *MockPostSetupProvider
}

// NewMockPostSetupProvider creates a new mock instance.
func NewMockPostSetupProvider(ctrl *gomock.Controller) *MockPostSetupProvider {
	mock := &MockPostSetupProvider{ctrl: ctrl}
	mock.recorder = &MockPostSetupProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostSetupProvider) EXPECT() *MockPostSetupProviderMockRecorder {
	return m.recorder
}

// Benchmark mocks base method.
func (m *MockPostSetupProvider) Benchmark(arg0 types.PostSetupComputeProvider) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Benchmark", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Benchmark indicates an expected call of Benchmark.
func (mr *MockPostSetupProviderMockRecorder) Benchmark(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Benchmark", reflect.TypeOf((*MockPostSetupProvider)(nil).Benchmark), arg0)
}

// ComputeProviders mocks base method.
func (m *MockPostSetupProvider) ComputeProviders() []types.PostSetupComputeProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeProviders")
	ret0, _ := ret[0].([]types.PostSetupComputeProvider)
	return ret0
}

// ComputeProviders indicates an expected call of ComputeProviders.
func (mr *MockPostSetupProviderMockRecorder) ComputeProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeProviders", reflect.TypeOf((*MockPostSetupProvider)(nil).ComputeProviders))
}

// Config mocks base method.
func (m *MockPostSetupProvider) Config() types.PostConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(types.PostConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockPostSetupProviderMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockPostSetupProvider)(nil).Config))
}

// Status mocks base method.
func (m *MockPostSetupProvider) Status() *types.PostSetupStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*types.PostSetupStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockPostSetupProviderMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockPostSetupProvider)(nil).Status))
}

// StatusChan mocks base method.
func (m *MockPostSetupProvider) StatusChan() <-chan *types.PostSetupStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusChan")
	ret0, _ := ret[0].(<-chan *types.PostSetupStatus)
	return ret0
}

// StatusChan indicates an expected call of StatusChan.
func (mr *MockPostSetupProviderMockRecorder) StatusChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusChan", reflect.TypeOf((*MockPostSetupProvider)(nil).StatusChan))
}
