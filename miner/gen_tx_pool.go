// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package miner

import (
	"fmt"
	"sync"

	"github.com/spacemeshos/go-spacemesh/common/types"
)

type TypesAtxIdMemPool struct {
	mu    sync.RWMutex
	txMap map[types.AtxId]*types.ActivationTx
}

func NewTypesAtxIdMemPool() *TypesAtxIdMemPool {
	return &TypesAtxIdMemPool{sync.RWMutex{}, make(map[types.AtxId]*types.ActivationTx)}
}

func (mem *TypesAtxIdMemPool) Get(id types.AtxId) (types.ActivationTx, error) {
	mem.mu.RLock()
	defer mem.mu.RUnlock()
	val, ok := mem.txMap[id]
	if !ok {
		return *new(types.ActivationTx), fmt.Errorf("Cannot find in mempool")
	}
	return *val, nil
}

func (mem *TypesAtxIdMemPool) PopItems(size int) []types.ActivationTx {
	mem.mu.RLock()
	defer mem.mu.RUnlock()
	txList := make([]types.ActivationTx, 0, MaxTransactionsPerBlock)
	for _, k := range mem.txMap {
		txList = append(txList, *k)
	}
	return txList
}

func (mem *TypesAtxIdMemPool) Put(id types.AtxId, item *types.ActivationTx) {
	mem.mu.Lock()
	mem.txMap[id] = item
	mem.mu.Unlock()
}

func (mem *TypesAtxIdMemPool) Invalidate(id types.AtxId) {
	mem.mu.Lock()
	defer mem.mu.Unlock()
	delete(mem.txMap, id)
}
