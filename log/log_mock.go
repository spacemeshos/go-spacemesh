// Code generated by MockGen. DO NOT EDIT.
// Source: ./log.go
//
// Generated by this command:
//
//	mockgen -typed -package=log -destination=./log_mock.go -source=./log.go
//

// Package log is a generated GoMock package.
package log

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(format any, args ...any) *MockLoggerDebugCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
	return &MockLoggerDebugCall{Call: call}
}

// MockLoggerDebugCall wrap *gomock.Call
type MockLoggerDebugCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugCall) Return() *MockLoggerDebugCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugCall) Do(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Error mocks base method.
func (m *MockLogger) Error(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(format any, args ...any) *MockLoggerErrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
	return &MockLoggerErrorCall{Call: call}
}

// MockLoggerErrorCall wrap *gomock.Call
type MockLoggerErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerErrorCall) Return() *MockLoggerErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerErrorCall) Do(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerErrorCall) DoAndReturn(f func(string, ...any)) *MockLoggerErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Info mocks base method.
func (m *MockLogger) Info(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(format any, args ...any) *MockLoggerInfoCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
	return &MockLoggerInfoCall{Call: call}
}

// MockLoggerInfoCall wrap *gomock.Call
type MockLoggerInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfoCall) Return() *MockLoggerInfoCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfoCall) Do(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfoCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Panic mocks base method.
func (m *MockLogger) Panic(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLoggerMockRecorder) Panic(format any, args ...any) *MockLoggerPanicCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), varargs...)
	return &MockLoggerPanicCall{Call: call}
}

// MockLoggerPanicCall wrap *gomock.Call
type MockLoggerPanicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerPanicCall) Return() *MockLoggerPanicCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerPanicCall) Do(f func(string, ...any)) *MockLoggerPanicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerPanicCall) DoAndReturn(f func(string, ...any)) *MockLoggerPanicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warning mocks base method.
func (m *MockLogger) Warning(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockLoggerMockRecorder) Warning(format any, args ...any) *MockLoggerWarningCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), varargs...)
	return &MockLoggerWarningCall{Call: call}
}

// MockLoggerWarningCall wrap *gomock.Call
type MockLoggerWarningCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarningCall) Return() *MockLoggerWarningCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarningCall) Do(f func(string, ...any)) *MockLoggerWarningCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarningCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarningCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// With mocks base method.
func (m *MockLogger) With() FieldLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With")
	ret0, _ := ret[0].(FieldLogger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With() *MockLoggerWithCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With))
	return &MockLoggerWithCall{Call: call}
}

// MockLoggerWithCall wrap *gomock.Call
type MockLoggerWithCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithCall) Return(arg0 FieldLogger) *MockLoggerWithCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithCall) Do(f func() FieldLogger) *MockLoggerWithCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithCall) DoAndReturn(f func() FieldLogger) *MockLoggerWithCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithContext mocks base method.
func (m *MockLogger) WithContext(arg0 context.Context) Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(Log)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLoggerMockRecorder) WithContext(arg0 any) *MockLoggerWithContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLogger)(nil).WithContext), arg0)
	return &MockLoggerWithContextCall{Call: call}
}

// MockLoggerWithContextCall wrap *gomock.Call
type MockLoggerWithContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithContextCall) Return(arg0 Log) *MockLoggerWithContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithContextCall) Do(f func(context.Context) Log) *MockLoggerWithContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithContextCall) DoAndReturn(f func(context.Context) Log) *MockLoggerWithContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WithName mocks base method.
func (m *MockLogger) WithName(arg0 string) Log {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(Log)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockLoggerMockRecorder) WithName(arg0 any) *MockLoggerWithNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockLogger)(nil).WithName), arg0)
	return &MockLoggerWithNameCall{Call: call}
}

// MockLoggerWithNameCall wrap *gomock.Call
type MockLoggerWithNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWithNameCall) Return(arg0 Log) *MockLoggerWithNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWithNameCall) Do(f func(string) Log) *MockLoggerWithNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWithNameCall) DoAndReturn(f func(string) Log) *MockLoggerWithNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
