name: CI

env:
  go-version: '1.14.6'
  GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  CLUSTER_NAME_ELK: ${{ secrets.CLUSTER_NAME_ELK }}
  CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
  CLUSTER_ZONE_ELK: ${{ secrets.CLUSTER_ZONE_ELK }}
  ES_PASSWD: ${{ secrets.ES_PASSWD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ES_USER: ${{ secrets.ES_USER }}
  ES_PASS: ${{ secrets.ES_PASS }}
  MAIN_ES_IP: ${{ secrets.MAIN_ES_IP }}
  TD_QUEUE_NAME: ${{ secrets.TD_QUEUE_NAME }}
  TD_QUEUE_ZONE: ${{ secrets.TD_QUEUE_ZONE }}
  DUMP_QUEUE_NAME: ${{ secrets.DUMP_QUEUE_NAME }}
  DUMP_QUEUE_ZONE: ${{ secrets.DUMP_QUEUE_ZONE }}

# Trigger the workflow on all pull requests, and on push to specific branches
on:
  # run for all pull requests and pushes to certain branches
  pull_request:
  push:
    branches:
      - staging
      - trying

jobs:
  ## stage 0: check which files were changed
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      nondocchanges: ${{ steps.filter.outputs.nondoc }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # this pattern matches using picomatch syntax (used by this third party Action), which is slightly
          # different than GitHub syntax: it matches any file in any path ending in '.md'. this checks if
          # any non-markdown files were changed.
          filters: |
            nondoc:
              - '!**/*.md'

  ## stage 1: run unit tests and app tests as a preqrequisite
  ## these run on all pushes to all pull requests, all branches
  ## note that secrets may not be accessible in this phase
  quicktests:
    runs-on: ubuntu-latest
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    # should not take more than 2-3 mins
    timeout-minutes: 5
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go-version }}
      - name: fmt, tidy, lint
        run: |
          make
          make test-tidy
          make test-fmt
          make lint
  unittests:
    runs-on: ubuntu-latest
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    # should take around 8-10 mins
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go-version }}
      - name: setup env
        run: make
      - name: unit tests (except app test)
        run: make test-no-app-test
  apptests:
    runs-on: ubuntu-latest
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    # should take around 7-9 mins
    timeout-minutes: 15
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: set up go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go-version }}
      - name: setup env
        run: make
      - name: app test
        run: make test-only-app-test
  # checkpoint and print a single, clean status message to slack
  ci-stage1:
    # run regardless of status of previous jobs but skip if the required secret is not accessible
    if: always()
    needs:
      - filter-changes
      - quicktests
      - unittests
      - apptests
    runs-on: ubuntu-latest
    env:
      # short-circuit success if no non-doc files were modified
      status: ${{ (needs.filter-changes.outputs.nondocchanges == 'false' || (needs.quicktests.result == 'success' && needs.unittests.result == 'success' && needs.apptests.result == 'success')) && 'success' || 'failure' }}
    # this is the easiest way to access success/failure state of previous jobs in this workflow
    steps:
      - uses: act10ns/slack@v1
        name: Slack notification
        # skip if the secret is not accessible
        if: env.SLACK_WEBHOOK_URL
        with:
          status: ${{ env.status }}
      - name: Mark the job as succeeded
        if: env.status == 'success'
        run: exit 0
      - name: Mark the job as failed
        if: env.status != 'success'
        run: exit 1


  ## workflow for regular pull requests ends here
  ## everything below here only runs in a push when bors is invoked
  ## so we can safely assume that all secrets are accessible here below

  ## stage 2: next run docker push, as system tests rely on this
  dockerpush:
    # only run on push, not on pull_request
    # note that this does NOT run on pushes to branch develop, see separate workflow file for that
    if: github.event_name == 'push'
    # should take 2-3 mins
    timeout-minutes: 7
    needs:
      - ci-stage1
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: push to dockerhub
        run: make dockerpush

  ## stage 3: finally run system tests in parallel if everything else passes
  systemtest-latenodes:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: late nodes system test
        run: make dockertest-late-nodes-elk
  systemtest-blocks-add-node:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: blocks add node test
        run: make dockertest-blocks-add-node-elk
  systemtest-blocks-remove-node:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: remove node test
        run: make dockertest-blocks-remove-node-elk
  systemtest-mining:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: mining system test
        run: make dockertest-mining-elk
  systemtest-p2p:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: p2p system test
        run: make dockertest-p2p-elk
  systemtest-hare:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: hare system test
        run: make dockertest-hare-elk
  systemtest-sync:
    runs-on: ubuntu-latest
    # only run on push, not on pull_request
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 80
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: sync system test
        run: make dockertest-sync-elk


  # this summary job is a shortcut that obviates the need to list every individual job in bors.toml
  # all tests that are required to pass before a bors merge must be listed here!
  ci-stage2:
    if: always() && github.event_name == 'push' && needs.ci-stage1.result == 'success'
    needs:
      - filter-changes
      - ci-stage1
      - systemtest-latenodes
      - systemtest-blocks-add-node
      - systemtest-blocks-remove-node
      - systemtest-mining
      - systemtest-p2p
      - systemtest-hare
      - systemtest-sync
    runs-on: ubuntu-latest
    env:
      # short-circuit success if no non-doc files were modified
      status: ${{ (needs.filter-changes.outputs.nondocchanges == 'false' || (needs.systemtest-latenodes.result == 'success' && needs.systemtest-blocks-add-node.result == 'success' && needs.systemtest-blocks-remove-node.result == 'success' && needs.systemtest-mining.result == 'success' && needs.systemtest-p2p.result == 'success' && needs.systemtest-hare.result == 'success' && needs.systemtest-sync.result == 'success')) && 'success' || 'failure' }}
    steps:
      # print a single, clean status update to slack
      - uses: act10ns/slack@v1
        name: Slack notification
        with:
          status: ${{ env.status }}
      - name: Mark the job as succeeded
        if: env.status == 'success'
        run: exit 0
      - name: Mark the job as failed
        if: env.status != 'success'
        run: exit 1
