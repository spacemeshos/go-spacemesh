name: CI

env:
  go-version: "1.19"
  GCLOUD_KEY: ${{ secrets.GCLOUD_KEY }}
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  CLUSTER_ZONE: ${{ secrets.CLUSTER_ZONE }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  ES_USER: ${{ secrets.ES_USER }}
  ES_PASS: ${{ secrets.ES_PASS }}
  MAIN_ES_IP: ${{ secrets.MAIN_ES_IP }}
  TD_QUEUE_NAME: ${{ secrets.TD_QUEUE_NAME }}
  TD_QUEUE_ZONE: ${{ secrets.TD_QUEUE_ZONE }}
  DUMP_QUEUE_NAME: ${{ secrets.DUMP_QUEUE_NAME }}
  DUMP_QUEUE_ZONE: ${{ secrets.DUMP_QUEUE_ZONE }}
  CI_CLUSTER_NAME: ${{ secrets.CI_CLUSTER_NAME }}
  CI_GCP_CREDENTIALS: ${{ secrets.CI_GCP_CREDENTIALS }}
  CI_GCP_PROJECT_ID: ${{ secrets.CI_GCP_PROJECT_ID }}
  CI_REGION_NAME: ${{ secrets.CI_REGION_NAME }}

# Trigger the workflow on all pull requests, and on push to specific branches
on:
  # run for all pull requests and pushes to certain branches
  pull_request:
  push:
    branches:
      - staging
      - trying

jobs:
  ## stage 0: check which files were changed
  filter-changes:
    runs-on: ubuntu-latest
    outputs:
      nondocchanges: ${{ steps.filter.outputs.nondoc }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          # this pattern matches using picomatch syntax (used by this third party Action), which is slightly
          # different than GitHub syntax: it matches any file in any path ending in '.md'. this checks if
          # any non-markdown files were changed.
          filters: |
            nondoc:
              - '!**/*.md'

  ## stage 1: run unit tests and app tests as a prerequisite
  ## these run on all pushes to all pull requests, all branches
  ## note that secrets may not be accessible in this phase
  quicktests:
    runs-on: ubuntu-latest
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    # should not take more than 2-3 mins
    timeout-minutes: 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-cache-go-${{ env.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-cache-go-${{ env.go-version }}-
      - name: fmt, tidy, lint
        run: |
          make install
          make tidy
          make test-fmt
      - name: staticcheck
        run: make staticcheck

  lint:
    runs-on: ubuntu-latest
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    # should not take more than 4-6 mins
    timeout-minutes: 10
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-cache-go-${{ env.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-cache-go-${{ env.go-version }}-
      - name: setup env
        run: make install
      - name: lint
        run: make lint-github-action

  build:
    runs-on: ${{ matrix.os }}
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-cache-go-${{ env.go-version }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-cache-go-${{ env.go-version }}-build-
            ${{ runner.os }}-cache-go-${{ env.go-version }}-
      - name: setup env
        run: make install
      - name: build
        timeout-minutes: 5
        run: make build

  unittests:
    runs-on: ${{ matrix.os }}
    needs: filter-changes
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            allow-failure: "false"
          - os: macos-latest
            allow-failure: "true"
          - os: windows-latest
            allow-failure: "true"
    steps:
      # as we use some request to localhost, sometimes it gives us flaky tests. try to disable tcp offloading for fix it
      # https://github.com/actions/virtual-environments/issues/1187
      - name: disable TCP/UDP offload
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo ethtool -K eth0 tx off
          sudo ethtool -K eth0 rx off
      - name: disable TCP/UDP offload
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          sudo sysctl -w net.link.generic.system.hwcksum_tx=0
          sudo sysctl -w net.link.generic.system.hwcksum_rx=0
      # TODO(mafa): these settings don't seem to improve network performance on windows - disabled for now
      # - name: disable TCP/UDP offload
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     netsh interface tcp set global rss=disabled
      #     netsh interface show interface
      #     netsh interface set interface name="Ethernet 3" admin=disabled
      #     netsh interface set interface name="Ethernet 3" admin=enabled
      - name: checkout
        uses: actions/checkout@v3
      - name: set up go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-cache-go-${{ env.go-version }}-unittests-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-cache-go-${{ env.go-version }}-unittests-
            ${{ runner.os }}-cache-go-${{ env.go-version }}-
      - name: setup env
        run: make install
      - name: Clear test cache
        run: make clear-test-cache
      - name: unit tests
        timeout-minutes: 25
        env:
          GOTESTSUM_FORMAT: standard-verbose
          GOTESTSUM_JUNITFILE: unit-tests.xml
        run: make test
        continue-on-error: ${{ matrix.allow-failure == 'true' }}
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        # always run even if the previous step fails
        if: always()
        with:
          report_paths: "**/unit-tests.xml"
          annotate_only: true
          fail_on_failure: ${{ matrix.allow-failure == 'false' }}

  # checkpoint and print a single, clean status message to slack
  ci-stage1:
    # run regardless of status of previous jobs but skip if the required secret is not accessible
    if: always()
    needs:
      - filter-changes
      - quicktests
      - lint
      - unittests
    runs-on: ubuntu-latest
    env:
      # short-circuit success if no non-doc files were modified
      # this is the easiest way to access success/failure state of previous jobs in this workflow
      status: ${{ (needs.filter-changes.outputs.nondocchanges == 'false' || (needs.quicktests.result == 'success' && needs.lint.result == 'success' && needs.unittests.result == 'success')) && 'success' || 'failure' }}
    steps:
      - uses: act10ns/slack@v2
        name: Slack notification
        # skip if the secret is not accessible
        if: env.SLACK_WEBHOOK_URL
        with:
          status: ${{ env.status }}
      - name: Mark the job as succeeded
        if: env.status == 'success'
        run: exit 0
      - name: Mark the job as failed
        if: env.status != 'success'
        run: exit 1

  ## workflow for regular pull requests ends here
  ## everything below here only runs in a push when bors is invoked
  ## so we can safely assume that all secrets are accessible here below

  ## stage 2: next run docker push, as system tests rely on this

  dockerpush:
    # only run on push, not on pull_request
    # note that this does NOT run on pushes to branch develop, see separate workflow file for that
    if: github.event_name == 'push'
    # should take 2-3 mins
    timeout-minutes: 7
    needs:
      - ci-stage1
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: push to docker hub
        run: make dockerpush

  ## stage 3: finally run system tests in parallel if everything else passes
  ## Run new system tests
  systest:
    runs-on: ubuntu-latest
    if: ${{ needs.filter-changes.outputs.nondocchanges == 'true' && github.event_name == 'push' }}
    needs:
      - filter-changes
      - dockerpush
    timeout-minutes: 90
    concurrency: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup kubectl
        id: install
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.23.15"

      - name: Setup gcloud authentication
        id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          # GCP_CREDENTIALS is minified JSON of service account
          credentials_json: "${{ secrets.CI_GCP_CREDENTIALS }}"

      - name: Configure gcloud
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure kubectl
        run: gcloud container clusters get-credentials ${{ secrets.CI_CLUSTER_NAME }} --region ${{ secrets.CI_REGION_NAME }} --project ${{ secrets.CI_GCP_PROJECT_ID }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push go-spacemesh build to docker hub
        run: make dockerpush

      - name: Get branch and commit hash
        id: vars
        shell: bash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build tests docker image
        run: make -C systest docker

      - name: Push tests docker images
        run: make -C systest push

      - name: set up go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go-version }}

      - name: Run tests I
        timeout-minutes: 55
        env:
          test_id: systest-${{ steps.vars.outputs.sha_short }}
          label: sanity
          storage: premium-rwo=10Gi
          node_selector: cloud.google.com/gke-nodepool=gha
          size: 50
          bootstrap: 10m
          level: info
          clusters: 2
        run: make -C systest run test_name=.

      - name: Run tests II
        timeout-minutes: 30
        env:
          test_id: systest-${{ steps.vars.outputs.sha_short }}
          label: destructive
          storage: premium-rwo=10Gi
          node_selector: cloud.google.com/gke-nodepool=gha
          size: 30
          bootstrap: 10m
          level: info
          clusters: 2
        run: make -C systest run test_name=.

      - name: Delete pod
        if: always()
        env:
          test_id: systest-${{ steps.vars.outputs.sha_short }}
        run: make -C systest clean

  # this summary job is a shortcut that obviates the need to list every individual job in bors.toml
  # all tests that are required to pass before a bors merge must be listed here!
  ci-stage2:
    if: always() && github.event_name == 'push' && needs.ci-stage1.result == 'success'
    needs:
      - filter-changes
      - ci-stage1
      - systest
    runs-on: ubuntu-latest
    env:
      # short-circuit success if no non-doc files were modified
      status: ${{ (needs.filter-changes.outputs.nondocchanges == 'false' || needs.systest.result == 'success') && 'success' || 'failure' }}
    steps:
      # print a single, clean status update to slack
      - uses: act10ns/slack@v2
        name: Slack notification
        with:
          status: ${{ env.status }}
      - name: Mark the job as succeeded
        if: env.status == 'success'
        run: exit 0
      - name: Mark the job as failed
        if: env.status != 'success'
        run: exit 1
