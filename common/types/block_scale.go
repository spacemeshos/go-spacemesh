// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package types

import (
	"github.com/spacemeshos/go-scale"
)

func (t *Block) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.InnerBlock.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Block) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.InnerBlock.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *InnerBlock) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.LayerIndex.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.TickHeight))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Rewards)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.TxIDs)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *InnerBlock) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.LayerIndex.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.TickHeight = uint64(field)
	}
	{
		field, n, err := scale.DecodeStructSlice[AnyReward](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Rewards = field
	}
	{
		field, n, err := scale.DecodeStructSlice[TransactionID](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.TxIDs = field
	}
	return total, nil
}

func (t *RatNum) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Num))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.Denom))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *RatNum) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Num = uint64(field)
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Denom = uint64(field)
	}
	return total, nil
}

func (t *AnyReward) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.Coinbase[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Weight.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *AnyReward) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.Coinbase[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.Weight.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Certificate) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeByteArray(enc, t.BlockID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSlice(enc, t.Signatures)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *Certificate) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := scale.DecodeByteArray(dec, t.BlockID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeStructSlice[CertifyMessage](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Signatures = field
	}
	return total, nil
}

func (t *CertifyMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.CertifyContent.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSlice(enc, t.Signature)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *CertifyMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.CertifyContent.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeByteSlice(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Signature = field
	}
	return total, nil
}

func (t *CertifyContent) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.LayerID.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.BlockID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact16(enc, uint16(t.EligibilityCnt))
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSlice(enc, t.Proof)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *CertifyContent) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.LayerID.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.DecodeByteArray(dec, t.BlockID[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeCompact16(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.EligibilityCnt = uint16(field)
	}
	{
		field, n, err := scale.DecodeByteSlice(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.Proof = field
	}
	return total, nil
}
