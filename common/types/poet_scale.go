// Code generated by github.com/spacemeshos/go-scale/scalegen. DO NOT EDIT.

// nolint
package types

import (
	"github.com/spacemeshos/go-scale"
)

func (t *PoetChallenge) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeOption(enc, t.NIPostChallenge)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.InitialPost)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeOption(enc, t.InitialPostMetadata)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact32(enc, uint32(t.NumUnits))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PoetChallenge) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeOption[NIPostChallenge](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NIPostChallenge = field
	}
	{
		field, n, err := scale.DecodeOption[Post](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.InitialPost = field
	}
	{
		field, n, err := scale.DecodeOption[PostMetadata](dec)
		if err != nil {
			return total, err
		}
		total += n
		t.InitialPostMetadata = field
	}
	{
		field, n, err := scale.DecodeCompact32(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.NumUnits = uint32(field)
	}
	return total, nil
}

func (t *PoetProof) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.MerkleProof.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStructSliceWithLimit(enc, t.Members, 100000)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeCompact64(enc, uint64(t.LeafCount))
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PoetProof) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.MerkleProof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeStructSliceWithLimit[Member](dec, 100000)
		if err != nil {
			return total, err
		}
		total += n
		t.Members = field
	}
	{
		field, n, err := scale.DecodeCompact64(dec)
		if err != nil {
			return total, err
		}
		total += n
		t.LeafCount = uint64(field)
	}
	return total, nil
}

func (t *PoetProofMessage) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := t.PoetProof.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteSliceWithLimit(enc, t.PoetServiceID, 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeStringWithLimit(enc, string(t.RoundID), 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := scale.EncodeByteArray(enc, t.Signature[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PoetProofMessage) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		n, err := t.PoetProof.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		field, n, err := scale.DecodeByteSliceWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.PoetServiceID = field
	}
	{
		field, n, err := scale.DecodeStringWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.RoundID = string(field)
	}
	{
		n, err := scale.DecodeByteArray(dec, t.Signature[:])
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PoetRound) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStringWithLimit(enc, string(t.ID), 32)
		if err != nil {
			return total, err
		}
		total += n
	}
	{
		n, err := t.End.EncodeScale(enc)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *PoetRound) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStringWithLimit(dec, 32)
		if err != nil {
			return total, err
		}
		total += n
		t.ID = string(field)
	}
	{
		n, err := t.End.DecodeScale(dec)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ProcessingError) EncodeScale(enc *scale.Encoder) (total int, err error) {
	{
		n, err := scale.EncodeStringWithLimit(enc, string(t.Err), 1024)
		if err != nil {
			return total, err
		}
		total += n
	}
	return total, nil
}

func (t *ProcessingError) DecodeScale(dec *scale.Decoder) (total int, err error) {
	{
		field, n, err := scale.DecodeStringWithLimit(dec, 1024)
		if err != nil {
			return total, err
		}
		total += n
		t.Err = string(field)
	}
	return total, nil
}
